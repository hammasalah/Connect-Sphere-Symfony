This file is a merged representation of the entire codebase, combined into a single document by Repomix.

<file_summary>
This section contains a summary of this file.

<purpose>
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.
</purpose>

<file_format>
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files (if enabled)
5. Multiple file entries, each consisting of:
  - File path as an attribute
  - Full contents of the file
</file_format>

<usage_guidelines>
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.
</usage_guidelines>

<notes>
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Files are sorted by Git change count (files with more changes are at the bottom)
</notes>

</file_summary>

<directory_structure>
Command/CreateTestUserCommand.php
Controller/analytics/AnalyticsController.php
Controller/application/ApplicationFormController.php
Controller/auth/AuthController.php
Controller/auth/CategorySkipController.php
Controller/chatbot/ChatbotController.php
Controller/create_job/CreateJobController.php
Controller/DashboardController.php
Controller/events/EventsController.php
Controller/explore/ExploreController.php
Controller/group/GroupController.php
Controller/home/HomeController.php
Controller/jobapplications/JobApplicationsController.php
Controller/jobfeed/JobFeedController.php
Controller/messagerie/DiscussionController.php
Controller/messagerie/MessageController.php
Controller/organizer/EditEventController.php
Controller/organizer/EditJobController.php
Controller/organizer/OrganizerController.php
Controller/participation/ParticipationController.php
Controller/PasswordController.php
Controller/Points/ConversionController.php
Controller/Points/DynamicConversionController.php
Controller/Points/RouletteController.php
Controller/Points/VisiteUtilisateurController.php
Controller/profile/ProfileController.php
Controller/RootController.php
Controller/social/SocialController.php
Entity/Applications.php
Entity/Category.php
Entity/Comments.php
Entity/Conversion.php
Entity/Events.php
Entity/FeedPosts.php
Entity/GroupFeedPosts.php
Entity/GroupMembers.php
Entity/HistoriquePoints.php
Entity/Jobs.php
Entity/Likes.php
Entity/Message.php
Entity/Messages.php
Entity/Notification.php
Entity/Participation.php
Entity/Reviews.php
Entity/Rewards.php
Entity/Roulette.php
Entity/Shares.php
Entity/TransactionArgent.php
Entity/UserFollowers.php
Entity/UserGroups.php
Entity/UserIntrests.php
Entity/UserMessages.php
Entity/UserProfile.php
Entity/UserRewards.php
Entity/Users.php
Entity/VisiteUtilisateur.php
Entity/WorkerRaitings.php
Form/ApplicationFormType.php
Form/CreateJobFormType.php
Form/EditEventsType.php
Form/EditJobsType.php
Form/EventsType.php
Form/LoginFormType.php
Form/ProfileType.php
Form/RegistrationFormType.php
Kernel.php
Repository/ApplicationsRepository.php
Repository/CategoryRepository.php
Repository/CommentsRepository.php
Repository/ConversionRepository.php
Repository/EventsRepository.php
Repository/FeedPostsRepository.php
Repository/GroupFeedPostsRepository.php
Repository/GroupMembersRepository.php
Repository/HistoriquePointsRepository.php
Repository/JobsRepository.php
Repository/LikesRepository.php
Repository/MessageRepository.php
Repository/MessagesRepository.php
Repository/NotificationRepository.php
Repository/ParticipationRepository.php
Repository/ReviewsRepository.php
Repository/RewardsRepository.php
Repository/RouletteRepository.php
Repository/SharesRepository.php
Repository/TransactionArgentRepository.php
Repository/UserFollowersRepository.php
Repository/UserGroupsRepository.php
Repository/UserIntrestsRepository.php
Repository/UserMessagesRepository.php
Repository/UserProfileRepository.php
Repository/UserRewardsRepository.php
Repository/UsersRepository.php
Repository/VisiteUtilisateurRepository.php
Repository/WorkerRaitingsRepository.php
Service/PointsService.php
Service/RouletteService.php
Service/VisitService.php
Service/VisitTrackerService.php
WebSocket/Chat.php
</directory_structure>

<files>
This section contains the contents of the repository's files.

<file path="Command/CreateTestUserCommand.php">
<?php

namespace App\Command;

use App\Entity\Users;
use Doctrine\ORM\EntityManagerInterface;
use Symfony\Component\Console\Command\Command;
use Symfony\Component\Console\Input\InputInterface;
use Symfony\Component\Console\Output\OutputInterface;

class CreateTestUserCommand extends Command
{
    protected static $defaultName = 'app:create-test-user';
    
    private $entityManager;

    public function __construct(EntityManagerInterface $entityManager)
    {
        $this->entityManager = $entityManager;
        parent::__construct();
    }

    protected function execute(InputInterface $input, OutputInterface $output): int
    {
        $user = new Users();
        $user->setUsername('testuser');
        $user->setPassword(password_hash('testpassword', PASSWORD_BCRYPT));
        $user->setEmail('test@example.com');
        $user->setCreatedAt(date('Y-m-d H:i:s'));
        $user->setAge(25);
        $user->setGender('male');
        $user->setPoints(0);
        $user->setArgent(100.00);

        $this->entityManager->persist($user);
        $this->entityManager->flush();

        $output->writeln('Test user created with ID: '.$user->getId());
        
        return Command::SUCCESS;
    }
}
</file>

<file path="Controller/analytics/AnalyticsController.php">
<?php

namespace App\Controller\analytics;

use App\Repository\EventsRepository;
use App\Repository\ParticipationRepository;
use Symfony\Bundle\FrameworkBundle\Controller\AbstractController;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\Routing\Annotation\Route;

class AnalyticsController extends AbstractController
{
    #[Route('/analytics', name: 'app_analytics')]
    public function index(
        Request $request,
        EventsRepository $eventRepository,
        ParticipationRepository $participationRepo
    ): Response {
        $user = $request->getSession()->get('user');

        if (!$user) {
            $this->addFlash('error', 'Utilisateur non connectÃ©.');
            return $this->redirectToRoute('app_login');
        }

        // 1. Get events created by this user
        $events = $eventRepository->findBy(['organizerId' => $user]);

        // 2. Calculate average age per event
        $eventAverages = [];
        foreach ($events as $event) {
            $participants = $participationRepo->findBy(['event' => $event]);
            $ages = [];

            foreach ($participants as $p) {
                $participant = $p->getParticipant();
                $age = $participant?->getAge();
                if ($age !== null) {
                    $ages[] = $age;
                }
            }

            if (!empty($ages)) {
                $eventAverages[] = [
                    'event' => $event,
                    'average_age' => round(array_sum($ages) / count($ages), 2)
                ];
            }
        }

        // 3. Get selected event for gender chart
        $defaultEventId = !empty($events) ? $events[0]->getId() : 0;
        $selectedEventId = $request->query->getInt('event_id', $defaultEventId);
        $selectedEvent = $eventRepository->find($selectedEventId);

        // 4. Count gender
        $genderData = ['male' => 0, 'female' => 0];

        if ($selectedEvent) {
            $participations = $participationRepo->findBy(['event' => $selectedEvent]);

            foreach ($participations as $p) {
                $participant = $p->getParticipant();
                $gender = strtolower(trim($participant?->getGender() ?? ''));

                if ($gender === 'male') {
                    $genderData['male']++;
                } elseif ($gender === 'female') {
                    $genderData['female']++;
                }
            }
        }

        return $this->render('analytics/analytics.html.twig', [
            'eventAverages' => $eventAverages,
            'events' => $events,
            'selectedEventId' => $selectedEventId,
            'genderData' => $genderData
        ]);
    }
}
</file>

<file path="Controller/application/ApplicationFormController.php">
<?php

namespace App\Controller\application;

use Symfony\Bundle\FrameworkBundle\Controller\AbstractController;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\Routing\Annotation\Route;

class ApplicationFormController extends AbstractController
{
    #[Route('/application/form', name: 'app_application_form')]
    public function index(): Response
    {
        return $this->render('application_form/application_form.html.twig', [
            'controller_name' => 'ApplicationFormController',
        ]);
    }
}
</file>

<file path="Controller/auth/AuthController.php">
<?php

namespace App\Controller\auth;

use Symfony\Bundle\FrameworkBundle\Controller\AbstractController;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\Routing\Annotation\Route;
use Symfony\Component\HttpFoundation\Request;
use Doctrine\ORM\EntityManagerInterface;
use App\Form\RegistrationFormType;
use App\Entity\Users;
use App\Entity\Category;
use App\Entity\UserIntrests;
use Symfony\Component\HttpFoundation\Session\SessionInterface;

class AuthController extends AbstractController
{
    #[Route('/login', name: 'app_login', methods: ['GET', 'POST'])]
    public function login(Request $request, SessionInterface $session, EntityManagerInterface $entityManager): Response
    {
        // If user is already logged in
        if ($session->get('user')) {
            //return $this->redirectToRoute('');
        }
    
        $error = null;
        $lastEmail = $request->request->get('email', '');
    
        if ($request->isMethod('POST')) {
            $email = $request->request->get('email');
            $password = $request->request->get('password');
    
            $user = $entityManager->getRepository(Users::class)->findOneBy(['email' => $email]);
    
            if (!$user || $user->getPassword() !== $password) {
                $error = 'Invalid credentials';
            } else {
                $session->set('user', $user);
                return $this->redirectToRoute('app_home');
            }
        }
    
        return $this->render('auth/login.html.twig', [
            'error' => $error,
            'last_username' => $lastEmail
        ]);
    }

    #[Route('/logout', name: 'app_logout')]
    public function logout(SessionInterface $session): Response
    {
        $session->remove('user');
        return $this->redirectToRoute('app_login');
    }

    #[Route('/register', name: 'app_register')]
    public function register(Request $request, EntityManagerInterface $entityManager, SessionInterface $session): Response
    {
        $user = new Users();
        $form = $this->createForm(RegistrationFormType::class, $user);
        $form->handleRequest($request);

        if ($form->isSubmitted()) {
            if ($form->isValid()) {
                // Set basic user data
                $user->setCreatedAt(date('Y-m-d H:i:s'));
                $user->setPoints(0);
                $user->setArgent(0);
                
                // Store plain password (not recommended for production)
                $plainPassword = $form->get('plainPassword')->getData();
                $user->setPassword($plainPassword);

                // Save the user
                $entityManager->persist($user);
                $entityManager->flush();
                
                // Store user in session for the category selection step
                $session->set('registered_user', $user->getId());
                
                $this->addFlash('success', 'Registration successful! Please select your interests.');
                return $this->redirectToRoute('app_category_selection');
            } else {
                // Collect all form errors
                $errors = [];
                foreach ($form->getErrors(true) as $error) {
                    $errors[] = $error->getMessage();
                }
                $this->addFlash('error', implode('<br>', $errors));
            }
        }

        return $this->render('auth/register.html.twig', [
            'registrationForm' => $form->createView(),
        ]);
    }
    
    #[Route('/category-selection', name: 'app_category_selection')]
    public function categorySelection(Request $request, EntityManagerInterface $entityManager, SessionInterface $session): Response
    {
        // Check if user just registered
        $userId = $session->get('registered_user');
        if (!$userId) {
            return $this->redirectToRoute('app_login');
        }
        
        $user = $entityManager->getRepository(Users::class)->find($userId);
        if (!$user) {
            $this->addFlash('error', 'User not found. Please register again.');
            return $this->redirectToRoute('app_login');
        }
        
        // Get all categories or create default ones if none exist
        $categories = $entityManager->getRepository(Category::class)->findAll();
        
        if (empty($categories)) {
            $this->createDefaultCategories($entityManager);
            $categories = $entityManager->getRepository(Category::class)->findAll();
        }
        
        if ($request->isMethod('POST')) {
            $selectedCategories = $request->request->all()['categories'] ?? [];
            
            if (!empty($selectedCategories)) {
                // First, remove any existing interests for this user
                $existingInterests = $entityManager->getRepository(UserIntrests::class)->findBy(['user_id' => $user]);
                foreach ($existingInterests as $interest) {
                    $entityManager->remove($interest);
                }
                
                // Add new selected categories
                foreach ($selectedCategories as $categoryId) {
                    $category = $entityManager->getRepository(Category::class)->find($categoryId);
                    if ($category) {
                        $userInterest = new UserIntrests();
                        $userInterest->setUserId($user);
                        $userInterest->setCategoryId($category);
                        $entityManager->persist($userInterest);
                    }
                }
                
                $entityManager->flush();
                
                // Clear the registration session variable
                $session->remove('registered_user');
                
                // Log the user in
                $session->set('user', $user);
                
                $this->addFlash('success', 'Thank you for selecting your interests!');
                return $this->redirectToRoute('app_dashboard'); // Redirect to dashboard instead of login
            } else {
                $this->addFlash('error', 'Please select at least one category.');
            }
        }
        
        return $this->render('auth/category_selection.html.twig', [
            'categories' => $categories,
        ]);
    }
    
    private function createDefaultCategories(EntityManagerInterface $entityManager): void
    {
        $defaultCategories = [
            'Sport' => 'ð',
            'Music' => 'ðµ',
            'Art' => 'ð¨',
            'Technology' => 'ð»',
            'Science' => 'ð¬',
            'Food' => 'ð',
            'Travel' => 'âï¸',
            'Fashion' => 'ð',
            'Books' => 'ð',
            'Gaming' => 'ð®',
            'Social' => 'ð¥',
            'Culture' => 'ð­',
            'Education' => 'ð'
        ];
        
        foreach ($defaultCategories as $name => $icon) {
            $category = new Category();
            $category->setName($name);
            
            // If your Category entity has an icon property, uncomment this:
            // $category->setIcon($icon);
            
            $entityManager->persist($category);
        }
        
        $entityManager->flush();
    }
    

}
</file>

<file path="Controller/auth/CategorySkipController.php">
<?php

namespace App\Controller\auth;

use Symfony\Bundle\FrameworkBundle\Controller\AbstractController;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\Routing\Annotation\Route;
use Symfony\Component\HttpFoundation\Session\SessionInterface;
use Doctrine\ORM\EntityManagerInterface;
use App\Entity\Users;

class CategorySkipController extends AbstractController
{
    #[Route('/category-selection/skip', name: 'app_category_selection_skip')]
    public function skip(SessionInterface $session, EntityManagerInterface $entityManager): Response
    {
        // Check if user just registered
        $userId = $session->get('registered_user');
        if (!$userId) {
            return $this->redirectToRoute('app_register');
        }
        
        $user = $entityManager->getRepository(Users::class)->find($userId);
        if (!$user) {
            $this->addFlash('error', 'User not found. Please register again.');
            return $this->redirectToRoute('app_register');
        }
        
        // Clear the registration session variable
        $session->remove('registered_user');
        
        // Log the user in
        $session->set('user', $user);
        
        $this->addFlash('info', 'You can select your interests later in your profile settings.');
        return $this->redirectToRoute('app_login'); 
    }
}
</file>

<file path="Controller/chatbot/ChatbotController.php">
<?php

namespace App\Controller\chatbot;

use League\CommonMark\CommonMarkConverter;
use Symfony\Bundle\FrameworkBundle\Controller\AbstractController;
use Symfony\Component\HttpFoundation\JsonResponse;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\HttpFoundation\StreamedResponse;
use Symfony\Component\Routing\Annotation\Route;
use Symfony\Contracts\HttpClient\HttpClientInterface;
use Psr\Log\LoggerInterface; // Pour le logging

class ChatbotController extends AbstractController
{
    private HttpClientInterface $client;
    private LoggerInterface $logger;
    private string $ollamaApiUrl;

    public function __construct(HttpClientInterface $client, LoggerInterface $logger, string $ollamaApiUrl)
    {
        $this->client = $client;
        $this->logger = $logger;
        $this->ollamaApiUrl = $ollamaApiUrl;
    }

    #[Route('/chatbot', name: 'app_chatbot', methods: ['GET'])]
    public function index(): Response
    {
        // Rend la page HTML principale du chatbot
        return $this->render('chatbot/chatbot.html.twig');
    }

    #[Route('/api/chatbot/ask', name: 'api_chatbot_ask', methods: ['POST'])]
    public function ask(Request $request): Response
    {
        // RÃ©cupÃ¨re la question de l'utilisateur depuis la requÃªte AJAX
        $data = json_decode($request->getContent(), true);
        $userInput = $data['prompt'] ?? null;

        // VÃ©rifie si la question est vide
        if (empty($userInput)) {
            return new JsonResponse(['error' => 'Prompt is required.'], Response::HTTP_BAD_REQUEST);
        }

        // PrÃ©pare le prompt complet avec les instructions pour le modÃ¨le
        $guidance = "Tu es le chatbot officiel de ConnectSphere, une application dÃ©diÃ©e Ã  l'organisation et la gestion d'Ã©vÃ©nements. Ta mission est d'aider les utilisateurs en leur prÃ©sentant clairement les fonctionnalitÃ©s de l'application et en rÃ©pondant Ã  leurs questions concernant l'organisation d'Ã©vÃ©nements. Tu dois :" .
                    "- Introduire les principales fonctionnalitÃ©s de ConnectSphere (consultation des Ã©vÃ¨nements, inscription aux Ã©vÃ©nements, recherche d'Ã©vÃ©nements, crÃ©ation d'Ã©vÃ©nements, gestion de profil, etc.)." .
                    "- Fournir des rÃ©ponses claires, prÃ©cises et amicales." .
                    "- Guider l'utilisateur pour trouver les informations dont il a besoin sur l'organisation des Ã©vÃ©nements (localisation, horaires, modalitÃ©s d'inscription, etc.)." .
                    "- Encourager l'utilisateur Ã  explorer l'application pour dÃ©couvrir tous les outils disponibles pour faciliter la participation aux Ã©vÃ©nements." .
                    "Reste toujours courtois et utile, et adapte tes rÃ©ponses selon les questions spÃ©cifiques posÃ©es par les utilisateurs, et n'oublie pas de donner des reponses trÃ¨s bref et prÃ©cises";
        $fullPrompt = $userInput . "\n\n" . $guidance; // Combine l'input utilisateur et les instructions

        // PrÃ©pare la requÃªte pour l'API Ollama
        $ollamaPayload = [
            'model' => 'llama3.2', // Utilise le modÃ¨le que vous avez ('llama3.2:latest' peut aussi marcher)
            'prompt' => $fullPrompt,
            'stream' => true // Demande une rÃ©ponse en streaming
        ];

        try {
            // ExÃ©cute la requÃªte HTTP vers Ollama
            $response = $this->client->request('POST', $this->ollamaApiUrl, [
                'json' => $ollamaPayload,
                'headers' => ['Accept' => 'application/x-ndjson'], // Attend du JSON dÃ©limitÃ© par des nouvelles lignes
                'timeout' => 120, // Augmente le timeout si nÃ©cessaire
            ]);

            // CrÃ©e une rÃ©ponse streamÃ©e pour renvoyer les donnÃ©es au fur et Ã  mesure au navigateur
            $streamedResponse = new StreamedResponse(function () use ($response) {
                // Initialise le convertisseur Markdown
                $markdownConverter = new CommonMarkConverter([
                    'html_input' => 'strip', // SÃ©curitÃ© : supprime les tags HTML non dÃ©sirÃ©s du Markdown
                    'allow_unsafe_links' => false, // SÃ©curitÃ© : dÃ©sactive les liens potentiellement dangereux
                ]);

                $markdownBuffer = ''; // Buffer pour accumuler les morceaux de Markdown

                try {
                    // ItÃ¨re sur les morceaux (chunks) reÃ§us de l'API Ollama
                    foreach ($this->client->stream($response) as $chunk) {
                        // GÃ¨re le cas oÃ¹ le chunk est un timeout
                        if ($chunk->isTimeout()) {
                            $this->logger->warning('Ollama stream timeout occurred.');
                            echo json_encode(['error' => 'Request timed out.'])."\n"; flush(); continue;
                        }

                        // VÃ©rifie si c'est le dernier chunk de la rÃ©ponse HTTP globale
                        $isLastHttpChunk = $chunk->isLast();

                        // RÃ©cupÃ¨re le contenu du chunk
                        $content = $chunk->getContent();
                        // SÃ©pare le contenu en lignes (Ollama envoie du NDJSON)
                        $lines = explode("\n", trim($content));

                        // Traite chaque ligne JSON reÃ§ue
                        foreach ($lines as $line) {
                            if (empty($line)) continue; // Ignore les lignes vides

                            // Tente de dÃ©coder la ligne JSON
                            $data = json_decode($line, true);
                            if (json_last_error() !== JSON_ERROR_NONE) {
                                $this->logger->error('JSON decode error: ' . json_last_error_msg() . ' for line: ' . $line);
                                continue; // Ignore la ligne malformÃ©e
                            }

                            // Si la ligne contient un morceau de rÃ©ponse Markdown
                            if (isset($data['response']) && !empty($data['response'])) {
                                // Ajoute le morceau Markdown au buffer
                                $markdownBuffer .= $data['response'];

                                // --- Logique d'envoi bufferisÃ© ---
                                // Envoie le HTML converti seulement si le buffer se termine
                                // par une nouvelle ligne (probable fin de paragraphe/bloc)
                                // OU si c'est la fin signalÃ©e par Ollama ('done' ou dernier chunk HTTP)
                                $ollamaDone = (isset($data['done']) && $data['done'] === true);
                                if (str_ends_with($markdownBuffer, "\n") || $ollamaDone || $isLastHttpChunk) {
                                    if (!empty($markdownBuffer)) {
                                        $this->logger->debug("Converting Markdown buffer (ends with newline or done): " . $markdownBuffer);
                                        $htmlToSend = $markdownConverter->convert($markdownBuffer)->getContent();
                                        // Envoie le bloc HTML converti
                                        echo json_encode(['html' => $htmlToSend]) . "\n";
                                        flush(); // Force l'envoi au navigateur
                                        // RÃ©initialise le buffer aprÃ¨s envoi
                                        $markdownBuffer = '';
                                    }
                                }
                                // --- Fin Logique d'envoi ---

                            // Si la ligne contient une erreur Ollama
                            } elseif (isset($data['error'])) {
                                $this->logger->error('Ollama API error received: ' . $data['error']);
                                // Envoie d'abord le contenu restant du buffer s'il y en a
                                if (!empty($markdownBuffer)) {
                                    $htmlToSend = $markdownConverter->convert($markdownBuffer)->getContent();
                                    echo json_encode(['html' => $htmlToSend]) . "\n";
                                    $markdownBuffer = '';
                                }
                                // Envoie ensuite l'erreur
                                echo json_encode(['error' => $data['error']]) . "\n";
                                flush();
                            }

                            // Si Ollama signale explicitement la fin ('done: true')
                            if (isset($data['done']) && $data['done'] === true) {
                                $this->logger->info('Ollama signaled done=true.');
                                // Assure l'envoi du dernier contenu du buffer
                                if (!empty($markdownBuffer)) {
                                    $htmlToSend = $markdownConverter->convert($markdownBuffer)->getContent();
                                    echo json_encode(['html' => $htmlToSend]) . "\n";
                                    $markdownBuffer = '';
                                }
                                // Envoie le signal 'done' au frontend
                                echo json_encode(['done' => true]) . "\n";
                                flush();
                                return; // ArrÃªte le traitement du stream cÃ´tÃ© serveur
                            }
                        } // Fin foreach line

                        // Si c'Ã©tait le dernier chunk HTTP et qu'il reste du contenu dans le buffer
                        // (Ollama n'a peut-Ãªtre pas envoyÃ© 'done: true' explicitement)
                        if ($isLastHttpChunk && !empty($markdownBuffer)) {
                            $this->logger->debug("Last HTTP chunk, sending final buffer: " . $markdownBuffer);
                            $htmlToSend = $markdownConverter->convert($markdownBuffer)->getContent();
                            echo json_encode(['html' => $htmlToSend]) . "\n";
                            // Envoie aussi un signal 'done' pour Ãªtre sÃ»r que le frontend termine
                            echo json_encode(['done' => true]) . "\n";
                            flush();
                        }

                    } // Fin foreach chunk HTTP stream
                } catch (\Symfony\Contracts\HttpClient\Exception\TransportExceptionInterface $e) {
                     $this->logger->error('Ollama stream transport error: '.$e->getMessage());
                     echo json_encode(['error' => 'Connection issue with chatbot service.'])."\n"; flush();
                } catch (\Throwable $e) { // Attrape toute autre erreur potentielle
                     $this->logger->error('Error during chatbot stream processing: '.$e->getMessage());
                     echo json_encode(['error' => 'Internal error processing response.'])."\n"; flush();
                }
            });

            // DÃ©finit les en-tÃªtes pour la rÃ©ponse streamÃ©e
            $streamedResponse->headers->set('Content-Type', 'application/x-ndjson');
            $streamedResponse->headers->set('X-Accel-Buffering', 'no'); // Important pour Nginx/proxies
            return $streamedResponse;

        // GÃ¨re les erreurs de connexion initiale Ã  Ollama
        } catch (\Symfony\Contracts\HttpClient\Exception\TransportExceptionInterface $e) {
            $this->logger->error('Ollama request transport error (initial connection): '.$e->getMessage());
            return new JsonResponse(['error' => 'Could not connect to the chatbot service.'], Response::HTTP_SERVICE_UNAVAILABLE);
        // GÃ¨re d'autres erreurs lors de la prÃ©paration de la requÃªte
        } catch (\Throwable $e) {
             $this->logger->error('Ollama request preparation error: '.$e->getMessage());
            return new JsonResponse(['error' => 'Error communicating with the chatbot service.'], Response::HTTP_INTERNAL_SERVER_ERROR);
        }
    }
}
</file>

<file path="Controller/create_job/CreateJobController.php">
<?php

namespace App\Controller\create_job;

use App\Entity\Jobs;
use App\Form\CreateJobFormType;
use Doctrine\ORM\EntityManagerInterface;
use Symfony\Bundle\FrameworkBundle\Controller\AbstractController;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\Routing\Annotation\Route;
use Symfony\Component\HttpFoundation\Session\SessionInterface;
use App\Entity\Users;

// class CreateJobController extends AbstractController
// {
//     #[Route('/create/job', name: 'app_create_job')]
//     public function index(Request $request, EntityManagerInterface $entityManager): Response
//     {
//         $job = new Jobs();
//         $form = $this->createForm(CreateJobFormType::class, $job);

//         $form->handleRequest($request);

//         if ($form->isSubmitted() && $form->isValid()) {
//             $user = $this->getUser(); // currently authenticated user
//             if (!$user) {
//                 throw $this->createAccessDeniedException('You must be logged in.');
//             }
//             $job->setUserId($user instanceof \App\Entity\Users ? $user : null); // set the user who created the job
            
//             $entityManager->persist($job);
//             $entityManager->flush();

//             // You can redirect to a success page or back to the form
//             return $this->redirectToRoute('app-root');
//         }

//         return $this->render('create_job/root.html.twig', [
//             'form' => $form->createView(),
//         ]);
//     }
// }



class CreateJobController extends AbstractController
{
    #[Route('/create/job', name: 'app_create_job')]
    public function index(Request $request, EntityManagerInterface $entityManager): Response
    {
        // Get user ID from session
        $session = $request->getSession();
        $userSession = $session->get('user');

        if (!$userSession) {
            // If user is not in session, redirect or throw an error
            return $this->redirectToRoute('app_login'); // or return new Response('Unauthorized', 401);
        }

        // Fetch user entity from the database
        $user = $entityManager->getRepository(Users::class)->find($userSession->getId());

        if (!$user) {
            throw $this->createNotFoundException('User not found');
        }

        $job = new Jobs();
        $form = $this->createForm(CreateJobFormType::class, $job);

        $form->handleRequest($request);

        if ($form->isSubmitted() && $form->isValid()) {
            // Set the current user as the job's owner
            $job->setUserId($user);

            $entityManager->persist($job);
            $entityManager->flush();

            // Optionally redirect or show success
            return $this->redirectToRoute('app_create_job');
        }

        return $this->render('create_job/createjob.html.twig', [
            'form' => $form->createView(),
        ]);
    }
}
</file>

<file path="Controller/DashboardController.php">
<?php
namespace App\Controller;

use Symfony\Bundle\FrameworkBundle\Controller\AbstractController;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\Routing\Annotation\Route;
use Symfony\Component\HttpFoundation\Session\SessionInterface;

class DashboardController extends AbstractController
{
    #[Route('/dashboard', name: 'app_dashboard')]
    public function index(SessionInterface $session): Response
    {
        // Check if user is logged in
        if (!$session->get('user')) {
            return $this->redirectToRoute('app_login');
        }
        
        return $this->render('dashboard/indexx.html.twig');
    }
}
</file>

<file path="Controller/events/EventsController.php">
<?php
// src/Controller/events/EventsController.php

namespace App\Controller\events;

use App\Entity\Events;
use App\Entity\Users;
use App\Form\EventsType; // Assuming you have this for event creation
use App\Repository\EventsRepository;
use App\Repository\CategoryRepository;
use App\Repository\ParticipationRepository; // For ORM check
// OR use Doctrine\DBAL\Connection; // If you prefer DBAL check for participation
use Doctrine\ORM\EntityManagerInterface;
use Symfony\Bundle\FrameworkBundle\Controller\AbstractController;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\HttpFoundation\File\UploadedFile; // For event creation
use Symfony\Component\Routing\Annotation\Route;
use Psr\Log\LoggerInterface;
use Symfony\Component\HttpFoundation\Session\SessionInterface; // For getting current user

class EventsController extends AbstractController
{
    private LoggerInterface $logger;
    private ParticipationRepository $participationRepository; // Injected for ORM check
    // private Connection $connection; // Uncomment and inject if using DBAL check

    public function __construct(
        LoggerInterface $logger,
        ParticipationRepository $participationRepository // Inject
        // Connection $connection // Uncomment if using DBAL
    ) {
        $this->logger = $logger;
        $this->participationRepository = $participationRepository;
        // $this->connection = $connection; // Uncomment if using DBAL
    }

    #[Route('/events', name: 'app_events', methods: ['GET'])]
    public function index(
        Request $request,
        EventsRepository $eventsRepository,
        CategoryRepository $categoryRepository,
        SessionInterface $session // Inject SessionInterface
    ): Response {
        /** @var Users|null $currentUser */
        $currentUser = $session->get('user');
        
        $excludeOrganizerId = null;
        $currentUserId = null; // To store the ID for checking participation
        if ($currentUser instanceof Users) {
            $excludeOrganizerId = $currentUser->getId();
            $currentUserId = $currentUser->getId();
        }

        // Get filters from URL
        $searchTerm = $request->query->get('search');
        $categoryIdParam = $request->query->get('category');
        $categoryId = null;
        if (!empty($categoryIdParam) && ctype_digit((string)$categoryIdParam)) {
            $categoryId = (int)$categoryIdParam;
        }

        $eventsWithStatus = []; // Array to hold event entities and their participation status
        $categories = [];
        try {
            $eventsList = $eventsRepository->findByNameDescriptionCategory($searchTerm, $categoryId, $excludeOrganizerId);
            $categories = $categoryRepository->findBy([], ['name' => 'ASC']);

            // For each event, check if the current user has participated
            foreach ($eventsList as $event) {
                $hasJoined = false;
                if ($currentUserId) {
                    // Option A: Using ORM (recommended if Participation entity is correctly mapped)
                    $participation = $this->participationRepository->findOneBy([
                        'participant' => $currentUserId, // Assumes 'participant' property in Participation entity links to User ID
                        'event' => $event->getId()      // Assumes 'event' property in Participation entity links to Event ID
                    ]);
                    if ($participation) {
                        $hasJoined = true;
                    }

                    // Option B: Using DBAL (if your Participation entity is not fully ORM-mapped for this query)
                    /*
                    $sql = "SELECT COUNT(*) FROM participation WHERE event_id = :eventId AND participant_id = :userId";
                    $stmt = $this->connection->prepare($sql);
                    $result = $stmt->executeQuery(['eventId' => $event->getId(), 'userId' => $currentUserId]);
                    if ($result->fetchOne() > 0) {
                        $hasJoined = true;
                    }
                    */
                }
                $eventsWithStatus[] = [
                    'entity' => $event,
                    'hasJoined' => $hasJoined
                ];
            }

        } catch (\Exception $e) {
            $this->logger->error('Error fetching events, categories, or participation status: ' . $e->getMessage(), ['exception' => $e]);
            $this->addFlash('error', 'An error occurred while retrieving event data.');
        }

        return $this->render('events/events.html.twig', [
            'eventsWithStatus' => $eventsWithStatus, // Pass the enriched array to Twig
            'categories' => $categories,
        ]);
    }

    #[Route('/events/add', name: 'app_event_add_page', methods: ['GET'])]
    public function addEventPage(Request $request): Response
    {
        $session = $request->getSession();
        $currentUser = $session->get('user');
        
        if (!$currentUser instanceof Users) {
            $this->addFlash('error', 'You must be logged in to create events.');
            return $this->redirectToRoute('app_login');
        }

        $event = new Events();
        $form = $this->createForm(EventsType::class, $event, [
             'action' => $this->generateUrl('app_event_new'),
             'method' => 'POST',
        ]);

        return $this->render('events/add_event.html.twig', [
            'create_event_form' => $form->createView(),
        ]);
    }

    #[Route('/events/new', name: 'app_event_new', methods: ['POST'])]
    public function new(Request $request, EntityManagerInterface $em, SessionInterface $session): Response // Added SessionInterface
    {
        // $session = $request->getSession(); // Already injected
        $currentUser = $session->get('user');
        
        if (!$currentUser instanceof Users) {
            $this->addFlash('error', 'You must be logged in to create events.');
            return $this->redirectToRoute('app_login');
        }

        $event = new Events();
        $form = $this->createForm(EventsType::class, $event);
        $form->handleRequest($request);

        if ($form->isSubmitted()) {
            if ($form->isValid()) {
                try {
                    if (!$currentUser->getId()) {
                        throw new \Exception('Invalid user ID in session for event creation.');
                    }
                    $userReference = $em->getReference(Users::class, $currentUser->getId());
                    $event->setOrganizerId($userReference);

                    $startTime = $form->get('startTime')->getData();
                    $endTime = $form->get('endTime')->getData();
                    if ($startTime instanceof \DateTimeInterface && $endTime instanceof \DateTimeInterface) {
                        $event->setStartTime($startTime->format('Y-m-d H:i:s'));
                        $event->setEndTime($endTime->format('Y-m-d H:i:s'));
                    } else {
                        // Handle error or set default if dates are not DateTimeInterface (should be due to form type)
                        $this->logger->error('Invalid date format received from event form.');
                        $this->addFlash('error', 'Invalid date format submitted.');
                        // Re-render form or throw exception
                         return $this->render('events/add_event.html.twig', [
                            'create_event_form' => $form->createView(),
                        ]);
                    }


                    /** @var UploadedFile|null $imageFile */
                    $imageFile = $form->get('image')->getData();
                    if ($imageFile instanceof UploadedFile && $imageFile->isValid()) {
                        $event->setImage(base64_encode(file_get_contents($imageFile->getPathname())));
                    } else {
                        $event->setImage(''); // Or handle as error if image is required
                    }

                    if ($event->getPoints() === null) { // Check for null explicitly
                        $event->setPoints(0);
                    }

                    $em->persist($event);
                    $em->flush();

                    $this->addFlash('success', 'Event created successfully!');
                    return $this->redirectToRoute('app_events');

                } catch (\Exception $e) {
                    $this->logger->error('Event creation failed: ' . $e->getMessage(), ['exception' => $e]);
                    $this->addFlash('error', 'Error creating event: ' . $e->getMessage());
                }
            } else {
                foreach ($form->getErrors(true) as $error) {
                    $this->addFlash('error', $error->getMessage());
                }
            }
        }

        return $this->render('events/add_event.html.twig', [
        'create_event_form' => $form->createView(),
    ]);
}
}
</file>

<file path="Controller/explore/ExploreController.php">
<?php

namespace App\Controller\explore;

use Symfony\Bundle\FrameworkBundle\Controller\AbstractController;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\Routing\Annotation\Route;

class ExploreController extends AbstractController
{
    #[Route('/explore', name: 'app_explore')]
    public function index(): Response
    {
        return $this->render('explore/explore.html.twig', [
            'controller_name' => 'ExploreController',
        ]);
    }
}
</file>

<file path="Controller/group/GroupController.php">
<?php

namespace App\Controller\group;

use Symfony\Bundle\FrameworkBundle\Controller\AbstractController;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\Routing\Annotation\Route;
use Symfony\Component\HttpFoundation\Request;
use Doctrine\ORM\EntityManagerInterface;
use App\Entity\UserGroups;
use App\Entity\GroupMembers;
use App\Entity\Users;
use Symfony\Component\HttpFoundation\Session\SessionInterface;
use Symfony\Component\HttpFoundation\File\UploadedFile;

class GroupController extends AbstractController
{
    #[Route('/groups', name: 'app_groups')]
    public function index(SessionInterface $session, EntityManagerInterface $entityManager): Response
    {
        // Check if user is logged in
        $user = $session->get('user');
        if (!$user) {
            return $this->redirectToRoute('app_login');
        }
    
        // Get all groups
        $groups = $entityManager->getRepository(UserGroups::class)->findAll();
        
        // Get groups where user is a member (not necessarily creator)
        $userMemberships = $entityManager->getRepository(GroupMembers::class)->findBy(['user_id' => $user]);
        
        // Create an array of group IDs where the user is a member for easy lookup
        $userGroups = [];
        foreach ($userMemberships as $membership) {
            $userGroups[$membership->getGroupIt()->getId()] = $membership;
        }
    
        return $this->render('group/index.html.twig', [
            'groups' => $groups,
            'userGroups' => $userGroups,
            'currentUser' => $user
        ]);
    }

    #[Route('/group/{groupId}/invite', name: 'app_group_invite')]
public function invite(
    Request $request,
    EntityManagerInterface $entityManager,
    SessionInterface $session,
    int $groupId
): Response {
    $user = $session->get('user');
    if (!$user) {
        return $this->redirectToRoute('app_login');
    }

    $group = $entityManager->getRepository(UserGroups::class)->find($groupId);
    if (!$group) {
        throw $this->createNotFoundException('Group not found');
    }

    // Check if current user can invite (creator or member)
    $isMember = $entityManager->getRepository(GroupMembers::class)->findOneBy([
        'group_it' => $group,
        'user_id' => $user
    ]);

    if (!$isMember && $group->getCreatorId()->getId() !== $user->getId()) {
        $this->addFlash('error', 'You need to be a member to invite friends');
        return $this->redirectToRoute('app_group_view', ['id' => $groupId]);
    }

    $searchTerm = $request->query->get('search');
    $nonMembers = [];

    if ($searchTerm) {
        // Get all users who are not members
        $qb = $entityManager->createQueryBuilder();
        $nonMembers = $qb->select('u')
            ->from(Users::class, 'u')
            ->where($qb->expr()->like('u.username', ':search'))
            ->andWhere($qb->expr()->notIn(
                'u.id',
                $entityManager->createQueryBuilder()
                    ->select('IDENTITY(gm.user_id)')
                    ->from(GroupMembers::class, 'gm')
                    ->where('gm.group_it = :group')
                    ->getDQL()
            ))
            ->setParameter('search', '%'.$searchTerm.'%')
            ->setParameter('group', $group)
            ->getQuery()
            ->getResult();
    }

    // Get all members for the view
    $members = $entityManager->getRepository(GroupMembers::class)->findBy(['group_it' => $group]);
    $isMember = $entityManager->getRepository(GroupMembers::class)->findOneBy([
        'group_it' => $group,
        'user_id' => $user
    ]);

    return $this->render('group/view.html.twig', [
        'group' => $group,
        'members' => $members,
        'isMember' => $isMember,
        'currentUser' => $user,
        'nonMembers' => $nonMembers
    ]);
}

 #[Route('/group/create', name: 'app_group_create')]
    public function create(Request $request, EntityManagerInterface $entityManager, SessionInterface $session): Response
    {
        $user = $session->get('user');
        if (!$user) {
            return $this->redirectToRoute('app_login');
        }

        if ($request->isMethod('POST')) {
            $group = new UserGroups();
            $group->setName($request->request->get('name'));
            $group->setDescription($request->request->get('description'));
            $group->setRules($request->request->get('rules'));
            $group->setCreatedAt(date('Y-m-d H:i:s'));

        // Handle image as base64
// Handle image as base64 (.jpg)
$uploadedFile = $request->files->get('profile_picture');
if ($uploadedFile instanceof UploadedFile && $uploadedFile->isValid()) {
    $base64Image = base64_encode(file_get_contents($uploadedFile->getPathname()));
    $group->setProfilePicture($base64Image);
} else {
    $group->setProfilePicture(''); // Default empty if no image
}

            // RÃ©cupÃ©ration de l'utilisateur depuis la base
            $user = $entityManager->getRepository(Users::class)->find($user->getId());
            $group->setCreatorId($user);

            // Sauvegarder le groupe
            $entityManager->persist($group);
            $entityManager->flush();

            // Ajouter le crÃ©ateur comme membre admin
            $member = new GroupMembers();
            $member->setGroupIt($group);
            $member->setUserId($user);
            $member->setRole('admin');
            $member->setStatus('pending');

            $entityManager->persist($member);
            $entityManager->flush();

            $this->addFlash('success', 'Group created successfully!');
            return $this->redirectToRoute('app_groups');
        }

        return $this->render('group/create.html.twig');
    }

    #[Route('/group/{id}/edit', name: 'app_group_edit')]
    public function edit(Request $request, EntityManagerInterface $entityManager, SessionInterface $session, int $id): Response
    {
        $user = $session->get('user');
        if (!$user) {
            return $this->redirectToRoute('app_login');
        }

        $group = $entityManager->getRepository(UserGroups::class)->find($id);
        if (!$group) {
            throw $this->createNotFoundException('Groupe non trouvÃ©');
        }

        // VÃ©rifier si l'utilisateur est le crÃ©ateur du groupe
        if ($group->getCreatorId()->getId() !== $user->getId()) {
            $this->addFlash('error', 'Vous n\'avez pas les droits pour modifier ce groupe');
            return $this->redirectToRoute('app_groups');
        }

        if ($request->isMethod('POST')) {
            $group->setName($request->request->get('name'));
            $group->setDescription($request->request->get('description'));
            $group->setRules($request->request->get('rules'));
            $group->setProfilePicture($request->request->get('profile_picture') ??  $group->getProfilePicture());

            $entityManager->flush();

            $this->addFlash('success', 'Groupe mis Ã  jour avec succÃ¨s!');
            return $this->redirectToRoute('app_groups');
        }

        return $this->render('group/edit.html.twig', [
            'group' => $group
        ]);
    }

    #[Route('/group/{id}/delete', name: 'app_group_delete')]
    public function delete(EntityManagerInterface $entityManager, SessionInterface $session, int $id): Response
    {
        $user = $session->get('user');
        if (!$user) {
            return $this->redirectToRoute('app_login');
        }

        $group = $entityManager->getRepository(UserGroups::class)->find($id);
        if (!$group) {
            throw $this->createNotFoundException('Groupe non trouvÃ©');
        }

        // VÃ©rifier si l'utilisateur est le crÃ©ateur du groupe
        if ($group->getCreatorId()->getId() !== $user->getId()) {
            $this->addFlash('error', 'Vous n\'avez pas les droits pour supprimer ce groupe');
            return $this->redirectToRoute('app_groups');
        }

        // Supprimer d'abord tous les membres du groupe
        $members = $entityManager->getRepository(GroupMembers::class)->findBy(['group_it' => $group]);
        foreach ($members as $member) {
            $entityManager->remove($member);
        }

        $entityManager->remove($group);
        $entityManager->flush();

        $this->addFlash('success', 'Groupe supprimÃ© avec succÃ¨s!');
        return $this->redirectToRoute('app_groups');
    }

    #[Route('/group/{id}/view', name: 'app_group_view')]
    public function view(EntityManagerInterface $entityManager, SessionInterface $session, int $id): Response
    {
        $user = $session->get('user');
        if (!$user) {
            return $this->redirectToRoute('app_login');
        }

        $group = $entityManager->getRepository(UserGroups::class)->find($id);
        if (!$group) {
            throw $this->createNotFoundException('Groupe non trouvÃ©');
        }

        // VÃ©rifier si l'utilisateur est membre du groupe
        $isMember = $entityManager->getRepository(GroupMembers::class)->findOneBy([
            'group_it' => $group,
            'user_id' => $user
        ]);

        // RÃ©cupÃ©rer tous les membres du groupe
        $members = $entityManager->getRepository(GroupMembers::class)->findBy(['group_it' => $group]);

        return $this->render('group/view.html.twig', [
            'group' => $group,
            'members' => $members,
            'isMember' => $isMember,
            'currentUser' => $user
        ]);
    }

    #[Route('/group/{id}/join', name: 'app_group_join')]
    public function join(EntityManagerInterface $entityManager, SessionInterface $session, int $id): Response
    {
        $user = $session->get('user');
        if (!$user) {
            return $this->redirectToRoute('app_login');
        }
    
        // Get the managed user entity
        $managedUser = $entityManager->getRepository(Users::class)->find($user->getId());
        if (!$managedUser) {
            throw $this->createNotFoundException('User not found');
        }
    
        $group = $entityManager->getRepository(UserGroups::class)->find($id);
        if (!$group) {
            throw $this->createNotFoundException('Group not found');
        }
    
        // Check if user is already a member
        $existingMember = $entityManager->getRepository(GroupMembers::class)->findOneBy([
            'group_it' => $group,
            'user_id' => $managedUser
        ]);
    
        if ($existingMember) {
            $this->addFlash('warning', 'You are already a member of this group');
            return $this->redirectToRoute('app_group_view', ['id' => $id]);
        }
    
        // Add user as group member
        $member = new GroupMembers();
        $member->setGroupIt($group);
        $member->setUserId($managedUser); // Use the managed user entity
        $member->setRole('member');
        $member->setStatus('pending'); 
    
        $entityManager->persist($member);
        $entityManager->flush();
    
        $this->addFlash('success', 'You have successfully joined the group!');
        return $this->redirectToRoute('app_group_view', ['id' => $id]);
    }

    #[Route('/group/{id}/leave', name: 'app_group_leave')]
    public function leave(EntityManagerInterface $entityManager, SessionInterface $session, int $id): Response
    {
        // Get user from session
        $user = $session->get('user');
        if (!$user) {
            return $this->redirectToRoute('app_login');
        }
    
        // Get the managed user entity
        $managedUser = $entityManager->getRepository(Users::class)->find($user->getId());
        if (!$managedUser) {
            throw $this->createNotFoundException('User not found');
        }
    
        // Get the group
        $group = $entityManager->getRepository(UserGroups::class)->find($id);
        if (!$group) {
            throw $this->createNotFoundException('Group not found');
        }
    
        // Verify if user is the group creator
        if ($group->getCreatorId()->getId() === $managedUser->getId()) {
            $this->addFlash('error', 'The group creator cannot leave the group');
            return $this->redirectToRoute('app_group_view', ['id' => $id]);
        }
    
        // Find the membership record
        $member = $entityManager->getRepository(GroupMembers::class)->findOneBy([
            'group_it' => $group,
            'user_id' => $managedUser  // Use the managed user entity
        ]);
    
        if (!$member) {
            $this->addFlash('error', 'You are not a member of this group');
            return $this->redirectToRoute('app_group_view', ['id' => $id]);
        }
    
        // Remove the membership
        $entityManager->remove($member);
        $entityManager->flush();
    
        $this->addFlash('success', 'You have successfully left the group');
        return $this->redirectToRoute('app_groups');
    }

    #[Route('/group/{groupId}/add-member/{userId}', name: 'app_group_add_member')]
    public function addMember(
        EntityManagerInterface $entityManager,
        SessionInterface $session,
        int $groupId,
        int $userId
    ): Response {
        $currentUser = $session->get('user');
        if (!$currentUser) {
            return $this->redirectToRoute('app_login');
        }
    
        $group = $entityManager->getRepository(UserGroups::class)->find($groupId);
        if (!$group) {
            throw $this->createNotFoundException('Group not found');
        }
    
        // Check if current user can invite (creator or member)
        $isMember = $entityManager->getRepository(GroupMembers::class)->findOneBy([
            'group_it' => $group,
            'user_id' => $currentUser
        ]);
    
        if (!$isMember && $group->getCreatorId()->getId() !== $currentUser->getId()) {
            $this->addFlash('error', 'You need to be a member to invite friends');
            return $this->redirectToRoute('app_group_view', ['id' => $groupId]);
        }
    
        $userToAdd = $entityManager->getRepository(Users::class)->find($userId);
        if (!$userToAdd) {
            throw $this->createNotFoundException('User not found');
        }
    
        // Check if user is already a member
        $existingMember = $entityManager->getRepository(GroupMembers::class)->findOneBy([
            'group_it' => $group,
            'user_id' => $userToAdd
        ]);
    
        if ($existingMember) {
            $this->addFlash('warning', 'This user is already a member of the group');
            return $this->redirectToRoute('app_group_view', ['id' => $groupId]);
        }
    
        // Add user as group member
        $member = new GroupMembers();
        $member->setGroupIt($group);
        $member->setUserId($userToAdd);
        $member->setRole('member');
        $member->setStatus('pending'); 
    
        $entityManager->persist($member);
        $entityManager->flush();
    
        $this->addFlash('success', 'User successfully invited to the group!');
        return $this->redirectToRoute('app_group_view', ['id' => $groupId]);
    }
}
</file>

<file path="Controller/home/HomeController.php">
<?php
// src/Controller/HomeController.php

namespace App\Controller\home; // Gardez le mÃªme namespace ou crÃ©ez-en un nouveau (ex: App\Controller\Main)

use App\Repository\EventsRepository;
use Symfony\Bundle\FrameworkBundle\Controller\AbstractController;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\Routing\Annotation\Route;
use Psr\Log\LoggerInterface;

class HomeController extends AbstractController
{
    private LoggerInterface $logger;

    public function __construct(LoggerInterface $logger)
    {
        $this->logger = $logger;
    }

    // --- NOUVELLE ROUTE pour la page d'accueil post-login ---
    #[Route('/home', name: 'app_home', methods: ['GET'])]
    public function index(EventsRepository $eventsRepository): Response
    {
        $this->logger->info('Home Page: Request received.');
        $eventsJsonForMap = '[]'; // JSON par dÃ©faut

        try {
            // 1. RÃ©cupÃ©rer les Ã©vÃ©nements (pour la carte)
            $allEvents = $eventsRepository->findBy([], ['startTime' => 'DESC'], 50);

            // 2. PrÃ©parer les donnÃ©es JSON pour la carte
            $eventsDataForMap = [];
            foreach ($allEvents as $event) {
                $locationText = $event->getLocation();
                if (!empty($locationText)) {
                    $eventsDataForMap[] = [ /* ... donnÃ©es pour la carte ... */
                        'id' => $event->getId(), 'name' => $event->getName() ?? '?',
                        'description' => $event->getDescription() ?? '', 'location' => $locationText,
                        'start_time' => $event->getStartTime() ? date('d/m/Y H:i', strtotime($event->getStartTime())) : 'N/A',
                        'category' => $event->getCategoryId() ? $event->getCategoryId()->getName() : 'N/A',
                    ];
                }
            }
            $this->logger->info(sprintf('Home Page: Prepared %d events for map JSON.', count($eventsDataForMap)));

            // 3. Encoder en JSON
            $_eventsJson = json_encode($eventsDataForMap);
            if ($_eventsJson !== false) { $eventsJsonForMap = $_eventsJson; }
            else { $this->logger->error('Home Page: JSON encoding failed.'); }

        } catch (\Exception $e) {
            $this->logger->error('Home Page: Error loading data.', ['exception' => $e]);
            $this->addFlash('error', 'Could not load map data.');
            $eventsJsonForMap = '[]';
        }

        // 4. Rendre un NOUVEAU template dÃ©diÃ© pour cette page
        return $this->render('home/home.html.twig', [ // Nom de template suggÃ©rÃ©
            'eventsJsonForMap' => $eventsJsonForMap,
]);

    }
}
</file>

<file path="Controller/jobapplications/JobApplicationsController.php">
<?php
// src/Controller/jobapplications/JobApplicationsController.php

namespace App\Controller\jobapplications;

use App\Repository\ApplicationsRepository;
use Doctrine\ORM\EntityManagerInterface;
use Symfony\Bundle\FrameworkBundle\Controller\AbstractController;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\Routing\Annotation\Route;

class JobApplicationsController extends AbstractController
{
    #[Route('/job/applications', name: 'app_job_applications')]
    public function index(ApplicationsRepository $applicationsRepository): Response
    {
        $applications = $applicationsRepository->findAllApplications();

        return $this->render('jobapplications/jobapplications.html.twig', [
            'applications' => $applications,
        ]);
    }
}
</file>

<file path="Controller/jobfeed/JobFeedController.php">
<?php
namespace App\Controller\jobfeed;

use App\Entity\Users;
use App\Entity\Applications;
use App\Entity\Jobs;
use App\Repository\JobsRepository;
use App\Repository\ApplicationsRepository;
use Doctrine\ORM\EntityManagerInterface;
use Symfony\Bundle\FrameworkBundle\Controller\AbstractController;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\Routing\Annotation\Route;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpFoundation\Session\SessionInterface;
use Symfony\Component\HttpFoundation\File\UploadedFile;

class JobFeedController extends AbstractController
{
    #[Route('/job/feed', name: 'app_job_feed')]
    public function index(SessionInterface $session, JobsRepository $jobsRepository): Response
    {
        $currentUser = $session->get('user');
        $jobs = $jobsRepository->findAllExceptUser($currentUser);

        return $this->render('jobfeed/jobfeed.html.twig', [
            'jobs' => $jobs,
            'user' => $currentUser,
        ]);
    }

    #[Route('/apply/{jobId}', name: 'apply_job', methods: ['POST'])]
    public function apply(
        int $jobId,
        Request $request,
        EntityManagerInterface $em
    ): Response {
        // Get currently logged-in user
        /** @var Users $user */
        $user = $this->getUser();
        // if (!$user) {
        //     return new Response('User not logged in.', 403);
        // }

        // Find the job
        $job = $em->getRepository(Jobs::class)->find($jobId);
        if (!$job) {
            return new Response('Job not found.', 404);
        }

        // Get form data (adjust field names based on your form)
        $coverLetter = $request->request->get('cover_letter');
        $resumePath = $request->files->get('resume');

        // Handle file upload
        if ($resumePath) {
            $originalFilename = pathinfo($resumePath->getClientOriginalName(), PATHINFO_FILENAME);
            $newFilename = uniqid() . '-' . $originalFilename . '.' . $resumePath->guessExtension();

            $resumePath->move(
                $this->getParameter('uploads_directory'), // define this in services.yaml or .env
                $newFilename
            );
        } else {
            $newFilename = 'default.pdf'; // fallback or return error
        }

        // Create and save the application
        $application = new Applications();
        $application->setUserId($user);
        $application->setJobId($job);
        $application->setCoverLetter($coverLetter);
        $application->setResumePath($newFilename);
        $application->setStatus('pending');
        $application->setAppliedAt(new \DateTime());

        $em->persist($application);
        $em->flush();

        return new Response('Application submitted successfully.');
    }
}
</file>

<file path="Controller/messagerie/DiscussionController.php">
<?php
// src/Controller/messagerie/DiscussionController.php

namespace App\Controller\messagerie;

use App\Entity\Users;
use App\Repository\UsersRepository;
use Symfony\Bundle\FrameworkBundle\Controller\AbstractController;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\Routing\Annotation\Route;

class DiscussionController extends AbstractController
{
    #[Route('/discussion', name: 'app_discussion')]
    public function index(UsersRepository $userRepository): Response
    {
        $currentUser = $this->getUser();
        $currentUserId = null;

        if ($currentUser instanceof Users) {
            $currentUserId = $currentUser->getId();
        }

        $qb = $userRepository->createQueryBuilder('u');

        // If there is a logged in user, exclude them from list
        if ($currentUserId !== null) {
            $qb->where('u.id != :currentUserId')
               ->setParameter('currentUserId', $currentUserId);
        }

        $users = $qb->getQuery()->getResult();

        return $this->render('messagerie/message/index.html.twig', [
            'users' => $users,
            'currentUserId' => $currentUserId,
        ]);
    }
}
</file>

<file path="Controller/messagerie/MessageController.php">
<?php
// src/Controller/MessageController.php

namespace App\Controller\messagerie;
use App\Entity\Users;
use App\Entity\Message;
use Doctrine\ORM\EntityManagerInterface;
use Symfony\Bundle\FrameworkBundle\Controller\AbstractController;
use Symfony\Component\HttpFoundation\JsonResponse;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\Routing\Annotation\Route;

class MessageController extends AbstractController
{
    #[Route('/api/message/save', name: 'api_message_save', methods: ['POST'])]
    public function save(Request $request, EntityManagerInterface $em): JsonResponse
    {
        $data = json_decode($request->getContent(), true);
    
        /** @var Users $sender */
        $sender = $this->getUser(); // RÃ©cupÃ¨re l'utilisateur connectÃ©
    
        if (!$sender) {
            return new JsonResponse(['error' => 'Unauthorized'], 401);
        }
    
        $receiver = $em->getRepository(\App\Entity\Users::class)->find($data['to']);
        if (!$receiver) {
            return new JsonResponse(['error' => 'Receiver not found'], 400);
        }
    
        $message = new \App\Entity\Message();
        $message->setSender($sender);
        $message->setReceiver($receiver);
        $message->setMessage($data['message']);
        $message->setCreatedAt(new \DateTimeImmutable());
    
        $em->persist($message);
        $em->flush();
    
        return new JsonResponse(['status' => 'saved']);
    }
    
    

    #[Route('/api/message/history/{userId}', name: 'api_message_history')]
public function history(int $userId, EntityManagerInterface $em): JsonResponse
{
/** @var Users $user */
$user = $this->getUser();
    if (!$user instanceof Users) {
        return $this->json(['error' => 'Unauthorized'], 401);
    }

    $otherUser = $em->getRepository(Users::class)->find($userId);
    if (!$otherUser) {
        return $this->json(['error' => 'User not found'], 404);
    }

    $messages = $em->getRepository(Message::class)->createQueryBuilder('m')
        ->where('(m.sender = :me AND m.receiver = :them) OR (m.sender = :them AND m.receiver = :me)')
        ->setParameter('me', $user)
        ->setParameter('them', $otherUser)
        ->orderBy('m.createdAt', 'ASC')
        ->getQuery()
        ->getArrayResult();

    return $this->json($messages);
}

}
</file>

<file path="Controller/organizer/EditEventController.php">
<?php

namespace App\Controller\organizer;

use Symfony\Bundle\FrameworkBundle\Controller\AbstractController;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\Routing\Annotation\Route;

class EditEventController extends AbstractController
{
    #[Route('/edit/event', name: 'app_edit_event')]
    public function index(): Response
    {
        return $this->render('edit_event/editevent.html.twig', [
            'controller_name' => 'EditEventController',
        ]);
    }
}
</file>

<file path="Controller/organizer/EditJobController.php">
<?php

namespace App\Controller\organizer;

use Symfony\Bundle\FrameworkBundle\Controller\AbstractController;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\Routing\Annotation\Route;

class EditJobController extends AbstractController
{
    #[Route('/edit/job', name: 'app_edit_job')]
    public function index(): Response
    {
        return $this->render('edit_job/editjob.html.twig', [
            'controller_name' => 'EditJobController',
        ]);
    }
}
</file>

<file path="Controller/organizer/OrganizerController.php">
<?php

namespace App\Controller\organizer;


use App\Repository\JobsRepository;
use App\Repository\EventsRepository;
use App\Repository\UsersRepository;
use App\Repository\ApplicationsRepository;
use App\Repository\ParticipationRepository;
use Symfony\Bundle\FrameworkBundle\Controller\AbstractController;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\Routing\Annotation\Route;
use Symfony\Component\HttpFoundation\Session\SessionInterface;
use Symfony\Component\HttpFoundation\Request;
use Doctrine\ORM\EntityManagerInterface;
use App\Form\EditJobsType;
use App\Form\EditEventType;
use App\Entity\Jobs;
use App\Entity\Events;


class OrganizerController extends AbstractController
{
    public function __construct(
        private JobsRepository $jobsRepository,
        private EventsRepository $eventsRepository,
        private UsersRepository $usersRepository ,
         private ParticipationRepository $participationRepository
    ) {}

    #[Route('/organizer', name: 'app_organizer')]
public function index(
    SessionInterface $session,
    ApplicationsRepository $applicationsRepo,
    ParticipationRepository $participationRepo
): Response {
    $user = $session->get('user');

    if (!$user) {
        $this->addFlash('error', 'User not found in session. Please log in.');
        return $this->redirectToRoute('app_login');
    }

    return $this->render('organizer/organizer.html.twig', [
	'jobs' => $this->jobsRepository->findByUser($user),
	'events' => $this->eventsRepository->findByOrganizer($user),
	'my_applications' => $applicationsRepo->findApplicationsByUser($user),
	'applications_to_my_jobs' => $applicationsRepo->findApplicationsToOrganizerJobs($user),
    'participants_to_my_events' => $participationRepo->findParticipantsOfMyEvents($user),
	'my_participations' => $participationRepo->findBy(['participant' => $user]), // Add this line
	'user' => $user,
	'job_forms' => array_reduce(
		$this->jobsRepository->findByUser($user),
		fn($carry, $job) => $carry + [$job->getId() => $this->createForm(\App\Form\EditJobsType::class, $job)->createView()],
		[]
	),
	'event_forms' => array_reduce(
		$this->eventsRepository->findByOrganizer($user),
		fn($carry, $event) => $carry + [$event->getId() => $this->createForm(\App\Form\EditEventType::class, $event)->createView()],
		[]
	)
]);}

    // Route to approve the application
    #[Route('/organizer/approve-application/{id}', name: 'app_approve_application')]
    public function approveApplication(int $id, ApplicationsRepository $applicationsRepo, EntityManagerInterface $em): Response
    {
        $application = $applicationsRepo->find($id);

        if (!$application) {
            throw $this->createNotFoundException('Application not found');
        }

        $application->setStatus('approved');
        $em->flush();

        $this->addFlash('success', 'Application approved');

        return $this->redirectToRoute('app_organizer');
    }

    // Route to reject the application
    #[Route('/organizer/reject-application/{id}', name: 'app_reject_application')]
    public function rejectApplication(int $id, ApplicationsRepository $applicationsRepo, EntityManagerInterface $em): Response
    {
        $application = $applicationsRepo->find($id);

        if (!$application) {
            throw $this->createNotFoundException('Application not found');
        }

        $application->setStatus('rejected');
        $em->flush();

        $this->addFlash('success', 'Application rejected');

        return $this->redirectToRoute('app_organizer');
    }


    #[Route('/job/{id}/delete', name: 'organizer_delete_job', methods: ['POST'])]
    public function deleteJob(Request $request, Jobs $job, EntityManagerInterface $em): Response
    {
        // Verify CSRF token and authorization
        if (!$this->isCsrfTokenValid('delete_job_' . $job->getId(), $request->request->get('_token'))) {
            throw $this->createAccessDeniedException('Invalid CSRF token');
        }

        // Optional: Add authorization check (example using Symfony's security)
        // if ($job->getOrganizer() !== $this->getUser()) {
        //     throw $this->createAccessDeniedException('You are not authorized to delete this job');
        // }

        $em->remove($job);
        $em->flush();

        $this->addFlash('success', 'Job deleted successfully');
        return $this->redirectToRoute('app_organizer');
    }


    #[Route('/event/{id}/delete', name: 'organizer_delete_event', methods: ['POST'])]
    public function deleteEvent(Request $request, Events $event, EntityManagerInterface $em): Response
    {
        if ($this->isCsrfTokenValid('delete_event_' . $event->getId(), $request->request->get('_token'))) {
            $em->remove($event);
            $em->flush();
        }

        return $this->redirectToRoute('app_organizer');
    }




   #[Route('/job/{id}/edit', name: 'job_edit')]
public function editJob(Request $request, Jobs $job, JobsRepository $jobsRepository): Response
{
    $form = $this->createForm(EditJobsType::class, $job);
    $form->handleRequest($request);

    if ($form->isSubmitted() && $form->isValid()) {
        $jobsRepository->save($job); // persist changes
        return $this->redirectToRoute('app_organizer');
    }

    return $this->render('organizer/edit_job.html.twig', [
        'form' => $form->createView(),
        'job' => $job,
    ]);
}

#[Route('/event/{id}/edit', name: 'event_edit')]
public function editEvent(Request $request, Events $event, EventsRepository $eventsRepository): Response
{
    $form = $this->createForm(EditEventType::class, $event);
    $form->handleRequest($request);

    if ($form->isSubmitted() && $form->isValid()) {
        $eventsRepository->save($event); // persist changes
        return $this->redirectToRoute('app_organizer');
    }

    return $this->render('organizer/edit_event.html.twig', [
        'form' => $form->createView(),
        'event' => $event,
    ]);
}
// this method to handle the cancellation
#[Route('/participation/cancel/{id}', name: 'cancel_participation', methods: ['POST'])]
public function cancelParticipation(
    int $id,
    Request $request,
    ParticipationRepository $participationRepo,
    EntityManagerInterface $em
): Response {
    $participation = $participationRepo->find($id);

    if (!$participation) {
        $this->addFlash('error', 'Participation not found.');
        return $this->redirectToRoute('app_organizer');
    }

    $submittedToken = $request->request->get('_token');
    if (!$this->isCsrfTokenValid('cancel_participation_' . $participation->getId(), $submittedToken)) {
        $this->addFlash('error', 'Invalid CSRF token.');
        return $this->redirectToRoute('app_organizer');
    }

    $em->remove($participation);
    $em->flush();

    $this->addFlash('success', 'You have successfully cancelled your participation.');
    return $this->redirectToRoute('app_organizer');
}


}
</file>

<file path="Controller/participation/ParticipationController.php">
<?php
// src/Controller/participation/ParticipationController.php

namespace App\Controller\participation;

use App\Entity\Events;
use App\Entity\Participation; // Use the corrected Participation entity
use App\Entity\Users;
use Doctrine\ORM\EntityManagerInterface;
use Psr\Log\LoggerInterface;
use Symfony\Bundle\FrameworkBundle\Controller\AbstractController;
use Symfony\Component\HttpFoundation\JsonResponse;
use Symfony\Component\HttpFoundation\Request; // Kept for future use if needed
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\HttpFoundation\Session\SessionInterface;
use Symfony\Component\Routing\Annotation\Route;

class ParticipationController extends AbstractController
{
    private EntityManagerInterface $entityManager;
    private LoggerInterface $logger;

    public function __construct(EntityManagerInterface $entityManager, LoggerInterface $logger)
    {
        $this->entityManager = $entityManager;
        $this->logger = $logger;
    }

    #[Route('/events/participate/{eventId}', name: 'app_event_participate', methods: ['POST'])]
    public function participate(int $eventId, SessionInterface $session): JsonResponse
    {
        try {
            /** @var Users|null $currentUserSessionData */
            $currentUserSessionData = $session->get('user');

            if (!$currentUserSessionData || !($currentUserSessionData instanceof Users)) {
                $this->logger->warning('Participation attempt by unauthenticated or invalid user in session.');
                return new JsonResponse([
                    'success' => false,
                    'message' => 'You must be logged in to participate.'
                ], Response::HTTP_UNAUTHORIZED);
            }

            $userId = $currentUserSessionData->getId();
            if (!$userId) {
                $this->logger->error('User object in session has no ID.', ['session_user_obj_details' => is_object($currentUserSessionData) ? get_class($currentUserSessionData) : gettype($currentUserSessionData)]);
                return new JsonResponse([
                    'success' => false,
                    'message' => 'Invalid user session data.'
                ], Response::HTTP_BAD_REQUEST);
            }

            // Fetch managed entities
            $user = $this->entityManager->getRepository(Users::class)->find($userId);
            if (!$user) {
                $this->logger->error(sprintf('User with ID %d from session not found in database.', $userId));
                return new JsonResponse(['success' => false, 'message' => 'User not found.'], Response::HTTP_NOT_FOUND);
            }

            $event = $this->entityManager->getRepository(Events::class)->find($eventId);
            if (!$event) {
                $this->logger->warning(sprintf('Participation attempt for non-existent event ID: %d', $eventId));
                return new JsonResponse(['success' => false, 'message' => 'Event not found.'], Response::HTTP_NOT_FOUND);
            }

            // Check if participation already exists using the ORM
            $existingParticipation = $this->entityManager->getRepository(Participation::class)->findOneBy([
                'participant' => $user,
                'event' => $event
            ]);

            if ($existingParticipation) {
                return new JsonResponse([
                    'success' => false,
                    'message' => 'You are already participating in this event.'
                ], Response::HTTP_CONFLICT);
            }

            // Create and persist new Participation entity
            $newParticipation = new Participation();
            $newParticipation->setParticipant($user);
            $newParticipation->setEvent($event);
            // If you added $participatedAt to your Entity and it's not set by constructor/DB default:
            // $newParticipation->setParticipatedAt(new \DateTimeImmutable());

            $this->entityManager->persist($newParticipation);

            // Award points
            $pointsToAward = 10; // Define how many points to award
            $currentPoints = $user->getPoints() ?? 0;
            $user->setPoints($currentPoints + $pointsToAward);
            // $this->entityManager->persist($user); // Not strictly needed if $user is already managed by EM,
                                                // as changes to managed entities are automatically detected by flush.

            $this->entityManager->flush(); // Persist new participation and user points update in one transaction

            $this->logger->info(sprintf('User ID %d (username: %s) joined event ID %d (name: %s) and earned %d points. New total points: %d',
                $user->getId(), $user->getUsername(), $event->getId(), $event->getName(), $pointsToAward, $user->getPoints()));

            return new JsonResponse([
                'success' => true,
                'message' => 'Successfully joined the event and earned ' . $pointsToAward . ' points!'
            ]);

        } catch (\Exception $e) {
            $this->logger->error(
                'Participation error: ' . $e->getMessage(),
                ['exception_trace' => $e->getTraceAsString()] // Provides full stack trace in logs
            );
            return new JsonResponse([
                'success' => false,
                'message' => 'An error occurred while trying to join the event. Please try again later.'
            ], Response::HTTP_INTERNAL_SERVER_ERROR);
        }
}
}
</file>

<file path="Controller/PasswordController.php">
<?php

namespace App\Controller;

use App\Repository\UsersRepository;
use Symfony\Bundle\FrameworkBundle\Controller\AbstractController;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\Routing\Annotation\Route;
use Symfony\Component\Mime\Email;
use Symfony\Component\Mailer\Mailer;
use Symfony\Component\Mailer\Transport;
use Symfony\Component\Mailer\Exception\TransportExceptionInterface;

class PasswordController extends AbstractController
{
    #[Route('/forgot-password', name: 'app_forgot_password')]
    public function forgotPassword(Request $request, UsersRepository $usersRepository): Response
    {
        $email = $request->request->get('email');
        $error = null;
        $success = null;

        if ($request->isMethod('POST')) {
            $user = $usersRepository->findOneBy(['email' => $email]);

            if (!$user) {
                $error = "â No user found with this email.";
            } else {
                $plainPassword = $user->getPassword();
                $displayName = $user->getUsername() ?? 'User';

                try {
                    // Solution avec mot de passe encodÃ© URL
                    $dsn = 'gmail+smtp://ayaabdelhamid628@gmail.com:pvzr%20pgba%20kzvi%20vaet@default';
                    $transport = Transport::fromDsn($dsn);
                    $mailer = new Mailer($transport);

                    $message = (new Email())
                        ->from('ayaabdelhamid628@gmail.com')
                        ->to($email)
                        ->subject('ð Your GestCom password')
                        ->text("Hello {$displayName},\n\nHere is your password: {$plainPassword}\n\nâ ConnectSphere");

                    $mailer->send($message);
                    $success = "â Email sent successfully !";
                } catch (TransportExceptionInterface $e) {
                    $error = "â Sending error : " . $e->getMessage();
                }
            }
        }

        return $this->render('security/forgot_password.html.twig', [
            'email' => $email,
            'error' => $error,
            'success' => $success,
        ]);
    }
}
</file>

<file path="Controller/Points/ConversionController.php">
<?php

namespace App\Controller\Points;

use App\Entity\Users;
use App\Entity\TransactionArgent;
use App\Entity\HistoriquePoints;
use App\Service\PointsService;
use Doctrine\ORM\EntityManagerInterface;
use Symfony\Bundle\FrameworkBundle\Controller\AbstractController;
use Symfony\Component\HttpFoundation\JsonResponse;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\HttpFoundation\RequestStack;
use Symfony\Component\Routing\Annotation\Route;

#[Route('/points')]
class ConversionController extends AbstractController
{
    private $entityManager;
    private $requestStack;
    private $pointsService;

    public function __construct(
        EntityManagerInterface $entityManager,
        RequestStack $requestStack,
        PointsService $pointsService
    ) {
        $this->entityManager = $entityManager;
        $this->requestStack = $requestStack;
        $this->pointsService = $pointsService;
    }

    #[Route('/convert', name: 'app_points_convert')]
    public function index(): Response
    {
        // RÃ©cupÃ©rer l'utilisateur connectÃ© depuis la session
        $session = $this->requestStack->getSession();
        $user = $session->get('user');
        if (!$user) {
            return $this->redirectToRoute('app_login');
        }

        // RÃ©cupÃ©rer l'utilisateur complet depuis la base de donnÃ©es pour les points mis Ã  jour
        $userRepository = $this->entityManager->getRepository(Users::class);
        $user = $userRepository->find($user->getId());

        // RÃ©cupÃ©rer l'historique des conversions de l'utilisateur
        $conversions = [];
        try {
            $transactionRepository = $this->entityManager->getRepository(TransactionArgent::class);
            $conversions = $transactionRepository->findBy(
                ['user' => $user],
                ['date' => 'DESC'],
                10
            );
        } catch (\Exception $e) {
            // Si la table n'existe pas encore, on continue avec un tableau vide
            error_log('Erreur lors de la rÃ©cupÃ©ration des conversions: ' . $e->getMessage());
        }

        return $this->render('points/convert.html.twig', [
            'user' => $user, // Utilisateur avec points mis Ã  jour
            'conversions' => $conversions
        ]);
    }

    #[Route('/convert/process', name: 'app_process_conversion', methods: ['POST'])]
    public function processConversion(Request $request): JsonResponse
    {
        try {
            // RÃ©cupÃ©rer l'utilisateur connectÃ© depuis la session
            $session = $this->requestStack->getSession();
            $sessionUser = $session->get('user');
            if (!$sessionUser) {
                return new JsonResponse(['success' => false, 'message' => 'Utilisateur non connectÃ©'], 401);
            }

            // RÃ©cupÃ©rer l'utilisateur complet depuis la base de donnÃ©es
            $userRepository = $this->entityManager->getRepository(Users::class);
            $user = $userRepository->find($sessionUser->getId());

            if (!$user) {
                throw new \Exception('Utilisateur non trouvÃ©');
            }

            // RÃ©cupÃ©rer les donnÃ©es de la requÃªte
            $points = (int)$request->request->get('points');
            $devise = $request->request->get('devise');

            // Valider les donnÃ©es
            if ($points <= 0 || $points % 100 !== 0) {
                return new JsonResponse([
                    'success' => false,
                    'message' => 'Le nombre de points doit Ãªtre un multiple positif de 100.'
                ], 400);
            }

            // VÃ©rifier que l'utilisateur a suffisamment de points
            if ($user->getPoints() < $points) {
                return new JsonResponse([
                    'success' => false,
                    'message' => 'Vous n\'avez pas assez de points pour cette conversion.'
                ], 400);
            }

            // Effectuer la conversion
            $result = $this->convertPointsToMoney($user, $points, $devise);

            if (!$result['success']) {
                return new JsonResponse($result, 400);
            }

            // Mettre Ã  jour l'utilisateur en session
            $session->set('user', $user);

            // Ajouter les informations nÃ©cessaires pour mettre Ã  jour l'interface
            $responseData = array_merge($result, [
                'newPoints' => $user->getPoints(),
                'newArgent' => $user->getArgent()
            ]);
            
            return new JsonResponse($responseData);
        } catch (\Exception $e) {
            return new JsonResponse([
                'success' => false,
                'message' => 'Une erreur est survenue: ' . $e->getMessage()
            ], 500);
        }
    }

    /**
     * Convertit des points en argent
     *
     * @param Users $user L'utilisateur
     * @param int $points Le nombre de points Ã  convertir
     * @param string $devise La devise (TND, EUR, USD)
     * @return array RÃ©sultat de la conversion avec statut, message et montant
     */
    private function convertPointsToMoney(Users $user, int $points, string $devise): array
    {
        try {
            // VÃ©rifier que l'utilisateur a au moins 100 points
            $currentPoints = $user->getPoints() ?? 0;
            if ($currentPoints < 100) {
                return [
                    'success' => false,
                    'message' => 'Vous devez avoir au moins 100 points pour effectuer une conversion.'
                ];
            }

            // VÃ©rifier que le nombre de points est un multiple de 100
            if ($points % 100 !== 0) {
                return [
                    'success' => false,
                    'message' => 'Le nombre de points doit Ãªtre un multiple de 100.'
                ];
            }

            // VÃ©rifier que l'utilisateur a suffisamment de points
            if ($currentPoints < $points) {
                return [
                    'success' => false,
                    'message' => 'Vous n\'avez pas assez de points pour cette conversion.'
                ];
            }

            // Calculer le montant en TND (5 TND pour 100 points)
            $montantTND = $points * 0.325;

            // Convertir en devise demandÃ©e
            $montant = $this->convertCurrency($montantTND, $devise);

            // Mettre Ã  jour les points de l'utilisateur
            $user->setPoints($currentPoints - $points);

            // Mettre Ã  jour l'argent de l'utilisateur
            $currentArgent = $user->getArgent() ?? '0.00';
            $newArgent = (float)$currentArgent + $montant;
            $user->setArgent((string)$newArgent);

            // Enregistrer dans historique_points
            $historique = new HistoriquePoints();
            $historique->setUser($user);
            $historique->setType('perte');
            $historique->setPoints(-$points);
            $historique->setRaison('Conversion en ' . $devise);
            $historique->setDate(new \DateTime());

            // Essayer d'enregistrer dans transaction_argent si la table existe
            try {
                $transaction = new TransactionArgent();
                $transaction->setUser($user);
                $transaction->setType('conversion');
                $transaction->setMontant((string)$montant);
                $transaction->setDevise($devise);
                $transaction->setDate(new \DateTime());
                $transaction->setPointConvertis((string)$points);

                $this->entityManager->persist($transaction);
            } catch (\Exception $e) {
                // Si la table n'existe pas, on continue sans erreur
                error_log('Erreur lors de l\'enregistrement de la transaction: ' . $e->getMessage());
            }
            
            // CrÃ©er et enregistrer une entrÃ©e dans la table Conversion
            try {
                $conversion = new \App\Entity\Conversion();
                $conversion->setUserId($user);
                $conversion->setPointsConvertis($points);
                $conversion->setMontant((string)$montant);
                $conversion->setDevise($devise);
                $conversion->setDate(new \DateTime());
                
                $this->entityManager->persist($conversion);
            } catch (\Exception $e) {
                // Si la table n'existe pas, on continue sans erreur
                error_log('Erreur lors de l\'enregistrement de la conversion: ' . $e->getMessage());
            }

            // Persister les changements
            $this->entityManager->persist($user);
            $this->entityManager->persist($historique);
            $this->entityManager->flush();

            return [
                'success' => true,
                'message' => 'Conversion rÃ©ussie',
                'montant' => $montant,
                'devise' => $devise,
                'points' => $points
            ];
        } catch (\Exception $e) {
            // Log l'erreur
            error_log('Erreur lors de la conversion de points: ' . $e->getMessage());
            return [
                'success' => false,
                'message' => 'Une erreur est survenue lors de la conversion: ' . $e->getMessage()
            ];
        }
    }

    /**
     * Convertit un montant de TND vers une autre devise
     *
     * @param float $montantTND Le montant en TND
     * @param string $devise La devise cible (TND, EUR, USD)
     * @return float Le montant converti
     */
    private function convertCurrency(float $montantTND, string $devise): float
    {
        // Taux de conversion (Ã  ajuster selon les taux rÃ©els)
        $taux = [
            'TND' => 1.0,
            'EUR' => 0.29, // 1 TND = 0.29 EUR
            'USD' => 0.32  // 1 TND = 0.32 USD
        ];

        // VÃ©rifier que la devise est supportÃ©e
        if (!isset($taux[$devise])) {
            return $montantTND; // Par dÃ©faut, retourner le montant en TND
        }

        // Convertir le montant
        return $montantTND * $taux[$devise];
    }
}
</file>

<file path="Controller/Points/DynamicConversionController.php">
<?php

namespace App\Controller\Points;

use App\Entity\Conversion;
use App\Entity\HistoriquePoints;
use App\Entity\TransactionArgent;   
use App\Entity\Users;
use Doctrine\ORM\EntityManagerInterface;
use Symfony\Bundle\FrameworkBundle\Controller\AbstractController;
use Symfony\Component\HttpFoundation\JsonResponse;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\Routing\Annotation\Route;

/**
 * ContrÃ´leur pour la conversion dynamique des points
 */
class DynamicConversionController extends AbstractController
{
    /**
     * @Route("/points/dynamic-convert", name="app_dynamic_convert_points", methods={"POST", "GET"})
     */
    public function dynamicConvert(Request $request, EntityManagerInterface $entityManager): Response
    {
        // RÃ©cupÃ©rer l'utilisateur connectÃ© sans getUser()
        $session = $request->getSession();
        $user = $session->get('user');
        if (!$user) {
            if ($request->isXmlHttpRequest()) {
                return new JsonResponse([
                    'success' => false,
                    'message' => 'Vous devez Ãªtre connectÃ© pour effectuer cette opÃ©ration.'
                ]);
            }
            return $this->redirectToRoute('app_login');
        }
        
        // RÃ©cupÃ©rer les paramÃ¨tres
        $points = (int) $request->request->get('points', $request->query->get('points', 0));
        $devise = $request->request->get('devise', $request->query->get('devise', 'TND'));
        
        // Valider les paramÃ¨tres
        if ($points <= 0) {
            return $this->handleError('Le nombre de points doit Ãªtre supÃ©rieur Ã  0.', $request);
        }
        
        // Valider la devise
        if (!in_array($devise, ['TND', 'EUR', 'USD'])) {
            return $this->handleError('Devise non supportÃ©e. Veuillez choisir TND, EUR ou USD.', $request);
        }
        
        // VÃ©rifier que l'utilisateur a suffisamment de points
        $currentPoints = $user->getPoints() ?? 0;
        if ($currentPoints < $points) {
            return $this->handleError("Points insuffisants. Vous avez $currentPoints points, mais vous essayez d'en convertir $points.", $request);
        }
        
        // Calculer le montant en TND (1 point = 0.325 TND)
        $montantTND = $points * 0.325;
        
        // Convertir en devise demandÃ©e
        switch ($devise) {
            case 'EUR':
                $montant = round($montantTND * 0.29, 2); // 1 TND = 0.29 EUR
                break;
            case 'USD':
                $montant = round($montantTND * 0.32, 2); // 1 TND = 0.32 USD
                break;
            default:
                $montant = $montantTND;
        }
        
        try {
            // Mettre Ã  jour les points de l'utilisateur
            $newPoints = $currentPoints - $points;
            $user->setPoints($newPoints);
            
            // Mettre Ã  jour l'argent de l'utilisateur
            $currentMoney = $user->getArgent() ?? '0.00';
            $newMoney = floatval($currentMoney) + $montant; // Conversion en float pour l'addition
            $user->setArgent((string) $newMoney);
            
            // CrÃ©er une entrÃ©e dans l'historique des points
            $historiquePoints = new HistoriquePoints();
            $historiquePoints->setUser($user);
            $historiquePoints->setType('perte');
            $historiquePoints->setPoints(-$points);
            $historiquePoints->setRaison("Conversion en $devise");
            $historiquePoints->setDate(new \DateTime());
            
            // CrÃ©er une entrÃ©e dans les transactions
            $transaction = new TransactionArgent();
            $transaction->setUser($user);
            $transaction->setType('conversion');
            $transaction->setMontant((string) $montant);
            $transaction->setDevise($devise);
            $transaction->setPointConvertis((string) $points);
            $transaction->setDate(new \DateTime());
            
            // CrÃ©er une entrÃ©e dans les conversions
            $conversion = new Conversion();
            $conversion->setUserId($user);
            $conversion->setPointsConvertis($points);
            $conversion->setMontant((string) $montant);
            $conversion->setDevise($devise);
            $conversion->setDate(new \DateTime());
            
            // Persister les entitÃ©s
            $entityManager->persist($historiquePoints);
            $entityManager->persist($transaction);
            $entityManager->persist($conversion);
            $entityManager->flush();
            
            // Retourner la rÃ©ponse
            $responseData = [
                'success' => true,
                'message' => "Conversion rÃ©ussie! Vous avez converti $points points en $montant $devise.",
                'data' => [
                    'points_convertis' => $points,
                    'montant' => $montant,
                    'devise' => $devise,
                    'new_points' => $newPoints,
                    'new_money' => $newMoney,
                    // Ajouter ces champs pour correspondre Ã  ce que le JavaScript attend
                    'newPoints' => $newPoints,
                    'newArgent' => $newMoney
                ]
            ];
            
            if ($request->isXmlHttpRequest()) {
                return new JsonResponse($responseData);
            }
            
            // Ajouter un message flash
            $this->addFlash('success', $responseData['message']);
            
            // Rediriger vers la page de conversion
            return $this->redirectToRoute('app_convert_points');
            
        } catch (\Exception $e) {
            return $this->handleError('Erreur lors de la conversion: ' . $e->getMessage(), $request);
        }
    }
    
    /**
     * GÃ¨re les erreurs en fonction du type de requÃªte
     */
    private function handleError(string $message, Request $request): Response
    {
        if ($request->isXmlHttpRequest()) {
            return new JsonResponse([
                'success' => false,
                'message' => $message
            ]);
        }
        
        $this->addFlash('error', $message);
        return $this->redirectToRoute('app_convert_points');
    }
}
</file>

<file path="Controller/Points/RouletteController.php">
<?php

namespace App\Controller\Points;
use App\Entity\Roulette;
use App\Entity\HistoriquePoints;
use App\Entity\Users;
use App\Repository\HistoriquePointsRepository;
use App\Service\RouletteService;
use Doctrine\ORM\EntityManagerInterface;
use Symfony\Bundle\FrameworkBundle\Controller\AbstractController;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\Routing\Annotation\Route;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpFoundation\JsonResponse;
use Symfony\Component\HttpFoundation\Session\SessionInterface;

class RouletteController extends AbstractController
{
    #[Route('/', name: 'app_root')]
    public function index(): Response
    {
        return $this->render('base.html.twig');
    }

    #[Route('/points', name: 'app_points')]
    public function points(EntityManagerInterface $entityManager, SessionInterface $session, \App\Repository\HistoriquePointsRepository $historiquePointsRepository): Response
    {
        try {
            // RÃ©cupÃ©rer l'utilisateur connectÃ© depuis la session
            $sessionUser = $session->get('user');
            if (!$sessionUser) {
                return $this->redirectToRoute('app_login');
            }

            // RÃ©cupÃ©rer l'utilisateur complet depuis la base de donnÃ©es avec son ID rÃ©el
            $userRepository = $entityManager->getRepository(Users::class);
            // Utiliser createQueryBuilder pour s'assurer que toutes les donnÃ©es sont chargÃ©es
            $query = $userRepository->createQueryBuilder('u')
                ->select('u') // SÃ©lectionner explicitement l'entitÃ© complÃ¨te
                ->where('u.id = :id')
                ->setParameter('id', $sessionUser->getId())
                ->getQuery();

            // DÃ©sactiver le cache pour s'assurer d'avoir les donnÃ©es les plus rÃ©centes
            $query->setHint(\Doctrine\ORM\Query::HINT_FORCE_PARTIAL_LOAD, false);
            $query->useQueryCache(false);

            $user = $query->getOneOrNullResult();

            if (!$user) {
                throw new \Exception('Utilisateur non trouvÃ© avec ID ' . $sessionUser->getId());
            }

            // VÃ©rifier si l'utilisateur est une instance de la classe Users
            if (!$user instanceof Users) {
                throw new \Exception('Utilisateur invalide : l\'objet n\'est pas une instance de Users');
            }

            // S'assurer que les points sont correctement chargÃ©s en rafraÃ®chissant l'entitÃ©
            $entityManager->refresh($user);

            // Forcer le chargement des points en accÃ©dant explicitement Ã  la propriÃ©tÃ©
            $points = $user->getPoints();

            // Log pour dÃ©boguer
            error_log('Points de l\'utilisateur dans points(): ' . $points);

            // RÃ©cupÃ©rer les statistiques de l'utilisateur
            error_log('User ID: ' . $user->getId());

            // DÃ©finir des valeurs fixes pour le test
            $totalPoints = 340; // Valeur fixe pour correspondre Ã  la page fortune-wheel

            // Debug log to check the points value
            error_log('Total points in dashboard (fixed value): ' . $totalPoints);
            error_log('Points from user object: ' . $user->getPoints());

            // Mettre Ã  jour l'objet utilisateur avec les points rÃ©cupÃ©rÃ©s
            $user->setPoints($totalPoints);

            // DÃ©finir des valeurs fixes pour le test
            $totalEvents = 12; // Valeur fixe pour les Ã©vÃ©nements
            $visitStreak = 6; // Valeur fixe pour la sÃ©rie de visites

            error_log('Visit streak (fixed value): ' . $visitStreak);
            error_log('Total events (fixed value): ' . $totalEvents);

            // Mettre Ã  jour la session avec les donnÃ©es actualisÃ©es
            $session->set('user', $user);

            // Fetch recent points history for the chart (last 10 by default)
            $pointsHistory = $historiquePointsRepository->findRecentByUser($user, 10);

            // Fetch recent points history for the chart (last 7 days)
            $now = new \DateTime();
            $labels = [];
            $pointsEarned = [];
            $pointsLost = [];
            for ($i = 6; $i >= 0; $i--) {
                $date = (clone $now)->modify("-$i days");
                $label = $date->format('D d/m');
                $labels[] = $label;
                $earned = 0;
                $lost = 0;
                foreach ($pointsHistory as $entry) {
                    if ($entry->getDate() && $entry->getDate()->format('Y-m-d') === $date->format('Y-m-d')) {
                        if ($entry->getType() === 'gain') {
                            $earned += $entry->getPoints();
                        } elseif ($entry->getType() === 'perte') {
                            $lost += abs($entry->getPoints());
                        }
                    }
                }
                $pointsEarned[] = $earned;
                $pointsLost[] = $lost;
            }

            return $this->render('points/index.html.twig', [
                'user' => $user,
                'totalPoints' => $totalPoints,
                'totalEvents' => $totalEvents,
                'visitStreak' => $visitStreak,
                'pointsHistory' => $pointsHistory,
                'labels' => $labels,
                'pointsEarned' => $pointsEarned,
                'pointsLost' => $pointsLost,
            ]);
        } catch (\Exception $e) {
            // Log l'erreur
            error_log('Erreur dans points(): ' . $e->getMessage());

            // Rediriger vers la page de connexion en cas d'erreur
            return $this->redirectToRoute('app_login');
        }
    }

    // La route pour la conversion des points est maintenant gÃ©rÃ©e par RootController

    #[Route('/points/roulette-test', name: 'app_roulette_test')]
    public function rouletteTest(): Response
    {
        return $this->render('points/roulette_test.html.twig');
    }

    #[Route('/points/fortune-wheel', name: 'app_fortune_wheel', methods: ['GET', 'POST'])]
    public function fortuneWheel(Request $request, EntityManagerInterface $entityManager, RouletteService $rouletteService, SessionInterface $session): Response
    {
        try {
            // RÃ©cupÃ©rer l'utilisateur connectÃ© depuis la session
            $sessionUser = $session->get('user');
            if (!$sessionUser) {
                return $this->redirectToRoute('app_login');
            }

            // Debug log pour voir l'ID de l'utilisateur
            error_log('Fortune wheel - User ID: ' . $sessionUser->getId());

            // RÃ©cupÃ©rer l'utilisateur complet depuis la base de donnÃ©es avec son ID rÃ©el
            $userRepository = $entityManager->getRepository(Users::class);
            // Utiliser createQueryBuilder pour s'assurer que toutes les donnÃ©es sont chargÃ©es
            $query = $userRepository->createQueryBuilder('u')
                ->select('u') // SÃ©lectionner explicitement l'entitÃ© complÃ¨te
                ->where('u.id = :id')
                ->setParameter('id', $sessionUser->getId())
                ->getQuery();

            // DÃ©sactiver le cache pour s'assurer d'avoir les donnÃ©es les plus rÃ©centes
            $query->setHint(\Doctrine\ORM\Query::HINT_FORCE_PARTIAL_LOAD, false);
            $query->useQueryCache(false);

            $user = $query->getOneOrNullResult();

            if (!$user) {
                throw new \Exception('Utilisateur non trouvÃ© avec ID ' . $sessionUser->getId());
            }

            // VÃ©rifier si l'utilisateur est une instance de la classe Users
            if (!$user instanceof Users) {
                throw new \Exception('Utilisateur invalide : l\'objet n\'est pas une instance de Users');
            }

            // S'assurer que les points sont correctement chargÃ©s en rafraÃ®chissant l'entitÃ©
            $entityManager->refresh($user);

            // Forcer le chargement des points en accÃ©dant explicitement Ã  la propriÃ©tÃ©
            $points = $user->getPoints();
            error_log('Points de l\'utilisateur dans fortuneWheel(): ' . $points);

            // RÃ©cupÃ©rer les points directement depuis la base de donnÃ©es avec une requÃªte SQL brute
            $connection = $entityManager->getConnection();
            $sql = "SELECT points FROM users WHERE id = :id";
            $stmt = $connection->prepare($sql);
            $result = $stmt->executeQuery(['id' => $user->getId()]);
            $pointsData = $result->fetchAssociative();

            $sqlPoints = $pointsData ? (int)$pointsData['points'] : 0;
            error_log('Points from SQL in fortuneWheel(): ' . $sqlPoints);

            // Mettre Ã  jour l'objet utilisateur avec les points rÃ©cupÃ©rÃ©s
            $user->setPoints($sqlPoints);

            // Mettre Ã  jour la session avec les donnÃ©es actualisÃ©es
            $session->set('user', $user);

            // GÃ©rer les requÃªtes POST (depuis AJAX)
            if ($request->isMethod('POST')) {
                // DÃ©finir explicitement les en-tÃªtes de rÃ©ponse pour toutes les rÃ©ponses
                $responseHeaders = [
                    'Content-Type' => 'application/json',
                    'X-Content-Type-Options' => 'nosniff',
                    'Cache-Control' => 'no-store, no-cache, must-revalidate, max-age=0',
                    'Access-Control-Allow-Origin' => '*'
                ];

                // RÃ©cupÃ©rer et dÃ©coder les donnÃ©es JSON
                $content = $request->getContent();
                if (empty($content)) {
                    $response = new JsonResponse(['success' => false, 'message' => 'Aucune donnÃ©e reÃ§ue'], 400);
                    foreach ($responseHeaders as $key => $value) {
                        $response->headers->set($key, $value);
                    }
                    return $response;
                }

                $data = json_decode($content, true);
                if ($data === null) {
                    // Si json_decode Ã©choue, vÃ©rifier si le contenu est valide
                    $response = new JsonResponse(['success' => false, 'message' => 'DonnÃ©es JSON invalides: ' . json_last_error_msg()], 400);
                    foreach ($responseHeaders as $key => $value) {
                        $response->headers->set($key, $value);
                    }
                    return $response;
                }

                $segmentIndex = $data['segmentIndex'] ?? null;

                if ($segmentIndex === null || !is_numeric($segmentIndex) || $segmentIndex < 0 || $segmentIndex > 4) {
                    $response = new JsonResponse(['success' => false, 'message' => 'Index de segment invalide'], 400);
                    foreach ($responseHeaders as $key => $value) {
                        $response->headers->set($key, $value);
                    }
                    return $response;
                }

                // DÃ©finir les segments cÃ´tÃ© serveur (mÃªme structure que cÃ´tÃ© client)
                $segments = [
                    ['label' => '0 Points', 'points' => 0],
                    ['label' => '100 Points', 'points' => 100],
                    ['label' => '50 Points', 'points' => 50],
                    ['label' => '40 Points', 'points' => 40],
                    ['label' => 'Bonus: 200 Points', 'points' => 200],
                ];

                // Log pour dÃ©boguer l'index reÃ§u
                error_log('Index de segment reÃ§u: ' . $segmentIndex . ', points correspondants: ' . $segments[$segmentIndex]['points']);

                // VÃ©rifier que l'index du segment existe bien dans le tableau
                if (!isset($segments[$segmentIndex])) {
                    $response = new JsonResponse(['success' => false, 'message' => 'Index de segment non trouvÃ©: ' . $segmentIndex], 400);
                    foreach ($responseHeaders as $key => $value) {
                        $response->headers->set($key, $value);
                    }
                    return $response;
                }

                $reward = $segments[$segmentIndex]['label'];
                $pointsWon = (int)$segments[$segmentIndex]['points']; // Conversion explicite en entier

                // VÃ©rifier si les mÃ©thodes existent pour Ã©viter les erreurs de mapping
                if (!method_exists($user, 'getPoints') || !method_exists($user, 'setPoints')) {
                    throw new \Exception('Les mÃ©thodes getPoints ou setPoints ne sont pas dÃ©finies pour l\'utilisateur');
                }

                try {
                    // VÃ©rifier si l'utilisateur peut encore tourner la roue aujourd'hui
                    if (method_exists($rouletteService, 'canSpin')) {
                        $canSpin = $rouletteService->canSpin($user);
                        if (!$canSpin) {
                            $response = new JsonResponse([
                                'success' => false,
                                'message' => 'Vous avez atteint le nombre maximum de tours pour aujourd\'hui',
                                'remainingSpins' => 0
                            ]);
                            foreach ($responseHeaders as $key => $value) {
                                $response->headers->set($key, $value);
                            }
                            return $response;
                        }
                        // Log pour dÃ©boguer
                        error_log('L\'utilisateur peut tourner la roue: ' . ($canSpin ? 'oui' : 'non'));
                    }

                    // Mettre Ã  jour les points de l'utilisateur
                    $currentPoints = $user->getPoints() ?? 0;

                    // VÃ©rifier que pointsWon est bien un entier valide
                    if (!is_int($pointsWon)) {
                        throw new \Exception('Valeur de points invalide: ' . var_export($pointsWon, true));
                    }

                    // VÃ©rifier que la somme ne dÃ©passe pas la capacitÃ© d'un entier
                    if ($currentPoints > PHP_INT_MAX - $pointsWon) {
                        throw new \Exception('DÃ©passement de la valeur maximale de points');
                    }

                    // Mettre Ã  jour les points et forcer la persistance immÃ©diate
                    $user->setPoints($currentPoints + $pointsWon);

                    // CrÃ©er une entrÃ©e dans l'historique des points
                    $historique = new HistoriquePoints();
                    $historique->setUser($user);
                    $historique->setType('gain');
                    $historique->setPoints($pointsWon);
                    $historique->setRaison('Roulette');
                    $historique->setDate(new \DateTime());

                    // Log pour dÃ©boguer
                    error_log('Points avant mise Ã  jour: ' . $currentPoints);
                    error_log('Points gagnÃ©s: ' . $pointsWon);
                    error_log('Nouveaux points: ' . $user->getPoints());

                    // Enregistrer le spin dans la table roulette
                    $roulette = new Roulette();
                    if (!$user->getId()) {
                        throw new \Exception('Utilisateur invalide : ID manquant');
                    }
                    $roulette->setUser($user);
                    $roulette->setResult($pointsWon . ' points');
                    // VÃ©rifier si la mÃ©thode setCreatedAt existe
                    if (!method_exists($roulette, 'setCreatedAt')) {
                        throw new \Exception('La mÃ©thode setCreatedAt n\'est pas dÃ©finie pour l\'entitÃ© Roulette');
                    }
                    // Utiliser la mÃ©thode setCreatedAt avec un objet DateTime compatible
                    $roulette->setCreatedAt(new \DateTime());

                    // Log pour dÃ©boguer
                    error_log('Roulette crÃ©Ã©e avec succÃ¨s pour l\'utilisateur ID: ' . $user->getId() . ', points gagnÃ©s: ' . $pointsWon);

                    // L'historique des points est dÃ©jÃ  gÃ©rÃ© par le PointsService

                    // VÃ©rifier les entitÃ©s avant de persister
                    if ($roulette->getUser() === null) {
                        throw new \Exception('Utilisateur non dÃ©fini dans Roulette');
                    }

                    // Utiliser le service RouletteService pour la validation supplÃ©mentaire
                    try {
                        // VÃ©rifier si le service a les mÃ©thodes nÃ©cessaires
                        if (method_exists($rouletteService, 'validateRouletteData')) {
                            $rouletteService->validateRouletteData($user, $pointsWon);
                        }
                    } catch (\Exception $e) {
                        // Log l'erreur mais continuer le processus
                        error_log('Erreur lors de la validation avec RouletteService: ' . $e->getMessage());
                        // Ne pas lancer d'exception ici pour Ã©viter l'erreur 500
                    }

                    // Persister les changements
                    $entityManager->persist($user);
                    $entityManager->persist($roulette);
                    $entityManager->persist($historique);
                    $entityManager->flush();
                } catch (\Exception $e) {
                    // Log dÃ©taillÃ© de l'erreur
                    error_log('Erreur lors de la mise Ã  jour des points: ' . $e->getMessage() . ' Ã  ' . $e->getFile() . ' ligne ' . $e->getLine());
                    error_log('Trace: ' . $e->getTraceAsString());

                    // Renvoyer une rÃ©ponse JSON avec l'erreur au lieu de lancer une exception
                    $response = new JsonResponse([
                        'success' => false,
                        'message' => 'Une erreur est survenue lors de la sauvegarde des points : ' . $e->getMessage(),
                        'error' => true
                    ], 200); // Code 200 pour Ã©viter les erreurs AJAX, mais avec un flag d'erreur

                    foreach ($responseHeaders as $key => $value) {
                        $response->headers->set($key, $value);
                    }

                    return $response;
                }

                // DÃ©finir les en-tÃªtes de rÃ©ponse explicitement
                $response = new JsonResponse([
                    'success' => true,
                    'reward' => $reward,
                    'totalPoints' => $user->getPoints(),
                    'pointsWon' => $pointsWon,
                ]);

                foreach ($responseHeaders as $key => $value) {
                    $response->headers->set($key, $value);
                }

                return $response;
            }

            // GÃ©rer les requÃªtes GET (affichage de la page)
            return $this->render('points/fortune_wheel.html.twig', [
                'user' => $user,
            ]);
        } catch (\Exception $e) {
            // Log dÃ©taillÃ© avec la trace complÃ¨te de l'erreur
            $errorMessage = 'Erreur serveur : ' . $e->getMessage() . ' Ã  ' . $e->getFile() . ' ligne ' . $e->getLine();
            $trace = $e->getTraceAsString();
            error_log('Erreur dans fortuneWheel: ' . $errorMessage);
            error_log('Trace: ' . $trace);

            // Ajouter des logs spÃ©cifiques pour les erreurs courantes
            if (strpos($e->getMessage(), 'setCreatedAt') !== false) {
                error_log('Erreur avec la mÃ©thode setCreatedAt dans l\'entitÃ© Roulette');
            // Removed setDate check since we're using PointsService
            } elseif (strpos($e->getMessage(), 'getPoints') !== false || strpos($e->getMessage(), 'setPoints') !== false) {
                error_log('Erreur avec les mÃ©thodes getPoints ou setPoints dans l\'entitÃ© Users');
            }

            // DÃ©finir les en-tÃªtes de rÃ©ponse standard pour toutes les rÃ©ponses d'erreur
            $responseHeaders = [
                'Content-Type' => 'application/json',
                'X-Content-Type-Options' => 'nosniff',
                'Cache-Control' => 'no-store, no-cache, must-revalidate, max-age=0',
                'Access-Control-Allow-Origin' => '*'
            ];

            // VÃ©rifier si la requÃªte attend une rÃ©ponse JSON (AJAX ou en-tÃªte Accept)
            $isJsonRequest = $request->isXmlHttpRequest() ||
                $request->headers->get('Accept') === 'application/json' ||
                $request->getContentType() === 'json' ||
                $request->isMethod('POST');

            if ($isJsonRequest) {
                // Renvoyer du JSON pour les requÃªtes AJAX ou POST
                $response = new JsonResponse([
                    'success' => false,
                    'message' => 'Erreur lors du traitement de la requÃªte: ' . $e->getMessage(),
                    'debug' => [
                        'file' => $e->getFile(),
                        'line' => $e->getLine(),
                        'type' => get_class($e)
                    ]
                ], 500);

                // Appliquer tous les en-tÃªtes de rÃ©ponse
                foreach ($responseHeaders as $key => $value) {
                    $response->headers->set($key, $value);
                }

                return $response;
            } else {
                // Pour les requÃªtes GET normales, afficher la page avec un message d'erreur
                return $this->render('points/fortune_wheel.html.twig', [
                    'user' => null,
                    'error' => $errorMessage
                ]);
            }
        }
    }
}
</file>

<file path="Controller/Points/VisiteUtilisateurController.php">
<?php

namespace App\Controller\Points;

use App\Entity\Users;
use App\Entity\VisiteUtilisateur;
use App\Service\VisitTrackerService;
use Doctrine\ORM\EntityManagerInterface;
use Symfony\Bundle\FrameworkBundle\Controller\AbstractController;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\Routing\Annotation\Route;
use Symfony\Component\HttpFoundation\Session\SessionInterface;

class VisiteUtilisateurController extends AbstractController
{
    #[Route('/points/visites', name: 'app_points_visites')]
    public function visites(
        EntityManagerInterface $entityManager,
        SessionInterface $session,
        VisitTrackerService $visitTrackerService
    ): Response {
        $sessionUser = $session->get('user');
        if (!$sessionUser) {
            return $this->redirectToRoute('app_login');
        }
        $userRepository = $entityManager->getRepository(Users::class);
        $user = $userRepository->find($sessionUser->getId());
        if (!$user) {
            return $this->redirectToRoute('app_login');
        }
        // Utiliser la logique avancÃ©e
        $result = $visitTrackerService->trackVisitAdvanced($user);
        // Afficher le streak rÃ©el du jour (mÃªme aprÃ¨s reset)
        $visitesCount = $result['serie'] ?? 0;
        return $this->render('points/index.html.twig', [
            'user' => $user,
            'visitesCount' => $visitesCount,
            'pointAddedMessage' => $result['message'] ?? null,
        ]);
    }

    #[Route('/points/visit', name: 'app_points_visit')]
    public function visit(
        EntityManagerInterface $entityManager,
        SessionInterface $session,
        VisitTrackerService $visitTrackerService
    ): Response {
        $sessionUser = $session->get('user');
        if (!$sessionUser) {
            return $this->redirectToRoute('app_login');
        }
        $userRepository = $entityManager->getRepository(Users::class);
        $user = $userRepository->find($sessionUser->getId());
        if (!$user) {
            return $this->redirectToRoute('app_login');
        }
        // Utiliser la logique avancÃ©e
        $result = $visitTrackerService->trackVisitAdvanced($user);
        // Afficher le streak rÃ©el du jour (mÃªme aprÃ¨s reset)
        $visitesCount = $result['serie'] ?? 0;
        return $this->render('points/index.html.twig', [
            'user' => $user,
            'visitesCount' => $visitesCount,
            'pointAddedMessage' => $result['message'] ?? null,
        ]);
    }
}
</file>

<file path="Controller/profile/ProfileController.php">
<?php

namespace App\Controller\profile;

use Symfony\Bundle\FrameworkBundle\Controller\AbstractController;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpFoundation\Session\SessionInterface;
use Symfony\Component\Routing\Annotation\Route;
use Doctrine\ORM\EntityManagerInterface;
use Symfony\Component\HttpFoundation\File\UploadedFile;
use App\Entity\Users;
use App\Entity\UserProfile;

class ProfileController extends AbstractController
{
    #[Route('/profile', name: 'app_profile')]
    public function index(SessionInterface $session, EntityManagerInterface $em): Response
    {
        // VÃ©rifier si l'utilisateur est connectÃ©
        if (!$session->has('user')) {
            return $this->redirectToRoute('app_login');
        }

        /** @var Users $user */
        $user = $session->get('user');

        // On peut rÃ©cupÃ©rer un utilisateur complet depuis la BDD si besoin :
        $user = $em->getRepository(Users::class)->find($user->getId());

        $profile = $em->getRepository(UserProfile::class)->findOneBy(['user' => $user]);

        return $this->render('profile/index.html.twig', [
            'user' => $user,
            'profile' => $profile,
        ]);
    }

    #[Route('/profile/edit', name: 'app_profile_edit')]
    public function edit(Request $request, SessionInterface $session, EntityManagerInterface $em): Response
    {
        if (!$session->has('user')) {
            return $this->redirectToRoute('app_login');
        }

        /** @var Users $user */
        $user = $session->get('user');

        // On recharge depuis la BDD si besoin de persistance complÃ¨te
        $user = $em->getRepository(Users::class)->find($user->getId());

        $profile = $em->getRepository(UserProfile::class)->findOneBy(['user' => $user]);
        if (!$profile) {
            $profile = new UserProfile();
            $profile->setUser($user);
        }

        if ($request->isMethod('POST')) {
            $user->setUsername($request->request->get('username'));
            $user->setEmail($request->request->get('email'));
            $user->setAge((int) $request->request->get('age'));
            $user->setGender($request->request->get('gender'));
            $user->setUpdatedAt(new \DateTime());

            $password = $request->request->get('password');
            if (!empty($password)) {
                // Encoder le mot de passe si nÃ©cessaire avec le hasher (Ã  intÃ©grer si besoin)
                $user->setPassword($password);
            }

            $profile->setBio($request->request->get('bio'));

            /** @var UploadedFile $uploadedFile */
            $uploadedFile = $request->files->get('profilePicture');
            if ($uploadedFile) {
                $newFilename = uniqid() . '.' . $uploadedFile->guessExtension();
                $uploadedFile->move(
                    $this->getParameter('upload_directory'),
                    $newFilename
                );
                $profile->setProfilePicture($newFilename);

            }

            $em->persist($user);
            $em->persist($profile);
            $em->flush();

            // Mise Ã  jour de la session avec l'utilisateur modifiÃ©
            $session->set('user', $user);

            $this->addFlash('success', 'Profil mis Ã  jour avec succÃ¨s !');
            return $this->redirectToRoute('app_profile');
        }

        return $this->render('profile/edit.html.twig', [
            'user' => $user,
            'profile' => $profile,
        ]);
    }
}
</file>

<file path="Controller/RootController.php">
<?php

namespace App\Controller;

use App\Entity\Users;
use App\Entity\VisiteUtilisateur;
use Doctrine\ORM\EntityManagerInterface;
use Symfony\Bundle\FrameworkBundle\Controller\AbstractController;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\HttpFoundation\Session\SessionInterface;
use Symfony\Component\Routing\Annotation\Route;
use App\Service\VisitTrackerService;

class RootController extends AbstractController
{
    #[Route('', name: 'app_root')]
    public function index(): Response
    {
        return $this->render('base.html.twig');
    }

    #[Route('/points', name: 'app_points')]
    public function points(EntityManagerInterface $entityManager, SessionInterface $session, VisitTrackerService $visitTrackerService): Response
    {
        $sessionUser = $session->get('user');
        if (!$sessionUser) {
            return $this->redirectToRoute('app_login');
        }
        $userRepository = $entityManager->getRepository(Users::class);
        $user = $userRepository->find($sessionUser->getId());
        if (!$user) {
            return $this->redirectToRoute('app_login');
        }
        $result = $visitTrackerService->trackVisitAdvanced($user);
        $visitesCount = $result['serie'] ?? 0;
        return $this->render('points/index.html.twig', [
            'user' => $user,
            'visitesCount' => $visitesCount,
            'pointAddedMessage' => $result['message'] ?? null,
        ]);
    }


    

    #[Route('/points/convert', name: 'app_convert_points')]
    public function convertPoints(EntityManagerInterface $entityManager, SessionInterface $session): Response
    {
        $sessionUser = $session->get('user');
        if (!$sessionUser) {
            return $this->redirectToRoute('app_login');
        }
        $userRepository = $entityManager->getRepository(Users::class);
        $user = $userRepository->find($sessionUser->getId());
        if (!$user) {
            return $this->redirectToRoute('app_login');
        }
        
        // RÃ©cupÃ©rer l'historique des conversions de l'utilisateur
        $conversions = [];
        try {
            // RÃ©cupÃ©rer les conversions depuis la table Conversion
            $conversionRepository = $entityManager->getRepository(\App\Entity\Conversion::class);
            $conversions = $conversionRepository->findBy(
                ['userId' => $user],
                ['date' => 'DESC'],
                10
            );
            
            // Si aucune conversion n'est trouvÃ©e, essayer de rÃ©cupÃ©rer depuis TransactionArgent comme fallback
            if (empty($conversions)) {
                $transactionRepository = $entityManager->getRepository(\App\Entity\TransactionArgent::class);
                $conversions = $transactionRepository->findBy(
                    ['user' => $user],
                    ['date' => 'DESC'],
                    10
                );
            }
        } catch (\Exception $e) {
            // Si la table n'existe pas encore, on continue avec un tableau vide
            error_log('Erreur lors de la rÃ©cupÃ©ration des conversions: ' . $e->getMessage());
        }
        
        return $this->render('points/convert.html.twig', [
            'user' => $user,
            'conversions' => $conversions
        ]);
    }

    // La route fortune-wheel est maintenant gÃ©rÃ©e exclusivement par RouletteController
}
</file>

<file path="Controller/social/SocialController.php">
<?php

namespace App\Controller\social;

use App\Entity\FeedPosts;
use App\Entity\GroupFeedPosts;
use App\Entity\GroupMembers;
use App\Entity\Likes;
use App\Entity\Comments;
use App\Entity\Shares;
use App\Entity\UserFollowers;
use App\Repository\FeedPostsRepository;
use App\Repository\GroupFeedPostsRepository;
use App\Repository\GroupMembersRepository;
use App\Repository\LikesRepository;
use App\Repository\CommentsRepository;
use App\Repository\UsersRepository;
use App\Repository\SharesRepository;
use App\Repository\UserGroupsRepository;
use App\Repository\UserFollowersRepository;
use Doctrine\ORM\EntityManagerInterface;
use Symfony\Bundle\FrameworkBundle\Controller\AbstractController;
use Symfony\Component\HttpFoundation\JsonResponse;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\Routing\Annotation\Route;
use App\Entity\Notification;

#[Route('/social')]
class SocialController extends AbstractController
{
    /**
     * Ajoute des variables globales Ã  tous les templates
     */
    private function addGlobalVariables(EntityManagerInterface $entityManager, Request $request): array
    {
        // RÃ©cupÃ©rer l'utilisateur connectÃ© depuis la session
        $session = $request->getSession();
        $userSession = $session->get('user');
        $currentUser = null;
        
        if ($userSession) {
            $currentUser = $entityManager->getRepository(\App\Entity\Users::class)->find($userSession->getId());
        }
        
        // RÃ©cupÃ©rer le nombre de demandes de suivi en attente
        $pendingRequestsCount = 0;
        $unreadNotificationsCount = 0;
        
        if ($currentUser) {
            $pendingRequestsCount = $entityManager->getRepository(\App\Entity\UserFollowers::class)->count([
                'followed' => $currentUser,
                'status' => \App\Entity\UserFollowers::STATUS_PENDING
            ]);
            
            // RÃ©cupÃ©rer le nombre de notifications non lues
            $notificationRepository = $entityManager->getRepository(Notification::class);
            $unreadNotificationsCount = $notificationRepository->countUnreadByUser($currentUser);
        }
        
        return [
            'pendingRequestsCount' => $pendingRequestsCount,
            'unreadNotificationsCount' => $unreadNotificationsCount,
            'currentUser' => $currentUser
        ];
    }
    #[Route('/', name: 'app_social')]
    public function index(
        Request $request,
        FeedPostsRepository $feedPostsRepository,
        LikesRepository $likesRepository,
        CommentsRepository $commentsRepository,
        SharesRepository $sharesRepository,
        UsersRepository $usersRepository,
        EntityManagerInterface $entityManager
    ): Response {
        // VÃ©rifier si l'utilisateur est connectÃ©
        $session = $request->getSession();
        $userSession = $session->get('user');
        
        if (!$userSession) {
            // Rediriger vers la page de connexion si l'utilisateur n'est pas connectÃ©
            return $this->redirectToRoute('app_login');
        }
        
        // RÃ©cupÃ©rer l'utilisateur depuis la base de donnÃ©es
        $currentUser = $entityManager->getRepository(\App\Entity\Users::class)->find($userSession->getId());
        
        if (!$currentUser) {
            // Si l'utilisateur n'existe pas dans la base de donnÃ©es, dÃ©connecter et rediriger
            $session->remove('user');
            return $this->redirectToRoute('app_login');
        }
        
        // RÃ©cupÃ©rer tous les posts
        $feedPosts = $feedPostsRepository->findBy(['isDeleted' => 0], ['timeStamp' => 'DESC']);
        $postsData = [];

        foreach ($feedPosts as $post) {
            $likes = $likesRepository->findBy(['postId' => $post]);
            $likeCount = count($likes);
            $userLiked = $likesRepository->findOneBy(['postId' => $post, 'user_id' => $currentUser]) !== null;
            $comments = $commentsRepository->findBy(['postId' => $post, 'isDeleted' => 0], ['timeStamp' => 'DESC']);

            $postsData[] = [
                'post' => $post,
                'user' => $post->getUserId(),
                'likeCount' => $likeCount,
                'comments' => $comments,
                'userLiked' => $userLiked,
            ];
        }

        $globalVars = $this->addGlobalVariables($entityManager, $request);
        
        return $this->render('social/social.html.twig', array_merge([
            'posts' => $postsData,
        ], $globalVars));
    }

    #[Route('/add-post', name: 'app_social_add_post', methods: ['GET', 'POST'])]
    public function addPost(
        Request $request,
        EntityManagerInterface $entityManager,
        UsersRepository $usersRepository
    ): Response {
        // VÃ©rifier si l'utilisateur est connectÃ©
        $session = $request->getSession();
        $userSession = $session->get('user');
        
        if (!$userSession) {
            // Rediriger vers la page de connexion si l'utilisateur n'est pas connectÃ©
            return $this->redirectToRoute('app_login');
        }
        
        // RÃ©cupÃ©rer l'utilisateur depuis la base de donnÃ©es
        $user = $entityManager->getRepository(\App\Entity\Users::class)->find($userSession->getId());
        
        if (!$user) {
            $this->addFlash('error', 'Utilisateur non trouvÃ©');
            $session->remove('user');
            return $this->redirectToRoute('app_login');
        }
        
        if ($request->isMethod('POST')) {

            $content = $request->request->get('content');
            $imageFile = $request->files->get('image_file');

            if (empty($content)) {
                $this->addFlash('error', 'Le contenu du post ne peut pas Ãªtre vide');
                return $this->redirectToRoute('app_social');
            }

            $post = new FeedPosts();
            $post->setUserId($user);
            $post->setContent($content);
            $post->setTimeStamp((new \DateTime())->format('Y-m-d H:i:s'));       
            $post->setCreatedAt((new \DateTime())->format('Y-m-d H:i:s'));
            $post->setUpdatedAt((new \DateTime())->format('Y-m-d H:i:s'));
            $post->setScorePopularite(0);
            $post->setIsDeleted(0);

            if ($imageFile) {
                $uploadsDirectory = $this->getParameter('kernel.project_dir') . '/public/uploads/images';
                $newFilename = uniqid() . '.' . $imageFile->guessExtension();
                $imageFile->move($uploadsDirectory, $newFilename);
                $post->setImagePath('/uploads/images/' . $newFilename);
            }

            $entityManager->persist($post);
            $entityManager->flush();

            $this->addFlash('success', 'Post ajoutÃ© avec succÃ¨s');
            return $this->redirectToRoute('app_social');
        }

        return $this->render('social/add_post.html.twig');
    }

    #[Route('/like/{id}', name: 'app_social_like_post', methods: ['POST'])]
    public function likePost(
        Request $request,
        FeedPostsRepository $feedPostsRepository,
        LikesRepository $likesRepository,
        EntityManagerInterface $entityManager,
        UsersRepository $usersRepository
    ): Response {
        // VÃ©rifier si l'utilisateur est connectÃ©
        $session = $request->getSession();
        $userSession = $session->get('user');
        
        if (!$userSession) {
            // Rediriger vers la page de connexion si l'utilisateur n'est pas connectÃ©
            return $this->redirectToRoute('app_login');
        }
        
        $postId = $request->attributes->get('id');
        $post = $feedPostsRepository->find($postId);
        
        if (!$post) {
            $this->addFlash('error', 'Post non trouvÃ©');
            return $this->redirectToRoute('app_social');
        }
        
        // RÃ©cupÃ©rer l'utilisateur depuis la base de donnÃ©es
        $currentUser = $entityManager->getRepository(\App\Entity\Users::class)->find($userSession->getId());
        
        if (!$currentUser) {
            $this->addFlash('error', 'Utilisateur non trouvÃ©');
            $session->remove('user');
            return $this->redirectToRoute('app_login');
        }

        $existingLike = $likesRepository->findOneBy(['postId' => $post, 'user_id' => $currentUser]);
        if ($existingLike) {
            $entityManager->remove($existingLike);
            $this->addFlash('success', 'Vous avez retirÃ© votre like');
        } else {
            $like = new Likes();
            $like->setPostId($post);
            $like->setUserId($currentUser);
            $like->setTimeStamp((new \DateTime())->format('Y-m-d H:i:s'));
            $entityManager->persist($like);
            $this->addFlash('success', 'Vous avez aimÃ© ce post');
        }

        $entityManager->flush();
        return $this->redirectToRoute('app_social');
    }

    #[Route('/comment/{id}', name: 'app_social_add_comment', methods: ['POST'])]
    public function addComment(
        Request $request,
        FeedPostsRepository $feedPostsRepository,
        EntityManagerInterface $entityManager,
        UsersRepository $usersRepository
    ): Response {
        // VÃ©rifier si l'utilisateur est connectÃ©
        $session = $request->getSession();
        $userSession = $session->get('user');
        
        if (!$userSession) {
            // Rediriger vers la page de connexion si l'utilisateur n'est pas connectÃ©
            return $this->redirectToRoute('app_login');
        }
        
        $postId = $request->attributes->get('id');
        $post = $feedPostsRepository->find($postId);
        
        if (!$post) {
            $this->addFlash('error', 'Post non trouvÃ©');
            return $this->redirectToRoute('app_social');
        }
        
        // RÃ©cupÃ©rer l'utilisateur depuis la base de donnÃ©es
        $currentUser = $entityManager->getRepository(\App\Entity\Users::class)->find($userSession->getId());
        
        if (!$currentUser) {
            $this->addFlash('error', 'Utilisateur non trouvÃ©');
            $session->remove('user');
            return $this->redirectToRoute('app_login');
        }

        $content = $request->request->get('content');
        if (empty($content)) {
            $this->addFlash('error', 'Le commentaire ne peut pas Ãªtre vide');
            return $this->redirectToRoute('app_social');
        }

        $comment = new Comments();
        $comment->setPostId($post);
        $comment->setUserId($currentUser);
        $comment->setContent($content);
        $comment->setTimeStamp((new \DateTime())->format('Y-m-d H:i:s'));
        $comment->setIsDeleted(0);

        $entityManager->persist($comment);
        $entityManager->flush();

        $this->addFlash('success', 'Commentaire ajoutÃ© avec succÃ¨s');
        return $this->redirectToRoute('app_social');
    }
    
   

    /**
     * Recherche des utilisateurs et des groupes
     */
    #[Route('/search', name: 'app_social_search', methods: ['GET'])]
    public function search(
        Request $request,
        UsersRepository $usersRepository,
        UserGroupsRepository $userGroupsRepository
    ): Response {
        $searchTerm = $request->query->get('search', '');
        
        if (empty($searchTerm)) {
            return $this->render('social/search_results.html.twig', [
                'results' => ['searchTerm' => $searchTerm]
            ]);
        }
        
        $users = $usersRepository->searchUsers($searchTerm);
        $groups = $userGroupsRepository->searchGroups($searchTerm);
        
        return $this->render('social/search_results.html.twig', [
            'results' => [
                'searchTerm' => $searchTerm,
                'users' => $users,
                'groups' => $groups
            ]
        ]);
    }
    
    /**
     * Recherche AJAX pour l'autocomplÃ©tion (sans API)
     */
    #[Route('/search-ajax', name: 'app_social_search_ajax', methods: ['GET'])]
    public function searchAjax(
        Request $request,
        UsersRepository $usersRepository,
        UserGroupsRepository $userGroupsRepository
    ): JsonResponse {
        $searchTerm = $request->query->get('search', '');
        $results = [];
        
        if (strlen($searchTerm) >= 2) {
            $users = $usersRepository->searchUsers($searchTerm);
            $groups = $userGroupsRepository->searchGroups($searchTerm);
            
            foreach ($users as $user) {
                $results['users'][] = [
                    'id' => $user->getId(),
                    'username' => $user->getUsername(),
                    'email' => $user->getEmail(),
                    'type' => 'user'
                ];
            }
            
            foreach ($groups as $group) {
                $results['groups'][] = [
                    'id' => $group->getId(),
                    'name' => $group->getName(),
                    'description' => $group->getDescription() ?? '',
                    'type' => 'group'
                ];
            }
        }
        
        return new JsonResponse($results);
    }

    /**
     * Affiche un post individuel (nÃ©cessaire pour le partage)
     */
    #[Route('/post/{id}', name: 'app_social_view_post')]
    public function viewPost(
        Request $request,
        int $id,
        FeedPostsRepository $feedPostsRepository,
        LikesRepository $likesRepository,
        CommentsRepository $commentsRepository,
        SharesRepository $sharesRepository,
        UsersRepository $usersRepository,
        EntityManagerInterface $entityManager
    ): Response {
        // VÃ©rifier si l'utilisateur est connectÃ©
        $session = $request->getSession();
        $userSession = $session->get('user');
        
        if (!$userSession) {
            // Rediriger vers la page de connexion si l'utilisateur n'est pas connectÃ©
            return $this->redirectToRoute('app_login');
        }
        
        $post = $feedPostsRepository->find($id);
        
        if (!$post || $post->getIsDeleted()) {
            $this->addFlash('error', 'Post non trouvÃ©');
            return $this->redirectToRoute('app_social');
        }
        
        // RÃ©cupÃ©rer l'utilisateur depuis la base de donnÃ©es
        $currentUser = $entityManager->getRepository(\App\Entity\Users::class)->find($userSession->getId());
        
        $likes = $likesRepository->findBy(['postId' => $post]);
        $likeCount = count($likes);
        $userLiked = $likesRepository->findOneBy(['postId' => $post, 'user_id' => $currentUser]) !== null;
        $comments = $commentsRepository->findBy(['postId' => $post, 'isDeleted' => 0], ['timeStamp' => 'DESC']);
        $shares = $sharesRepository->findBy(['postId' => $post]);
        $shareCount = count($shares);
        $userShared = $sharesRepository->findOneBy(['postId' => $post, 'user_id' => $currentUser]) !== null;
        
        $postData = [
            'post' => $post,
            'user' => $post->getUserId(),
            'likeCount' => $likeCount,
            'comments' => $comments,
            'userLiked' => $userLiked,
            'shareCount' => $shareCount,
            'userShared' => $userShared,
        ];
        
        // Ajouter les variables globales
        $globalVars = $this->addGlobalVariables($entityManager, $request);
        
        return $this->render('social/view_post.html.twig', array_merge([
            'posts' => [$postData],
        ], $globalVars));
    }
    
    // La mÃ©thode de partage interne a Ã©tÃ© supprimÃ©e
    // Seul le partage externe sur les rÃ©seaux sociaux est maintenant disponible
    
    /**
     * Permet Ã  l'utilisateur de modifier son propre post
     */
    #[Route('/edit-post/{id}', name: 'app_social_edit_post', methods: ['GET', 'POST'])]
    public function editPost(
        Request $request,
        int $id,
        FeedPostsRepository $feedPostsRepository,
        EntityManagerInterface $entityManager
    ): Response {
        // VÃ©rifier si l'utilisateur est connectÃ©
        $session = $request->getSession();
        $userSession = $session->get('user');
        
        if (!$userSession) {
            // Rediriger vers la page de connexion si l'utilisateur n'est pas connectÃ©
            return $this->redirectToRoute('app_login');
        }
        
        // RÃ©cupÃ©rer l'utilisateur depuis la base de donnÃ©es
        $currentUser = $entityManager->getRepository(\App\Entity\Users::class)->find($userSession->getId());
        
        if (!$currentUser) {
            $this->addFlash('error', 'Utilisateur non trouvÃ©');
            $session->remove('user');
            return $this->redirectToRoute('app_login');
        }
        
        $post = $feedPostsRepository->find($id);
        
        if (!$post) {
            $this->addFlash('error', 'Post non trouvÃ©');
            return $this->redirectToRoute('app_social');
        }
        
        // VÃ©rifier si l'utilisateur est l'auteur du post
        if ($post->getUserId()->getId() !== $currentUser->getId()) {
            $this->addFlash('error', 'Vous ne pouvez pas modifier ce post car vous n\'en Ãªtes pas l\'auteur');
            return $this->redirectToRoute('app_social');
        }
        
        if ($request->isMethod('POST')) {
            $content = $request->request->get('content');
            $imageFile = $request->files->get('image_file');
            
            if (empty($content)) {
                $this->addFlash('error', 'Le contenu du post ne peut pas Ãªtre vide');
                return $this->render('social/edit_post.html.twig', [
                    'post' => $post,
                ]);
            }
            
            $post->setContent($content);
            $post->setUpdatedAt((new \DateTime())->format('Y-m-d H:i:s'));
            
            if ($imageFile) {
                // Supprimer l'ancienne image si elle existe
                if ($post->getImagePath()) {
                    $oldImagePath = $this->getParameter('kernel.project_dir') . '/public' . $post->getImagePath();
                    if (file_exists($oldImagePath)) {
                        unlink($oldImagePath);
                    }
                }
                
                $uploadsDirectory = $this->getParameter('kernel.project_dir') . '/public/uploads/images';
                $newFilename = uniqid() . '.' . $imageFile->guessExtension();
                $imageFile->move($uploadsDirectory, $newFilename);
                $post->setImagePath('/uploads/images/' . $newFilename);
            }
            
            $entityManager->flush();
            
            $this->addFlash('success', 'Post modifiÃ© avec succÃ¨s');
            return $this->redirectToRoute('app_social');
        }
        
        // Ajouter les variables globales
        $globalVars = $this->addGlobalVariables($entityManager, $request);
        
        return $this->render('social/edit_post.html.twig', array_merge([
            'post' => $post,
        ], $globalVars));
    }
    
    /**
     * Permet Ã  l'utilisateur de supprimer son propre post
     */
    #[Route('/delete-post/{id}', name: 'app_social_delete_post', methods: ['POST'])]
    public function deletePost(
        Request $request,
        int $id,
        FeedPostsRepository $feedPostsRepository,
        EntityManagerInterface $entityManager
    ): Response {
        // VÃ©rifier si l'utilisateur est connectÃ©
        $session = $request->getSession();
        $userSession = $session->get('user');
        
        if (!$userSession) {
            // Rediriger vers la page de connexion si l'utilisateur n'est pas connectÃ©
            return $this->redirectToRoute('app_login');
        }
        
        // RÃ©cupÃ©rer l'utilisateur depuis la base de donnÃ©es
        $currentUser = $entityManager->getRepository(\App\Entity\Users::class)->find($userSession->getId());
        
        if (!$currentUser) {
            $this->addFlash('error', 'Utilisateur non trouvÃ©');
            $session->remove('user');
            return $this->redirectToRoute('app_login');
        }
        
        $post = $feedPostsRepository->find($id);
        
        if (!$post) {
            $this->addFlash('error', 'Post non trouvÃ©');
            return $this->redirectToRoute('app_social');
        }
        
        // VÃ©rifier si l'utilisateur est l'auteur du post
        if ($post->getUserId()->getId() !== $currentUser->getId()) {
            $this->addFlash('error', 'Vous ne pouvez pas supprimer ce post car vous n\'en Ãªtes pas l\'auteur');
            return $this->redirectToRoute('app_social');
        }
        
        // Marquer le post comme supprimÃ© au lieu de le supprimer physiquement
        $post->setIsDeleted(1);
        $entityManager->flush();
        
        $this->addFlash('success', 'Post supprimÃ© avec succÃ¨s');
        return $this->redirectToRoute('app_social');
    }
    
    /**
     * Affiche le profil d'un utilisateur avec ses publications
     */
    #[Route('/user/{id}', name: 'app_social_user_profile')]
    public function userProfile(
        Request $request,
        int $id,
        UsersRepository $usersRepository,
        FeedPostsRepository $feedPostsRepository,
        LikesRepository $likesRepository,
        CommentsRepository $commentsRepository,
        EntityManagerInterface $entityManager,
        UserFollowersRepository $userFollowersRepository
    ): Response {
        // VÃ©rifier si l'utilisateur est connectÃ©
        $session = $request->getSession();
        $userSession = $session->get('user');
        $currentUser = null;
        $followStatus = null;
        
        if ($userSession) {
            $currentUser = $entityManager->getRepository(\App\Entity\Users::class)->find($userSession->getId());
        }
        
        $user = $usersRepository->find($id);
        
        if (!$user) {
            $this->addFlash('error', 'Utilisateur non trouvÃ©');
            return $this->redirectToRoute('app_social');
        }
        
        // RÃ©cupÃ©rer le statut de suivi si l'utilisateur est connectÃ©
        if ($currentUser) {
            $followStatus = $userFollowersRepository->findOneBy([
                'follower' => $currentUser,
                'followed' => $user
            ]);
        }
        
        // RÃ©cupÃ©rer les publications de l'utilisateur
        $userPosts = $feedPostsRepository->findBy(['userId' => $user, 'isDeleted' => 0], ['timeStamp' => 'DESC']);
        $postsData = [];
        
        foreach ($userPosts as $post) {
            $likes = $likesRepository->findBy(['postId' => $post]);
            $likeCount = count($likes);
            $userLiked = $currentUser ? $likesRepository->findOneBy(['postId' => $post, 'user_id' => $currentUser]) !== null : false;
            $comments = $commentsRepository->findBy(['postId' => $post, 'isDeleted' => 0], ['timeStamp' => 'DESC']);
            
            $postsData[] = [
                'post' => $post,
                'user' => $post->getUserId(),
                'likeCount' => $likeCount,
                'comments' => $comments,
                'userLiked' => $userLiked,
            ];
        }
        
        // Ajouter les variables globales
        $globalVars = $this->addGlobalVariables($entityManager, $request);
        
        return $this->render('social/user_profile.html.twig', array_merge([
            'user' => $user,
            'posts' => $postsData,
            'currentUser' => $currentUser,
            'followStatus' => $followStatus
        ], $globalVars));
    }
    
    /**
     * Affiche le profil d'un groupe avec ses publications
     */
    #[Route('/group/{id}', name: 'app_social_group_profile')]
    public function groupProfile(
        int $id,
        Request $request,
        EntityManagerInterface $entityManager,
        UserGroupsRepository $userGroupsRepository,
        GroupFeedPostsRepository $groupFeedPostsRepository,
        UsersRepository $usersRepository,
        LikesRepository $likesRepository,
        CommentsRepository $commentsRepository,
        GroupMembersRepository $groupMembersRepository
    ): Response {
        $group = $userGroupsRepository->find($id);
        
        if (!$group) {
            $this->addFlash('error', 'Groupe non trouvÃ©');
            return $this->redirectToRoute('app_social');
        }
        
        // RÃ©cupÃ©rer l'utilisateur connectÃ©
        $session = $request->getSession();
        $userSession = $session->get('user');
        $currentUser = null;
        $isMember = false;
        $isPending = false;
        
        if ($userSession) {
            $currentUser = $entityManager->getRepository(\App\Entity\Users::class)->find($userSession->getId());
            
            // VÃ©rifier si l'utilisateur est membre du groupe ou a une demande en attente
            if ($currentUser) {
                $membership = $groupMembersRepository->findOneBy(['group_it' => $group, 'user_id' => $currentUser]);
                if ($membership) {
                    if ($membership->isAccepted()) {
                        $isMember = true;
                    } elseif ($membership->isPending()) {
                        $isPending = true;
                    }
                }
            }
        } else {
            // Si l'utilisateur n'est pas connectÃ©, rediriger vers la page de connexion
            return $this->redirectToRoute('app_login');
        }
        
        // RÃ©cupÃ©rer les publications du groupe
        $groupPosts = $groupFeedPostsRepository->findBy(['group' => $group, 'is_deleted' => 0], ['timestamp' => 'DESC']);
        $postsData = [];
        
        foreach ($groupPosts as $post) {
            $likes = $likesRepository->findBy(['postId' => $post]);
            $likeCount = count($likes);
            $userLiked = $likesRepository->findOneBy(['postId' => $post, 'user_id' => $currentUser]) !== null;
            $comments = $commentsRepository->findBy(['postId' => $post, 'isDeleted' => 0], ['timeStamp' => 'DESC']);
            
            $postsData[] = [
                'post' => $post,
                'user' => $post->getUserId(),
                'likeCount' => $likeCount,
                'comments' => $comments,
                'userLiked' => $userLiked,
            ];
        }
        
        return $this->render('social/group_profile.html.twig', [
            'group' => $group,
            'posts' => $postsData,
            'currentUser' => $currentUser,
            'isMember' => $isMember,
            'isPending' => $isPending
        ]);
    }
    
    /**
     * Ajoute un post dans un groupe
     */
    #[Route('/group/{id}/add-post', name: 'app_social_group_add_post', methods: ['POST'])]
    public function addGroupPost(
        int $id,
        Request $request,
        EntityManagerInterface $entityManager,
        UserGroupsRepository $userGroupsRepository,
        UsersRepository $usersRepository
    ): Response {
        $group = $userGroupsRepository->find($id);
        
        if (!$group) {
            $this->addFlash('error', 'Groupe non trouvÃ©');
            return $this->redirectToRoute('app_social');
        }
        
        // VÃ©rifier si l'utilisateur est connectÃ©
        $session = $request->getSession();
        $userSession = $session->get('user');
        
        if (!$userSession) {
            // Rediriger vers la page de connexion si l'utilisateur n'est pas connectÃ©
            $this->addFlash('error', 'Utilisateur non connectÃ©');
            return $this->redirectToRoute('app_login');
        }
        
        // RÃ©cupÃ©rer l'utilisateur depuis la base de donnÃ©es
        $user = $entityManager->getRepository(\App\Entity\Users::class)->find($userSession->getId());
        
        if (!$user) {
            $this->addFlash('error', 'Utilisateur non trouvÃ©');
            $session->remove('user');
            return $this->redirectToRoute('app_login');
        }

        $content = $request->request->get('content');
        $imageFile = $request->files->get('image_file');

        if (empty($content)) {
            $this->addFlash('error', 'Le contenu du post ne peut pas Ãªtre vide');
            return $this->redirectToRoute('app_social_group_profile', ['id' => $id]);
        }

        $post = new GroupFeedPosts();
        $post->setGroupId($group);
        $post->setUserId($user);
        $post->setContent($content);
        $post->setTimestamp((new \DateTime())->format('Y-m-d H:i:s'));
        $post->setIsDeleted(0);

        if ($imageFile) {
            $uploadsDirectory = $this->getParameter('kernel.project_dir') . '/public/uploads/images';
            $newFilename = uniqid() . '.' . $imageFile->guessExtension();
            $imageFile->move($uploadsDirectory, $newFilename);
            $post->setMediaUrl('/uploads/images/' . $newFilename);
        } else {
            $post->setMediaUrl('');
        }

        $entityManager->persist($post);
        $entityManager->flush();

        $this->addFlash('success', 'Post ajoutÃ© au groupe avec succÃ¨s');
        return $this->redirectToRoute('app_social_group_profile', ['id' => $id]);
    }
    
    /**
     * Permet Ã  un utilisateur de rejoindre un groupe
     */
    #[Route('/group/{id}/join', name: 'app_social_join_group', methods: ['POST'])]
    public function joinGroup(
        int $id,
        Request $request,
        EntityManagerInterface $entityManager,
        UserGroupsRepository $userGroupsRepository,
        UsersRepository $usersRepository,
        GroupMembersRepository $groupMembersRepository
    ): Response {
        $group = $userGroupsRepository->find($id);
        
        if (!$group) {
            $this->addFlash('error', 'Groupe non trouvÃ©');
            return $this->redirectToRoute('app_social');
        }
        
        // VÃ©rifier si l'utilisateur est connectÃ©
        $session = $request->getSession();
        $userSession = $session->get('user');
        
        if (!$userSession) {
            // Rediriger vers la page de connexion si l'utilisateur n'est pas connectÃ©
            $this->addFlash('error', 'Utilisateur non connectÃ©');
            return $this->redirectToRoute('app_login');
        }
        
        // RÃ©cupÃ©rer l'utilisateur depuis la base de donnÃ©es
        $user = $entityManager->getRepository(\App\Entity\Users::class)->find($userSession->getId());
        
        if (!$user) {
            $this->addFlash('error', 'Utilisateur non trouvÃ©');
            $session->remove('user');
            return $this->redirectToRoute('app_login');
        }

        // VÃ©rifier si l'utilisateur est dÃ©jÃ  membre du groupe ou a une demande en attente
        $existingMembership = $groupMembersRepository->findOneBy(['group_it' => $group, 'user_id' => $user]);
        if ($existingMembership) {
            if ($existingMembership->isPending()) {
                $this->addFlash('info', 'Votre demande d\'adhÃ©sion Ã  ce groupe est en attente d\'approbation');
            } else if ($existingMembership->isAccepted()) {
                $this->addFlash('info', 'Vous Ãªtes dÃ©jÃ  membre de ce groupe');
            } else {
                $this->addFlash('info', 'Votre demande prÃ©cÃ©dente a Ã©tÃ© refusÃ©e');
            }
            return $this->redirectToRoute('app_social_group_profile', ['id' => $id]);
        }

        // CrÃ©er une demande d'adhÃ©sion au groupe
        $membership = new GroupMembers();
        $membership->setGroupIt($group);
        $membership->setUserId($user);
        $membership->setRole('member'); // RÃ´le par dÃ©faut
        $membership->setStatus(GroupMembers::STATUS_PENDING); // DÃ©finir le statut comme en attente
        $membership->setCreatedAt((new \DateTime())->format('Y-m-d H:i:s'));

        $entityManager->persist($membership);
        $entityManager->flush();

        $this->addFlash('success', 'Votre demande d\'adhÃ©sion au groupe a Ã©tÃ© envoyÃ©e avec succÃ¨s');
        return $this->redirectToRoute('app_social_group_profile', ['id' => $id]);
    }
    
    /**
     * Permet Ã  un utilisateur de quitter un groupe
     */
    #[Route('/group/{id}/leave', name: 'app_social_leave_group', methods: ['POST'])]
    public function leaveGroup(
        int $id,
        Request $request,
        EntityManagerInterface $entityManager,
        UserGroupsRepository $userGroupsRepository,
        GroupMembersRepository $groupMembersRepository
    ): Response {
        $group = $userGroupsRepository->find($id);
        
        if (!$group) {
            $this->addFlash('error', 'Groupe non trouvÃ©');
            return $this->redirectToRoute('app_social');
        }
        
        // VÃ©rifier si l'utilisateur est connectÃ©
        $session = $request->getSession();
        $userSession = $session->get('user');
        
        if (!$userSession) {
            $this->addFlash('error', 'Utilisateur non connectÃ©');
            return $this->redirectToRoute('app_login');
        }
        
        // RÃ©cupÃ©rer l'utilisateur depuis la base de donnÃ©es
        $user = $entityManager->getRepository(\App\Entity\Users::class)->find($userSession->getId());
        
        if (!$user) {
            $this->addFlash('error', 'Utilisateur non trouvÃ©');
            $session->remove('user');
            return $this->redirectToRoute('app_login');
        }

        // VÃ©rifier si l'utilisateur est le crÃ©ateur du groupe
        if ($group->getCreatorId()->getId() === $user->getId()) {
            $this->addFlash('error', 'Le crÃ©ateur du groupe ne peut pas quitter le groupe');
            return $this->redirectToRoute('app_social_group_profile', ['id' => $id]);
        }
        
        // VÃ©rifier si l'utilisateur est membre du groupe
        $membership = $groupMembersRepository->findOneBy(['group_it' => $group, 'user_id' => $user]);
        
        if (!$membership || !$membership->isAccepted()) {
            $this->addFlash('error', 'Vous n\'Ãªtes pas membre de ce groupe');
            return $this->redirectToRoute('app_social_group_profile', ['id' => $id]);
        }
        
        // Supprimer l'adhÃ©sion au groupe
        $entityManager->remove($membership);
        $entityManager->flush();
        
        $this->addFlash('success', 'Vous avez quittÃ© le groupe avec succÃ¨s');
        return $this->redirectToRoute('app_social_group_profile', ['id' => $id]);
    }
    
    /**
     * Permet Ã  un utilisateur d'annuler sa demande d'adhÃ©sion Ã  un groupe
     */
    #[Route('/group/{id}/cancel-join', name: 'app_social_cancel_join_group', methods: ['POST'])]
    public function cancelJoinGroup(
        int $id,
        Request $request,
        EntityManagerInterface $entityManager,
        UserGroupsRepository $userGroupsRepository,
        GroupMembersRepository $groupMembersRepository
    ): Response {
        $group = $userGroupsRepository->find($id);
        
        if (!$group) {
            $this->addFlash('error', 'Groupe non trouvÃ©');
            return $this->redirectToRoute('app_social');
        }
        
        // VÃ©rifier si l'utilisateur est connectÃ©
        $session = $request->getSession();
        $userSession = $session->get('user');
        
        if (!$userSession) {
            $this->addFlash('error', 'Utilisateur non connectÃ©');
            return $this->redirectToRoute('app_login');
        }
        
        // RÃ©cupÃ©rer l'utilisateur depuis la base de donnÃ©es
        $user = $entityManager->getRepository(\App\Entity\Users::class)->find($userSession->getId());
        
        if (!$user) {
            $this->addFlash('error', 'Utilisateur non trouvÃ©');
            $session->remove('user');
            return $this->redirectToRoute('app_login');
        }
        
        // VÃ©rifier si l'utilisateur a une demande en attente
        $membership = $groupMembersRepository->findOneBy(['group_it' => $group, 'user_id' => $user]);
        
        if (!$membership || !$membership->isPending()) {
            $this->addFlash('error', 'Vous n\'avez pas de demande d\'adhÃ©sion en attente pour ce groupe');
            return $this->redirectToRoute('app_social_group_profile', ['id' => $id]);
        }
        
        // Supprimer la demande d'adhÃ©sion
        $entityManager->remove($membership);
        $entityManager->flush();
        
        $this->addFlash('success', 'Votre demande d\'adhÃ©sion a Ã©tÃ© annulÃ©e avec succÃ¨s');
        return $this->redirectToRoute('app_social_group_profile', ['id' => $id]);
    }

    /**
     * Permet Ã  un utilisateur d'envoyer une demande pour suivre un autre utilisateur
     */
    #[Route('/user/{id}/follow', name: 'app_social_follow_user', methods: ['POST'])]
    public function followUser(
        int $id,
        Request $request,
        EntityManagerInterface $entityManager,
        UsersRepository $usersRepository,
        UserFollowersRepository $userFollowersRepository
    ): Response {
        $userToFollow = $usersRepository->find($id);
        $isAjax = $request->headers->get('X-Requested-With') === 'XMLHttpRequest';
        
        if (!$userToFollow) {
            if ($isAjax) {
                return $this->json(['success' => false, 'message' => 'Utilisateur non trouvÃ©'], 404);
            }
            $this->addFlash('error', 'Utilisateur non trouvÃ©');
            return $this->redirectToRoute('app_social');
        }
        
        // VÃ©rifier si l'utilisateur est connectÃ©
        $session = $request->getSession();
        $userSession = $session->get('user');
        
        if (!$userSession) {
            if ($isAjax) {
                return $this->json(['success' => false, 'message' => 'Utilisateur non connectÃ©'], 401);
            }
            // Rediriger vers la page de connexion si l'utilisateur n'est pas connectÃ©
            $this->addFlash('error', 'Utilisateur non connectÃ©');
            return $this->redirectToRoute('app_login');
        }
        
        // RÃ©cupÃ©rer l'utilisateur depuis la base de donnÃ©es
        $currentUser = $entityManager->getRepository(\App\Entity\Users::class)->find($userSession->getId());
        
        if (!$currentUser) {
            if ($isAjax) {
                return $this->json(['success' => false, 'message' => 'Utilisateur non trouvÃ©'], 404);
            }
            $this->addFlash('error', 'Utilisateur non trouvÃ©');
            $session->remove('user');
            return $this->redirectToRoute('app_login');
        }

        // VÃ©rifier si l'utilisateur se suit lui-mÃªme
        if ($currentUser->getId() === $userToFollow->getId()) {
            if ($isAjax) {
                return $this->json(['success' => false, 'message' => 'Vous ne pouvez pas vous suivre vous-mÃªme'], 400);
            }
            $this->addFlash('error', 'Vous ne pouvez pas vous suivre vous-mÃªme');
            return $this->redirectToRoute('app_social_user_profile', ['id' => $id]);
        }

        // VÃ©rifier si l'utilisateur suit dÃ©jÃ  cet utilisateur ou a une demande en cours
        $existingFollow = $userFollowersRepository->findOneBy(['follower' => $currentUser, 'followed' => $userToFollow]);
        $message = '';
        $status = '';
        
        if ($existingFollow) {
            // Si dÃ©jÃ  suivi ou demande en cours, on annule
            $entityManager->remove($existingFollow);
            $entityManager->flush();
            
            if ($existingFollow->isAccepted()) {
                $message = 'Vous ne suivez plus cet utilisateur';
                $status = 'unfollowed';
            } else if ($existingFollow->isPending()) {
                $message = 'Votre demande a Ã©tÃ© annulÃ©e';
                $status = 'cancelled';
            }
        } else {
            // Sinon, on crÃ©e une demande en attente
            $follow = new UserFollowers();
            $follow->setFollower($currentUser);
            $follow->setFollowed($userToFollow);
            $follow->setCreatedAt((new \DateTime())->format('Y-m-d H:i:s'));
            $follow->setStatus(UserFollowers::STATUS_PENDING);
            
            $entityManager->persist($follow);
            $entityManager->flush();
            $message = 'Votre demande pour suivre cet utilisateur a Ã©tÃ© envoyÃ©e';
            $status = 'pending';
        }
        
        if ($isAjax) {
            return $this->json([
                'success' => true, 
                'message' => $message,
                'status' => $status
            ]);
        }
        
        $this->addFlash('success', $message);
        return $this->redirectToRoute('app_social_user_profile', ['id' => $id]);
    }
    
    /**
     * Permet Ã  un utilisateur d'accepter ou de refuser une demande de suivi
     */
    #[Route('/follow-request/{id}/{action}', name: 'app_social_follow_request', methods: ['GET', 'POST'])]
    public function handleFollowRequest(
        int $id,
        string $action,
        Request $request,
        EntityManagerInterface $entityManager,
        UserFollowersRepository $userFollowersRepository,
        UsersRepository $usersRepository
    ): Response {
        $followRequest = $userFollowersRepository->find($id);
        
        if (!$followRequest) {
            $this->addFlash('error', 'Demande non trouvÃ©e');
            return $this->redirectToRoute('app_social');
        }
        
        // VÃ©rifier si l'utilisateur est connectÃ©
        $session = $request->getSession();
        $userSession = $session->get('user');
        
        if (!$userSession) {
            // Rediriger vers la page de connexion si l'utilisateur n'est pas connectÃ©
            $this->addFlash('error', 'Utilisateur non connectÃ©');
            return $this->redirectToRoute('app_login');
        }
        
        // RÃ©cupÃ©rer l'utilisateur depuis la base de donnÃ©es
        $currentUser = $entityManager->getRepository(\App\Entity\Users::class)->find($userSession->getId());
        
        if (!$currentUser) {
            $this->addFlash('error', 'Utilisateur non trouvÃ©');
            $session->remove('user');
            return $this->redirectToRoute('app_login');
        }
        
        // VÃ©rifier que la demande concerne bien l'utilisateur connectÃ©
        if ($followRequest->getFollowed()->getId() !== $currentUser->getId()) {
            $this->addFlash('error', 'Vous n\'Ãªtes pas autorisÃ© Ã  gÃ©rer cette demande');
            return $this->redirectToRoute('app_social');
        }
        
        // VÃ©rifier que la demande est en attente
        if (!$followRequest->isPending()) {
            $this->addFlash('error', 'Cette demande a dÃ©jÃ  Ã©tÃ© traitÃ©e');
            return $this->redirectToRoute('app_social');
        }
        
        $follower = $followRequest->getFollower();
        $followed = $followRequest->getFollowed();
        
        if ($action === 'accept') {
            $followRequest->setStatus(UserFollowers::STATUS_ACCEPTED);
            $entityManager->flush();
            
            // CrÃ©er une notification pour l'utilisateur
            $notification = new Notification();
            $notification->setUser($follower);
            $notification->setType(Notification::TYPE_FOLLOW_REQUEST_ACCEPTED);
            $notification->setMessage("Votre demande pour suivre {$followed->getUsername()} a Ã©tÃ© acceptÃ©e");
            $notification->setCreatedAt((new \DateTime())->format('Y-m-d H:i:s'));
            $notification->setLink('/social/user/' . $followed->getId());
            
            $entityManager->persist($notification);
            $entityManager->flush();
            
            $this->addFlash('success', 'Vous avez acceptÃ© la demande de suivi');
        } else if ($action === 'reject') {
            $followRequest->setStatus(UserFollowers::STATUS_REJECTED);
            $entityManager->flush();
            
            // CrÃ©er une notification pour l'utilisateur
            $notification = new Notification();
            $notification->setUser($follower);
            $notification->setType(Notification::TYPE_FOLLOW_REQUEST_REJECTED);
            $notification->setMessage("Votre demande pour suivre {$followed->getUsername()} a Ã©tÃ© refusÃ©e");
            $notification->setCreatedAt((new \DateTime())->format('Y-m-d H:i:s'));
            
            $entityManager->persist($notification);
            $entityManager->flush();
            
            $this->addFlash('success', 'Vous avez refusÃ© la demande de suivi');
        } else {
            $this->addFlash('error', 'Action non reconnue');
        }
        
        return $this->redirectToRoute('app_social');
    }
    
    /**
     * Affiche les demandes de suivi en attente pour l'utilisateur connectÃ©
     */
    #[Route('/follow-requests', name: 'app_social_follow_requests')]
    public function followRequests(
        Request $request,
        UserFollowersRepository $userFollowersRepository,
        UsersRepository $usersRepository,
        EntityManagerInterface $entityManager
    ): Response {
        // VÃ©rifier si l'utilisateur est connectÃ©
        $session = $request->getSession();
        $userSession = $session->get('user');
        
        if (!$userSession) {
            // Rediriger vers la page de connexion si l'utilisateur n'est pas connectÃ©
            $this->addFlash('error', 'Utilisateur non connectÃ©');
            return $this->redirectToRoute('app_login');
        }
        
        // RÃ©cupÃ©rer l'utilisateur depuis la base de donnÃ©es
        $currentUser = $entityManager->getRepository(\App\Entity\Users::class)->find($userSession->getId());
        
        if (!$currentUser) {
            $this->addFlash('error', 'Utilisateur non trouvÃ©');
            $session->remove('user');
            return $this->redirectToRoute('app_login');
        }
        
        // RÃ©cupÃ©rer les demandes en attente
        $pendingRequests = $userFollowersRepository->findBy([
            'followed' => $currentUser,
            'status' => \App\Entity\UserFollowers::STATUS_PENDING
        ]);
        
        $globalVars = $this->addGlobalVariables($entityManager, $request);
        
        return $this->render('social/follow_requests.html.twig', array_merge([
            'pendingRequests' => $pendingRequests
        ], $globalVars));
    }
    
    /**
     * Affiche les notifications de l'utilisateur connectÃ©
     */
    #[Route('/notifications', name: 'app_social_notifications')]
    public function notifications(
        Request $request,
        EntityManagerInterface $entityManager
    ): Response {
        // VÃ©rifier si l'utilisateur est connectÃ©
        $session = $request->getSession();
        $userSession = $session->get('user');
        
        if (!$userSession) {
            // Rediriger vers la page de connexion si l'utilisateur n'est pas connectÃ©
            $this->addFlash('error', 'Utilisateur non connectÃ©');
            return $this->redirectToRoute('app_login');
        }
        
        // RÃ©cupÃ©rer l'utilisateur depuis la base de donnÃ©es
        $currentUser = $entityManager->getRepository(\App\Entity\Users::class)->find($userSession->getId());
        
        if (!$currentUser) {
            $this->addFlash('error', 'Utilisateur non trouvÃ©');
            $session->remove('user');
            return $this->redirectToRoute('app_login');
        }
        
        // RÃ©cupÃ©rer les notifications de l'utilisateur
        $notificationRepository = $entityManager->getRepository(Notification::class);
        $notifications = $notificationRepository->findBy(
            ['user' => $currentUser],
            ['created_at' => 'DESC']
        );
        
        // Marquer toutes les notifications non lues comme lues
        $unreadNotifications = $notificationRepository->findUnreadByUser($currentUser);
        foreach ($unreadNotifications as $notification) {
            $notification->setIsRead(true);
        }
        $entityManager->flush();
        
        $globalVars = $this->addGlobalVariables($entityManager, $request);
        
        return $this->render('social/notifications.html.twig', array_merge([
            'notifications' => $notifications
        ], $globalVars));
    }
}
</file>

<file path="Entity/Applications.php">
<?php

namespace App\Entity;

use App\Repository\ApplicationsRepository;
use Doctrine\ORM\Mapping as ORM;

#[ORM\Entity(repositoryClass: ApplicationsRepository::class)]
class Applications
{
    #[ORM\Id]
    #[ORM\GeneratedValue]
    #[ORM\Column]
    private ?int $id = null;

    #[ORM\ManyToOne]
    #[ORM\JoinColumn(name: 'user_id_id',referencedColumnName: 'id' ,  nullable: true)]
    private ?Users $user_id_id ;



    #[ORM\ManyToOne]
#[ORM\JoinColumn(name: 'job_id_id', referencedColumnName: 'id', onDelete: 'CASCADE')]
private ?Jobs $job_id_id = null;

    #[ORM\Column(length: 255)]
    private ?string $status = null;

    #[ORM\Column(type: 'datetime', nullable: true)]
    private ?\DateTime $appliedAt = null;

    #[ORM\Column(nullable: true)]
    private ?int $rewarded = null;

    #[ORM\Column(length: 255)]
    private ?string $cover_letter = null;

    #[ORM\Column(length: 255)]
    private ?string $resume_path = null;

    #[ORM\Column(nullable: true)]
    private ?int $coverRating = null;

    public function __construct()
    {
        $this->appliedAt = new \DateTime();
        $this->status = 'pending'; // Default status;
        $this->coverRating = 0; // Default cover rating
    }

    public function getId(): ?int
    {
        return $this->id;
    }

    public function getUserId(): ?Users
    {
        return $this->user_id_id;
    }

    public function setUserId(?Users $user_id_id): static
    {
        $this->user_id_id = $user_id_id;

        return $this;
    }



    public function getJobId(): ?Jobs
    {
        return $this->job_id_id;
    }

    public function setJobId(?Jobs $job_id_id): static
    {
        $this->job_id_id = $job_id_id;

        return $this;
    }

    public function getStatus(): ?string
    {
        return $this->status;
    }

    public function setStatus(string $status): static
    {
        $this->status = $status;

        return $this;
    }

    public function getAppliedAt(): ?\DateTime
    {
        return $this->appliedAt;
    }
    
    public function setAppliedAt(?\DateTime $appliedAt): static
    {
        $this->appliedAt = $appliedAt;
        return $this;
    }

    public function getRewarded(): ?int
    {
        return $this->rewarded;
    }

    public function setRewarded(?int $rewarded): static
    {
        $this->rewarded = $rewarded;

        return $this;
    }

    public function getCoverLetter(): ?string
    {
        return $this->cover_letter;
    }

    public function setCoverLetter(string $cover_letter): static
    {
        $this->cover_letter = $cover_letter;

        return $this;
    }

    public function getResumePath(): ?string
    {
        return $this->resume_path;
    }

    public function setResumePath(string $resume_path): static
    {
        $this->resume_path = $resume_path;

        return $this;
    }

    public function getCoverRating(): ?int
    {
        return $this->coverRating;
    }

    public function setCoverRating(?int $coverRating): static
    {
        $this->coverRating = $coverRating;

        return $this;
    }
}
</file>

<file path="Entity/Category.php">
<?php

namespace App\Entity;

use App\Repository\CategoryRepository;
use Doctrine\ORM\Mapping as ORM;

#[ORM\Entity(repositoryClass: CategoryRepository::class)]
class Category
{
    #[ORM\Id]
    #[ORM\GeneratedValue]
    #[ORM\Column]
    private ?int $id = null;

    #[ORM\Column(length: 255)]
    private ?string $name = null;

    public function getId(): ?int
    {
        return $this->id;
    }

    public function getName(): ?string
    {
        return $this->name;
    }

    public function setName(string $name): static
    {
        $this->name = $name;

        return $this;
    }
}
</file>

<file path="Entity/Comments.php">
<?php

namespace App\Entity;

use App\Repository\CommentsRepository;
use Doctrine\ORM\Mapping as ORM;

#[ORM\Entity(repositoryClass: CommentsRepository::class)]
#[ORM\Table(name: "Comments")]
class Comments
{
    #[ORM\Id]
    #[ORM\GeneratedValue]
    #[ORM\Column]
    private ?int $id = null;

    #[ORM\ManyToOne]
    #[ORM\JoinColumn(name: "post_id", referencedColumnName: "post_id", nullable: false)]
    private ?FeedPosts $postId = null;

    #[ORM\ManyToOne]
    #[ORM\JoinColumn(nullable: false)]
    private ?Users $user_id = null;

    #[ORM\Column(length: 255)]
    private ?string $content = null;

    #[ORM\Column(length: 255)]
    private ?string $timeStamp = null;

    #[ORM\Column(nullable: true)]
    private ?int $isDeleted = null;

    public function getId(): ?int
    {
        return $this->id;
    }

    public function getPostId(): ?FeedPosts
    {
        return $this->postId;
    }

    public function setPostId(?FeedPosts $postId): static
    {
        $this->postId = $postId;

        return $this;
    }

    public function getUserId(): ?Users
    {
        return $this->user_id;
    }

    public function setUserId(?Users $user_id): static
    {
        $this->user_id = $user_id;

        return $this;
    }

    public function getContent(): ?string
    {
        return $this->content;
    }

    public function setContent(string $content): static
    {
        $this->content = $content;

        return $this;
    }

    public function getTimeStamp(): ?string
    {
        return $this->timeStamp;
    }

    public function setTimeStamp(string $timeStamp): static
    {
        $this->timeStamp = $timeStamp;

        return $this;
    }

    public function getIsDeleted(): ?int
    {
        return $this->isDeleted;
    }

    public function setIsDeleted(?int $isDeleted): static
    {
        $this->isDeleted = $isDeleted;

        return $this;
    }
}
</file>

<file path="Entity/Conversion.php">
<?php

namespace App\Entity;

use Doctrine\ORM\Mapping as ORM;

#[ORM\Entity]
#[ORM\Table(name: 'conversion')]
class Conversion
{
    #[ORM\Id]
    #[ORM\GeneratedValue]
    #[ORM\Column(type: 'integer')]
    private ?int $id = null;

    #[ORM\ManyToOne(targetEntity: Users::class, inversedBy: 'conversions')]
    #[ORM\JoinColumn(name: 'user_id_id', referencedColumnName: 'id', nullable: true)]
    private ?Users $userId = null;

    #[ORM\Column(type: 'integer')]
    private int $points_convertis;

    #[ORM\Column(type: 'decimal', precision: 10, scale: 2)]
    private string $montant;

    #[ORM\Column(type: 'string', length: 255)]
    private string $devise;

    #[ORM\Column(type: 'datetime')]
    private \DateTimeInterface $date;

    // Getters et Setters
    public function getId(): ?int
    {
        return $this->id;
    }

    public function getUserId(): ?Users
    {
        return $this->userId;
    }

    public function setUserId(?Users $userId): self
    {
        $this->userId = $userId;
        return $this;
    }

    public function getPointsConvertis(): int
    {
        return $this->points_convertis;
    }

    public function setPointsConvertis(int $points_convertis): self
    {
        $this->points_convertis = $points_convertis;
        return $this;
    }

    public function getMontant(): string
    {
        return $this->montant;
    }

    public function setMontant(string $montant): self
    {
        $this->montant = $montant;
        return $this;
    }

    public function getDevise(): string
    {
        return $this->devise;
    }

    public function setDevise(string $devise): self
    {
        $this->devise = $devise;
        return $this;
    }

    public function getDate(): \DateTimeInterface
    {
        return $this->date;
    }

    public function setDate(\DateTimeInterface $date): self
    {
        $this->date = $date;
        return $this;
    }
}
</file>

<file path="Entity/Events.php">
<?php

namespace App\Entity;

use App\Repository\EventsRepository;
use Doctrine\DBAL\Types\Types;
use Doctrine\ORM\Mapping as ORM;

#[ORM\Entity(repositoryClass: EventsRepository::class)]
class Events
{
    #[ORM\Id]
    #[ORM\GeneratedValue]
    #[ORM\Column]
    private ?int $id = null;

    #[ORM\Column(length: 255)]
    private ?string $name = null;

    #[ORM\Column(length: 255)]
    private ?string $description = null;

    #[ORM\Column(length: 255)]
    private ?string $startTime = null;

    #[ORM\Column(length: 255)]
    private ?string $endTime = null;

    #[ORM\Column(length: 255)]
    private ?string $location = null;

    #[ORM\ManyToOne(inversedBy: 'events')]
    #[ORM\JoinColumn(nullable: false)]
    private ?Users $organizerId = null;

    #[ORM\ManyToOne]
    #[ORM\JoinColumn(nullable: false)]
    private ?Category $categoryId = null;

    #[ORM\Column(type: Types::TEXT)]
    private ?string $image = null;

    #[ORM\Column]
    private ?int $points = null;

    public function getId(): ?int
    {
        return $this->id;
    }

    public function getName(): ?string
    {
        return $this->name;
    }

    public function setName(string $name): static
    {
        $this->name = $name;

        return $this;
    }

    public function getDescription(): ?string
    {
        return $this->description;
    }

    public function setDescription(string $description): static
    {
        $this->description = $description;

        return $this;
    }

    public function getStartTime(): ?string
    {
        return $this->startTime;
    }

    public function setStartTime(string $startTime): static
    {
        $this->startTime = $startTime;

        return $this;
    }

    public function getEndTime(): ?string
    {
        return $this->endTime;
    }

    public function setEndTime(string $endTime): static
    {
        $this->endTime = $endTime;

        return $this;
    }

    public function getLocation(): ?string
    {
        return $this->location;
    }

    public function setLocation(string $location): static
    {
        $this->location = $location;

        return $this;
    }

    public function getOrganizerId(): ?Users
    {
        return $this->organizerId;
    }

    public function setOrganizerId(?Users $organizerId): static
    {
        $this->organizerId = $organizerId;

        return $this;
    }

    public function getCategoryId(): ?Category
    {
        return $this->categoryId;
    }

    public function setCategoryId(?Category $categoryId): static
    {
        $this->categoryId = $categoryId;

        return $this;
    }

    public function getImage(): ?string
    {
        return $this->image;
    }

    public function setImage(string $image): static
    {
        $this->image = $image;

        return $this;
    }

    public function getPoints(): ?int
    {
        return $this->points;
    }

    public function setPoints(int $points): static
    {
        $this->points = $points;

        return $this;
    }
}
</file>

<file path="Entity/FeedPosts.php">
<?php

namespace App\Entity;

use App\Repository\FeedPostsRepository;
use Doctrine\ORM\Mapping as ORM;

#[ORM\Entity(repositoryClass: FeedPostsRepository::class)]
#[ORM\Table(name: "FeedPosts")]
class FeedPosts
{
    #[ORM\Id]
    #[ORM\GeneratedValue]
    #[ORM\Column(name: "post_id", type: "integer")]
    private ?int $postId = null;

    #[ORM\ManyToOne]
    #[ORM\JoinColumn(name: "user_id", referencedColumnName: "id", nullable: false)]
    private ?Users $userId = null;

    #[ORM\Column(length: 255)]
    private ?string $content = null;

    #[ORM\Column(name: "timestamp", type: "string", length: 255)]
    private ?string $timeStamp = null;

    #[ORM\ManyToOne(targetEntity: Events::class)]
    #[ORM\JoinColumn(name: "event_id", referencedColumnName: "id", nullable: true)]
    private ?Events $eventId = null;

    #[ORM\Column(nullable: true)]
    private ?int $isDeleted = null;

    #[ORM\Column(length: 255)]
    private ?string $createdAt = null;

    #[ORM\Column(length: 255)]
    private ?string $updatedAt = null;

    #[ORM\Column(nullable: true)]
    private ?int $scorePopularite = null;

    #[ORM\Column(length: 255)]
    private ?string $imagePath = null;

    #[ORM\Column(nullable: true)]
    private ?int $groupId = null;

    public function getPostId(): ?int
    {
        return $this->postId;
    }

    /**
     * Alias pour la clÃ© primaire 'post_id'.
     * UtilisÃ© pour Ã©viter les erreurs lorsque Doctrine ou Symfony cherche 'id'.
     */
    public function getId(): ?int
    {
        return $this->postId;
    }

    public function getUserId(): ?Users
    {
        return $this->userId;
    }

    public function setUserId(?Users $userId): static
    {
        $this->userId = $userId;

        return $this;
    }

    public function getContent(): ?string
    {
        return $this->content;
    }

    public function setContent(string $content): static
    {
        $this->content = $content;

        return $this;
    }

    public function getTimeStamp(): ?string
    {
        return $this->timeStamp;
    }

    public function setTimeStamp(string $timeStamp): static
    {
        $this->timeStamp = $timeStamp;

        return $this;
    }

    public function getEventId(): ?Events
    {
        return $this->eventId;
    }

    public function setEventId(?Events $eventId): static
    {
        $this->eventId = $eventId;

        return $this;
    }

    public function getIsDeleted(): ?int
    {
        return $this->isDeleted;
    }

    public function setIsDeleted(?int $isDeleted): static
    {
        $this->isDeleted = $isDeleted;

        return $this;
    }

    public function getCreatedAt(): ?string
    {
        return $this->createdAt;
    }

    public function setCreatedAt(string $createdAt): static
    {
        $this->createdAt = $createdAt;

        return $this;
    }

    public function getUpdatedAt(): ?string
    {
        return $this->updatedAt;
    }

    public function setUpdatedAt(string $updatedAt): static
    {
        $this->updatedAt = $updatedAt;

        return $this;
    }

    public function getScorePopularite(): ?int
    {
        return $this->scorePopularite;
    }

    public function setScorePopularite(?int $scorePopularite): static
    {
        $this->scorePopularite = $scorePopularite;

        return $this;
    }

    public function getImagePath(): ?string
    {
        return $this->imagePath;
    }

    public function setImagePath(string $imagePath): static
    {
        $this->imagePath = $imagePath;

        return $this;
    }

    public function getGroupId(): ?int
    {
        return $this->groupId;
    }

    public function setGroupId(?int $groupId): static
    {
        $this->groupId = $groupId;

        return $this;
    }
}
</file>

<file path="Entity/GroupFeedPosts.php">
<?php

namespace App\Entity;

use App\Repository\GroupFeedPostsRepository;
use Doctrine\ORM\Mapping as ORM;

#[ORM\Entity(repositoryClass: GroupFeedPostsRepository::class)]
#[ORM\Table(name: "GroupFeedPosts")]
class GroupFeedPosts
{
    #[ORM\Id]
    #[ORM\GeneratedValue]
    #[ORM\Column(name: "post_id")]
    private ?int $id = null;

    #[ORM\ManyToOne(targetEntity: UserGroups::class)]
    #[ORM\JoinColumn(name: "group_id", referencedColumnName: "id", nullable: false)]
    private ?UserGroups $group = null;

    #[ORM\ManyToOne]
    #[ORM\JoinColumn(name: "user_id", referencedColumnName: "id", nullable: false)]
    private ?Users $user_id = null;

    #[ORM\Column(length: 255)]
    private ?string $content = null;

    #[ORM\Column(length: 255)]
    private ?string $timestamp = null;

    #[ORM\Column(length: 255)]
    private ?string $media_url = null;

    #[ORM\Column(nullable: true)]
    private ?int $is_deleted = null;

    public function getId(): ?int
    {
        return $this->id;
    }

    public function getGroupId(): ?UserGroups
    {
        return $this->group;
    }

    public function setGroupId(?UserGroups $group_id): static
    {
        $this->group = $group_id;

        return $this;
    }

    public function getUserId(): ?Users
    {
        return $this->user_id;
    }

    public function setUserId(?Users $user_id): static
    {
        $this->user_id = $user_id;

        return $this;
    }

    public function getContent(): ?string
    {
        return $this->content;
    }

    public function setContent(string $content): static
    {
        $this->content = $content;

        return $this;
    }

    public function getTimestamp(): ?string
    {
        return $this->timestamp;
    }

    public function setTimestamp(string $timestamp): static
    {
        $this->timestamp = $timestamp;

        return $this;
    }

    public function getMediaUrl(): ?string
    {
        return $this->media_url;
    }

    public function setMediaUrl(string $media_url): static
    {
        $this->media_url = $media_url;

        return $this;
    }

    public function getIsDeleted(): ?int
    {
        return $this->is_deleted;
    }

    public function setIsDeleted(?int $is_deleted): static
    {
        $this->is_deleted = $is_deleted;

        return $this;
    }
}
</file>

<file path="Entity/GroupMembers.php">
<?php

namespace App\Entity;

use App\Repository\GroupMembersRepository;
use Doctrine\ORM\Mapping as ORM;

#[ORM\Entity(repositoryClass: GroupMembersRepository::class)]
#[ORM\Table(name: 'group_members')]
class GroupMembers
{
    #[ORM\Id]
    #[ORM\GeneratedValue]
    #[ORM\Column]
    private ?int $id = null;

    #[ORM\ManyToOne]
    #[ORM\JoinColumn(nullable: false)]
    private ?UserGroups $group_it = null;

    #[ORM\ManyToOne]
    #[ORM\JoinColumn(nullable: false)]
    private ?Users $user_id = null;

    #[ORM\Column(length: 255)]
    private ?string $role = null;

    #[ORM\Column(length: 50)]
    private ?string $status = null; // â NEW FIELD

    #[ORM\Column(type: 'datetime', nullable: true)]
    private ?\DateTimeInterface $created_at = null; // Optional for completeness

    public function getId(): ?int
    {
        return $this->id;
    }

    public function getGroupIt(): ?UserGroups
    {
        return $this->group_it;
    }

    public function setGroupIt(?UserGroups $group_it): static
    {
        $this->group_it = $group_it;
        return $this;
    }

    public function getUserId(): ?Users
    {
        return $this->user_id;
    }

    public function setUserId(?Users $user_id): static
    {
        $this->user_id = $user_id;
        return $this;
    }

    public function getRole(): ?string
    {
        return $this->role;
    }

    public function setRole(string $role): static
    {
        $this->role = $role;
        return $this;
    }

    public function getStatus(): ?string
    {
        return $this->status;
    }

    public function setStatus(string $status): static
    {
        $this->status = $status;
        return $this;
    }

    public function getCreatedAt(): ?\DateTimeInterface
    {
        return $this->created_at;
    }

    public function setCreatedAt(?\DateTimeInterface $created_at): static
    {
        $this->created_at = $created_at;
        return $this;
    }
}
</file>

<file path="Entity/HistoriquePoints.php">
<?php

namespace App\Entity;

use Doctrine\ORM\Mapping as ORM;

#[ORM\Entity]
#[ORM\Table(name: 'historique_points')]
class HistoriquePoints
{
    #[ORM\Id]
    #[ORM\GeneratedValue]
    #[ORM\Column(type: 'integer')]
    private ?int $id = null;

    #[ORM\ManyToOne(targetEntity: Users::class, inversedBy: 'historiquePoints')]
    #[ORM\JoinColumn(name: 'user_id_id', referencedColumnName: 'id', nullable: true)] // Correction : Ajout de nullable: true pour correspondre Ã  la table
    private ?Users $user = null;

    #[ORM\Column(type: 'string', length: 255, nullable: true)] // Correction : Ajout de nullable: true car la table permet NULL
    private ?string $type = null;

    #[ORM\Column(type: 'integer', nullable: true)] // Correction : Ajout de nullable: true car la table permet NULL
    private ?int $points = null;

    #[ORM\Column(type: 'string', length: 255, nullable: true)] // Correction : Ajout de nullable: true car la table permet NULL
    private ?string $raison = null;

    #[ORM\Column(type: 'datetime', nullable: true)] // Correction : Ajout de nullable: true car la table permet NULL
    private ?\DateTimeInterface $date = null;

    // Getters et Setters
    public function getId(): ?int
    {
        return $this->id;
    }

    public function getUser(): ?Users
    {
        return $this->user;
    }

    public function setUser(?Users $user): self
    {
        $this->user = $user;
        return $this;
    }

    public function getType(): string
    {
        return $this->type;
    }

    public function setType(string $type): self
    {
        $this->type = $type;
        return $this;
    }

    public function getPoints(): int
    {
        return $this->points;
    }

    public function setPoints(int $points): self
    {
        $this->points = $points;
        return $this;
    }

    public function getRaison(): string
    {
        return $this->raison;
    }

    public function setRaison(string $raison): self
    {
        $this->raison = $raison;
        return $this;
    }

    public function getDate(): \DateTimeInterface
    {
        return $this->date;
    }

    public function setDate(\DateTimeInterface $date): self
    {
        $this->date = $date;
        return $this;
    }
}
</file>

<file path="Entity/Jobs.php">
<?php

namespace App\Entity;

use App\Repository\JobsRepository;
use Doctrine\ORM\Mapping as ORM;

#[ORM\Entity(repositoryClass: JobsRepository::class)]
class Jobs
{
    #[ORM\Id]
    #[ORM\GeneratedValue]
    #[ORM\Column]
    private ?int $id = null;

    #[ORM\Column(length: 255)]
    private ?string $jobTitle = null;

    #[ORM\Column(length: 255, nullable: true)]
    private ?string $eventTitle = null;

    #[ORM\Column(length: 255)]
    private ?string $jobLocation = null;

    #[ORM\Column(length: 255)]
    private ?string $employmentType = null;

    #[ORM\Column(length: 255 , nullable: true)]
    private ?string $applicationDeadLine = null;

    #[ORM\Column]
    private ?int $minSalary = null;

    #[ORM\Column]
    private ?int $maxSalary = null;

    #[ORM\Column(length: 255)]
    private ?string $currency = null;

    #[ORM\Column(length: 255)]
    private ?string $jobDescreption = null;

    #[ORM\Column(length: 255)]
    private ?string $recruiterName = null;

    #[ORM\Column(length: 255)]
    private ?string $recruiterEmail = null;

    #[ORM\Column(type: 'datetime', nullable: true)]
    private ?\DateTime $createdAt ;
    
    #[ORM\ManyToOne(inversedBy: 'jobs')]
    #[ORM\JoinColumn(nullable: true)]
    private ?Users $userId = null;

    public function __construct()
    {
        $this->createdAt = new \DateTime();
        
    }

    public function getId(): ?int
    {
        return $this->id;
    }

    public function getJobTitle(): ?string
    {
        return $this->jobTitle;
    }

    public function setJobTitle(string $jobTitle): static
    {
        $this->jobTitle = $jobTitle;

        return $this;
    }

    public function getEventTitle(): ?string
    {
        return $this->eventTitle;
    }

    public function setEventTitle(?string $eventTitle): static
    {
        $this->eventTitle = $eventTitle;

        return $this;
    }

    public function getJobLocation(): ?string
    {
        return $this->jobLocation;
    }

    public function setJobLocation(string $jobLocation): static
    {
        $this->jobLocation = $jobLocation;

        return $this;
    }

    public function getEmploymentType(): ?string
    {
        return $this->employmentType;
    }

    public function setEmploymentType(string $employmentType): static
    {
        $this->employmentType = $employmentType;

        return $this;
    }

    public function getApplicationDeadLine(): ?string
    {
        return $this->applicationDeadLine;
    }

    public function setApplicationDeadLine(string $applicationDeadLine): static
    {
        $this->applicationDeadLine = $applicationDeadLine;

        return $this;
    }

    public function getMinSalary(): ?int
    {
        return $this->minSalary;
    }

    public function setMinSalary(int $minSalary): static
    {
        $this->minSalary = $minSalary;

        return $this;
    }

    public function getMaxSalary(): ?int
    {
        return $this->maxSalary;
    }

    public function setMaxSalary(int $maxSalary): static
    {
        $this->maxSalary = $maxSalary;

        return $this;
    }

    public function getCurrency(): ?string
    {
        return $this->currency;
    }

    public function setCurrency(string $currency): static
    {
        $this->currency = $currency;

        return $this;
    }

    public function getJobDescreption(): ?string
    {
        return $this->jobDescreption;
    }

    public function setJobDescreption(string $jobDescreption): static
    {
        $this->jobDescreption = $jobDescreption;

        return $this;
    }

    public function getRecruiterName(): ?string
    {
        return $this->recruiterName;
    }

    public function setRecruiterName(string $recruiterName): static
    {
        $this->recruiterName = $recruiterName;

        return $this;
    }

    public function getRecruiterEmail(): ?string
    {
        return $this->recruiterEmail;
    }

    public function setRecruiterEmail(string $recruiterEmail): static
    {
        $this->recruiterEmail = $recruiterEmail;

        return $this;
    }

    public function getCreatedAt(): ?\DateTime
    {
        return $this->createdAt;
    }

    public function setCreatedAt(?\DateTime $createdAt): static
    {
        $this->createdAt = $createdAt;

        return $this;
    }

  

    public function getUserId(): ?Users
    {
        return $this->userId;
    }

    public function setUserId(?Users $userId): static
    {
        $this->userId = $userId;

        return $this;
    }

   
}
</file>

<file path="Entity/Likes.php">
<?php

namespace App\Entity;

use App\Repository\LikesRepository;
use Doctrine\ORM\Mapping as ORM;

#[ORM\Entity(repositoryClass: LikesRepository::class)]
#[ORM\Table(name: "Likes")]

class Likes
{
    #[ORM\Id]
    #[ORM\GeneratedValue]
    #[ORM\Column]
    private ?int $id = null;

    #[ORM\ManyToOne]
    #[ORM\JoinColumn(name: "post_id", referencedColumnName: "post_id", nullable: false)]
    private ?FeedPosts $postId = null;

    #[ORM\ManyToOne]
    #[ORM\JoinColumn(name: "id", referencedColumnName: "id", nullable: false)]
    private ?Users $user_id = null;

    #[ORM\Column(length: 255)]
    private ?string $timeStamp = null;

    public function getId(): ?int
    {
        return $this->id;
    }

    public function getPostId(): ?FeedPosts
    {
        return $this->postId;
    }

    public function setPostId(?FeedPosts $postId): static
    {
        $this->postId = $postId;

        return $this;
    }

    public function getUserId(): ?Users
    {
        return $this->user_id;
    }

    public function setUserId(?Users $user_id): static
    {
        $this->user_id = $user_id;

        return $this;
    }

    public function getTimeStamp(): ?string
    {
        return $this->timeStamp;
    }

    public function setTimeStamp(string $timeStamp): static
    {
        $this->timeStamp = $timeStamp;

        return $this;
    }
}
</file>

<file path="Entity/Message.php">
<?php

namespace App\Entity;

use App\Repository\MessageRepository;
use Doctrine\Common\Collections\ArrayCollection;
use Doctrine\Common\Collections\Collection;
use Doctrine\DBAL\Types\Types;
use Doctrine\ORM\Mapping as ORM;

#[ORM\Entity(repositoryClass: MessageRepository::class)]
#[ORM\Table(name: "messages")]
class Message
{
    #[ORM\Id]
    #[ORM\GeneratedValue]
    #[ORM\Column]
    private ?int $id = null;

    #[ORM\ManyToOne(targetEntity: Users::class, inversedBy: "sentMessages")]
    #[ORM\JoinColumn(name: "sender_id", referencedColumnName: "id", nullable: false, onDelete: "CASCADE")]
    private ?Users $sender = null;

    #[ORM\ManyToOne(targetEntity: Users::class, inversedBy: "receivedMessages")]
    #[ORM\JoinColumn(name: "receiver_id", referencedColumnName: "id", nullable: false, onDelete: "CASCADE")]
    private ?Users $receiver = null;

    #[ORM\Column(type: Types::TEXT)]
    private ?string $message = null;

    #[ORM\Column(type: Types::DATETIMETZ_MUTABLE, options: ["default" => "CURRENT_TIMESTAMP"])]
    private ?\DateTimeInterface $createdAt = null;

    public function __construct()
    {
        $this->createdAt = new \DateTime();
    }

    public function getId(): ?int
    {
        return $this->id;
    }

    public function getMessage(): ?string
    {
        return $this->message;
    }

    public function setMessage(string $message): static
    {
        $this->message = $message;
        return $this;
    }

    public function getCreatedAt(): ?\DateTimeInterface
    {
        return $this->createdAt;
    }

    public function setCreatedAt(\DateTimeInterface $createdAt): static
    {
        $this->createdAt = $createdAt;
        return $this;
    }

    public function getSender(): ?Users
    {
        return $this->sender;
    }

    public function setSender(?Users $sender): static
    {
        if ($this->sender !== $sender) {
            $this->sender?->getSentMessages()->removeElement($this);
            $this->sender = $sender;
            $sender?->addSentMessage($this);
        }
        return $this;
    }

    public function getReceiver(): ?Users
    {
        return $this->receiver;
    }

    public function setReceiver(?Users $receiver): static
    {
        if ($this->receiver !== $receiver) {
            $oldReceiver = $this->receiver;
            $this->receiver = $receiver;

            if ($oldReceiver !== null) {
                $oldReceiver->removeReceivedMessage($this);
            }

            if ($receiver !== null) {
                $receiver->addReceivedMessage($this);
            }
        }
        return $this;
    }
}
</file>

<file path="Entity/Messages.php">
<?php

namespace App\Entity;

use App\Repository\MessagesRepository;
use Doctrine\DBAL\Types\Types;
use Doctrine\ORM\Mapping as ORM;

#[ORM\Entity(repositoryClass: MessagesRepository::class)]
class Messages
{
    #[ORM\Id]
    #[ORM\GeneratedValue]
    #[ORM\Column]
    private ?int $id = null;

    #[ORM\Column]
    private ?int $sender_id = null;

    #[ORM\Column]
    private ?int $recipient_id = null;

    #[ORM\Column(length: 255)]
    private ?string $content = null;

    #[ORM\Column(type: Types::DATETIME_MUTABLE)]
    private ?\DateTimeInterface $timestamp = null;

    #[ORM\Column(length: 255)]
    private ?string $type = null;

    #[ORM\Column]
    private ?int $read_status = null;

    public function getId(): ?int
    {
        return $this->id;
    }

    public function getSenderId(): ?int
    {
        return $this->sender_id;
    }

    public function setSenderId(int $sender_id): static
    {
        $this->sender_id = $sender_id;

        return $this;
    }

    public function getRecipientId(): ?int
    {
        return $this->recipient_id;
    }

    public function setRecipientId(int $recipient_id): static
    {
        $this->recipient_id = $recipient_id;

        return $this;
    }

    public function getContent(): ?string
    {
        return $this->content;
    }

    public function setContent(string $content): static
    {
        $this->content = $content;

        return $this;
    }

    public function getTimestamp(): ?\DateTimeInterface
    {
        return $this->timestamp;
    }

    public function setTimestamp(\DateTimeInterface $timestamp): static
    {
        $this->timestamp = $timestamp;

        return $this;
    }

    public function getType(): ?string
    {
        return $this->type;
    }

    public function setType(string $type): static
    {
        $this->type = $type;

        return $this;
    }

    public function getReadStatus(): ?int
    {
        return $this->read_status;
    }

    public function setReadStatus(int $read_status): static
    {
        $this->read_status = $read_status;

        return $this;
    }
}
</file>

<file path="Entity/Notification.php">
<?php

namespace App\Entity;

use App\Repository\NotificationRepository;
use Doctrine\ORM\Mapping as ORM;

#[ORM\Entity(repositoryClass: NotificationRepository::class)]
#[ORM\Table(name: "notification")]
class Notification
{
    public const TYPE_GROUP_REQUEST_ACCEPTED = 'group_request_accepted';
    public const TYPE_GROUP_REQUEST_REJECTED = 'group_request_rejected';
    public const TYPE_FOLLOW_REQUEST_ACCEPTED = 'follow_request_accepted';
    public const TYPE_FOLLOW_REQUEST_REJECTED = 'follow_request_rejected';
    
    #[ORM\Id]
    #[ORM\GeneratedValue]
    #[ORM\Column]
    private ?int $id = null;

    #[ORM\ManyToOne(targetEntity: Users::class)]
    #[ORM\JoinColumn(name: "user_id", referencedColumnName: "id", nullable: false)]
    private ?Users $user = null;

    #[ORM\Column(length: 255)]
    private ?string $message = null;

    #[ORM\Column(length: 50)]
    private ?string $type = null;

    #[ORM\Column(length: 255)]
    private ?string $created_at = null;
    
    #[ORM\Column(type: "boolean")]
    private ?bool $is_read = false;
    
    #[ORM\Column(length: 255, nullable: true)]
    private ?string $link = null;

    public function getId(): ?int
    {
        return $this->id;
    }

    public function getUser(): ?Users
    {
        return $this->user;
    }

    public function setUser(?Users $user): static
    {
        $this->user = $user;

        return $this;
    }

    public function getMessage(): ?string
    {
        return $this->message;
    }

    public function setMessage(string $message): static
    {
        $this->message = $message;

        return $this;
    }

    public function getType(): ?string
    {
        return $this->type;
    }

    public function setType(string $type): static
    {
        $this->type = $type;

        return $this;
    }

    public function getCreatedAt(): ?string
    {
        return $this->created_at;
    }

    public function setCreatedAt(string $created_at): static
    {
        $this->created_at = $created_at;

        return $this;
    }
    
    public function getIsRead(): ?bool
    {
        return $this->is_read;
    }

    public function setIsRead(bool $is_read): static
    {
        $this->is_read = $is_read;

        return $this;
    }
    
    public function getLink(): ?string
    {
        return $this->link;
    }

    public function setLink(?string $link): static
    {
        $this->link = $link;

        return $this;
    }
}
</file>

<file path="Entity/Participation.php">
<?php
// src/Entity/Participation.php
namespace App\Entity;

use App\Repository\ParticipationRepository;
use Doctrine\ORM\Mapping as ORM;
use Doctrine\DBAL\Types\Types; // For ORM type definitions

#[ORM\Entity(repositoryClass: ParticipationRepository::class)]
#[ORM\Table(name: 'participation')] // Explicitly map to your existing 'participation' table
class Participation
{
    #[ORM\Id]
    #[ORM\GeneratedValue(strategy: 'IDENTITY')] // Assumes 'id' is auto-incrementing in your MySQL table
    #[ORM\Column(type: Types::INTEGER)]
    private ?int $id = null;

    // Maps to the 'event_id' column in your 'participation' table
    #[ORM\ManyToOne(targetEntity: Events::class)]
    #[ORM\JoinColumn(name: 'event_id', referencedColumnName: 'id', nullable: false, onDelete: "CASCADE")]
    private ?Events $event = null;

    // Maps to the 'participant_id' column in your 'participation' table
    #[ORM\ManyToOne(targetEntity: Users::class)]
    #[ORM\JoinColumn(name: 'participant_id', referencedColumnName: 'id', nullable: false, onDelete: "CASCADE")]
    private ?Users $participant = null;

    

    public function __construct()
    {
        
    }

    public function getId(): ?int
    {
        return $this->id;
    }

    public function getEvent(): ?Events
    {
        return $this->event;
    }

    public function setEvent(?Events $event): static
    {
        $this->event = $event;
        return $this;
    }

    public function getParticipant(): ?Users
    {
        return $this->participant;
    }

    public function setParticipant(?Users $participant): static
    {
        $this->participant = $participant;
        return $this;
}

}
</file>

<file path="Entity/Reviews.php">
<?php

namespace App\Entity;

use App\Repository\ReviewsRepository;
use Doctrine\ORM\Mapping as ORM;

#[ORM\Entity(repositoryClass: ReviewsRepository::class)]
class Reviews
{
    #[ORM\Id]
    #[ORM\GeneratedValue]
    #[ORM\Column]
    private ?int $id = null;

    #[ORM\ManyToOne]
    #[ORM\JoinColumn(nullable: false)]
    private ?Users $user_id = null;

    #[ORM\ManyToOne]
    #[ORM\JoinColumn(nullable: false)]
    private ?Events $event_id = null;

    #[ORM\Column]
    private ?int $rating = null;

    #[ORM\Column(length: 255)]
    private ?string $comment = null;

    #[ORM\Column(length: 255, nullable: true)]
    private ?string $creatid_at = null;

    public function getId(): ?int
    {
        return $this->id;
    }

    public function getUserId(): ?Users
    {
        return $this->user_id;
    }

    public function setUserId(?Users $user_id): static
    {
        $this->user_id = $user_id;

        return $this;
    }

    public function getEventId(): ?Events
    {
        return $this->event_id;
    }

    public function setEventId(?Events $event_id): static
    {
        $this->event_id = $event_id;

        return $this;
    }

    public function getRating(): ?int
    {
        return $this->rating;
    }

    public function setRating(int $rating): static
    {
        $this->rating = $rating;

        return $this;
    }

    public function getComment(): ?string
    {
        return $this->comment;
    }

    public function setComment(string $comment): static
    {
        $this->comment = $comment;

        return $this;
    }

    public function getCreatidAt(): ?string
    {
        return $this->creatid_at;
    }

    public function setCreatidAt(?string $creatid_at): static
    {
        $this->creatid_at = $creatid_at;

        return $this;
    }
}
</file>

<file path="Entity/Rewards.php">
<?php

namespace App\Entity;

use Doctrine\ORM\Mapping as ORM;

/**
 * @ORM\Entity
 * @ORM\Table(name="rewards")
 */
class Rewards
{
    /**
     * @ORM\Id
     * @ORM\GeneratedValue
     * @ORM\Column(type="integer")
     */
    private $id;

    /**
     * @ORM\Column(type="string", length=255)
     */
    private $action_type;

    /**
     * @ORM\Column(type="integer")
     */
    private $points;

    /**
     * @ORM\Column(type="string", length=255)
     */
    private $description;

    // Getters et Setters
    public function getId(): ?int
    {
        return $this->id;
    }

    public function getActionType(): string
    {
        return $this->action_type;
    }

    public function setActionType(string $action_type): self
    {
        $this->action_type = $action_type;
        return $this;
    }

    public function getPoints(): int
    {
        return $this->points;
    }

    public function setPoints(int $points): self
    {
        $this->points = $points;
        return $this;
    }

    public function getDescription(): string
    {
        return $this->description;
    }

    public function setDescription(string $description): self
    {
        $this->description = $description;
        return $this;
    }
}
</file>

<file path="Entity/Roulette.php">
<?php

namespace App\Entity;

use Doctrine\ORM\Mapping as ORM;
use App\Entity\Users;

#[ORM\Entity]
#[ORM\Table(name: 'roulette')]
class Roulette
{
    #[ORM\Id]
    #[ORM\GeneratedValue]
    #[ORM\Column(type: 'integer')]
    private ?int $id = null;

    #[ORM\ManyToOne(targetEntity: Users::class, inversedBy: 'roulettes')]
    #[ORM\JoinColumn(name: "user_id", nullable: true)]
    private ?Users $user = null;

   // #[ORM\Column(name: "user_id", type: 'integer', insertable: false, updatable: false)]
    //private ?int $user_id = null;



    #[ORM\Column(type: 'datetime', name: "created_at")]
    private \DateTimeInterface $createdAt;

    #[ORM\Column(type: 'string', length: 255)]
    private ?string $result = null;

    /**
     * Constructeur pour initialiser createdAt avec la date actuelle.
     */
    public function __construct()
    {
        $this->createdAt = new \DateTime(); // Initialisation par dÃ©faut avec la date actuelle.
    }
    public function getId(): ?int
    {
        return $this->id;
    }

    public function getUser(): ?Users
    {
        return $this->user;
    }

    public function setUser(?Users $user): self
    {
        $this->user = $user;
        return $this;
    }

    //public function getUserId(): ?int
   // {
     //   return $this->user_id;
    //}

    public function getCreatedAt(): \DateTimeInterface
    {
        return $this->createdAt;
    }

    public function setCreatedAt(\DateTimeInterface $createdAt): self
    {
        $this->createdAt = $createdAt;
        return $this;
    }


    // Ajout : AjoutÃ© les getters et setters pour le champ "result".
    public function getResult(): ?string
    {
        return $this->result;
    }

    public function setResult(string $result): self
    {
        $this->result = $result;
        return $this;
    }
}
</file>

<file path="Entity/Shares.php">
<?php

namespace App\Entity;

use App\Repository\SharesRepository;
use Doctrine\DBAL\Types\Types;
use Doctrine\ORM\Mapping as ORM;

#[ORM\Entity(repositoryClass: SharesRepository::class)]
class Shares
{
    #[ORM\Id]
    #[ORM\GeneratedValue]
    #[ORM\Column]
    private ?int $id = null;

    #[ORM\ManyToOne]
    private ?FeedPosts $post_id = null;

    #[ORM\ManyToOne]
    private ?Users $user_id = null;

    #[ORM\Column(type: Types::DATETIME_MUTABLE, nullable: true)]
    private ?\DateTimeInterface $created_at = null;

    public function getId(): ?int
    {
        return $this->id;
    }

    public function getPostId(): ?FeedPosts
    {
        return $this->post_id;
    }

    public function setPostId(?FeedPosts $post_id): static
    {
        $this->post_id = $post_id;

        return $this;
    }

    public function getUserId(): ?Users
    {
        return $this->user_id;
    }

    public function setUserId(?Users $user_id): static
    {
        $this->user_id = $user_id;

        return $this;
    }

    public function getCreatedAt(): ?\DateTimeInterface
    {
        return $this->created_at;
    }

    public function setCreatedAt(?\DateTimeInterface $created_at): static
    {
        $this->created_at = $created_at;

        return $this;
    }
}
</file>

<file path="Entity/TransactionArgent.php">
<?php

namespace App\Entity;

use App\Repository\TransactionArgentRepository;
use Doctrine\ORM\Mapping as ORM;
use Doctrine\DBAL\Types\Types;

#[ORM\Entity(repositoryClass: TransactionArgentRepository::class)]
class TransactionArgent
{
    #[ORM\Id]
    #[ORM\GeneratedValue]
    #[ORM\Column]
    private ?int $id = null;

    #[ORM\ManyToOne(targetEntity: Users::class)]
    #[ORM\JoinColumn(name: "user_id", referencedColumnName: "id", nullable: false)]
    private ?Users $user = null;

    #[ORM\Column(type: "string", length: 50)]
    private ?string $type = null;

    #[ORM\Column(type: Types::DECIMAL, precision: 10, scale: 2)]
    private ?string $montant = null;

    #[ORM\Column(type: "string", length: 3)]
    private ?string $devise = null;

    #[ORM\Column(type: Types::DATETIME_MUTABLE)]
    private ?\DateTimeInterface $date = null;

    #[ORM\Column(type: Types::DECIMAL, precision: 10, scale: 2)]
    private ?string $pointConvertis = null;

    public function getId(): ?int
    {
        return $this->id;
    }

    public function getUser(): ?Users
    {
        return $this->user;
    }

    public function setUser(?Users $user): self
    {
        $this->user = $user;
        return $this;
    }

    public function getType(): ?string
    {
        return $this->type;
    }

    public function setType(string $type): self
    {
        $this->type = $type;
        return $this;
    }

    public function getMontant(): ?string
    {
        return $this->montant;
    }

    public function setMontant(string $montant): self
    {
        $this->montant = $montant;
        return $this;
    }

    public function getDevise(): ?string
    {
        return $this->devise;
    }

    public function setDevise(string $devise): self
    {
        $this->devise = $devise;
        return $this;
    }

    public function getDate(): ?\DateTimeInterface
    {
        return $this->date;
    }

    public function setDate(\DateTimeInterface $date): self
    {
        $this->date = $date;
        return $this;
    }

    public function getPointConvertis(): ?string
    {
        return $this->pointConvertis;
    }

    public function setPointConvertis(string $pointConvertis): self
    {
        $this->pointConvertis = $pointConvertis;
        return $this;
    }
}
</file>

<file path="Entity/UserFollowers.php">
<?php

namespace App\Entity;
use App\Repository\UserFollowersRepository;

use Doctrine\ORM\Mapping as ORM;

#[ORM\Entity(repositoryClass: UserFollowersRepository::class)]
#[ORM\Table(name: "UserFollowers")]
class UserFollowers
{
    public const STATUS_PENDING = 'pending';
    public const STATUS_ACCEPTED = 'accepted';
    public const STATUS_REJECTED = 'rejected';
    
    #[ORM\Id]
    #[ORM\GeneratedValue]
    #[ORM\Column]
    private ?int $id = null;

    #[ORM\ManyToOne(targetEntity: Users::class)]
    #[ORM\JoinColumn(name: "follower_id", referencedColumnName: "id", nullable: false)]
    private ?Users $follower = null;

    #[ORM\ManyToOne(targetEntity: Users::class)]
    #[ORM\JoinColumn(name: "followed_id", referencedColumnName: "id", nullable: false)]
    private ?Users $followed = null;

    #[ORM\Column(length: 255)]
    private ?string $created_at = null;
    
    #[ORM\Column(length: 20)]
    private ?string $status = self::STATUS_PENDING;

    public function getId(): ?int
    {
        return $this->id;
    }

    public function getFollower(): ?Users
    {
        return $this->follower;
    }

    public function setFollower(?Users $follower): static
    {
        $this->follower = $follower;

        return $this;
    }

    public function getFollowed(): ?Users
    {
        return $this->followed;
    }

    public function setFollowed(?Users $followed): static
    {
        $this->followed = $followed;

        return $this;
    }

    public function getCreatedAt(): ?string
    {
        return $this->created_at;
    }

    public function setCreatedAt(string $created_at): static
    {
        $this->created_at = $created_at;

        return $this;
    }
    
    public function getStatus(): ?string
    {
        return $this->status;
    }

    public function setStatus(string $status): static
    {
        $this->status = $status;

        return $this;
    }
    
    public function isPending(): bool
    {
        return $this->status === self::STATUS_PENDING;
    }
    
    public function isAccepted(): bool
    {
        return $this->status === self::STATUS_ACCEPTED;
    }
    
    public function isRejected(): bool
    {
        return $this->status === self::STATUS_REJECTED;
    }
}
</file>

<file path="Entity/UserGroups.php">
<?php

namespace App\Entity;

use App\Repository\UserGroupsRepository;
use Doctrine\DBAL\Types\Types;
use Doctrine\ORM\Mapping as ORM;

#[ORM\Entity(repositoryClass: UserGroupsRepository::class)]
#[ORM\Table(name: 'user_groups')]
class UserGroups
{
    #[ORM\Id]
    #[ORM\GeneratedValue]
    #[ORM\Column]
    private ?int $id = null;

    #[ORM\Column(length: 255)]
    private ?string $name = null;

    #[ORM\Column(length: 255)]
    private ?string $description = null;

    #[ORM\Column(type: Types::TEXT, nullable: true)]
    private ?string $profile_picture = 'default.jpg';

    #[ORM\Column(length: 255)]
    private ?string $rules = null;

    #[ORM\Column(length: 255)]
    private ?string $created_at = null;

    #[ORM\ManyToOne(targetEntity: Users::class, cascade: ['persist'])]
    #[ORM\JoinColumn(nullable: false)]
    private ?Users $creator_id = null;

    public function getProfilePicture(): ?string
    {
        return $this->profile_picture;
    }

    public function setProfilePicture(?string $profile_picture): static
    {
        $this->profile_picture = $profile_picture;

        return $this;
    }
    public function getId(): ?int
    {
        return $this->id;
    }

    public function getName(): ?string
    {
        return $this->name;
    }

    public function setName(string $name): static
    {
        $this->name = $name;

        return $this;
    }

    public function getDescription(): ?string
    {
        return $this->description;
    }

    public function setDescription(string $description): static
    {
        $this->description = $description;

        return $this;
    }

    public function getRules(): ?string
    {
        return $this->rules;
    }

    public function setRules(string $rules): static
    {
        $this->rules = $rules;

        return $this;
    }

    public function getCreatedAt(): ?string
    {
        return $this->created_at;
    }

    public function setCreatedAt(string $created_at): static
    {
        $this->created_at = $created_at;

        return $this;
    }

    public function getCreatorId(): ?Users
    {
        return $this->creator_id;
    }

    public function setCreatorId(?Users $creator_id): static
    {
        $this->creator_id = $creator_id;

        return $this;
    }
}
</file>

<file path="Entity/UserIntrests.php">
<?php

namespace App\Entity;

use App\Repository\UserIntrestsRepository;
use Doctrine\ORM\Mapping as ORM;

#[ORM\Entity(repositoryClass: UserIntrestsRepository::class)]
#[ORM\Table(name: 'user_interests')]


class UserIntrests
{
    #[ORM\Id]
    #[ORM\GeneratedValue]
    #[ORM\Column]
    private ?int $id = null;

    #[ORM\ManyToOne]
    private ?users $user_id = null;

    #[ORM\ManyToOne]
    private ?Category $category_id = null;

    public function getId(): ?int
    {
        return $this->id;
    }

    public function getUserId(): ?users
    {
        return $this->user_id;
    }

    public function setUserId(?users $user_id): static
    {
        $this->user_id = $user_id;

        return $this;
    }

    public function getCategoryId(): ?Category
    {
        return $this->category_id;
    }

    public function setCategoryId(?Category $category_id): static
    {
        $this->category_id = $category_id;

        return $this;
    }
}
</file>

<file path="Entity/UserMessages.php">
<?php

namespace App\Entity;

use App\Repository\UserMessagesRepository;
use Doctrine\DBAL\Types\Types;
use Doctrine\ORM\Mapping as ORM;

#[ORM\Entity(repositoryClass: UserMessagesRepository::class)]
class UserMessages
{
    #[ORM\Id]
    #[ORM\GeneratedValue]
    #[ORM\Column]
    private ?int $id = null;

    #[ORM\ManyToOne]
    private ?Users $user_id = null;

    #[ORM\Column(type: Types::DATETIME_MUTABLE, nullable: true)]
    private ?\DateTimeInterface $sent_at = null;

    #[ORM\Column(length: 255, nullable: true)]
    private ?string $lastMessage = null;

    #[ORM\Column(length: 255)]
    private ?string $username = null;

    public function getId(): ?int
    {
        return $this->id;
    }

    public function getUserId(): ?Users
    {
        return $this->user_id;
    }

    public function setUserId(?Users $user_id): static
    {
        $this->user_id = $user_id;

        return $this;
    }

    public function getSentAt(): ?\DateTimeInterface
    {
        return $this->sent_at;
    }

    public function setSentAt(?\DateTimeInterface $sent_at): static
    {
        $this->sent_at = $sent_at;

        return $this;
    }

    public function getLastMessage(): ?string
    {
        return $this->lastMessage;
    }

    public function setLastMessage(?string $lastMessage): static
    {
        $this->lastMessage = $lastMessage;

        return $this;
    }

    public function getUsername(): ?string
    {
        return $this->username;
    }

    public function setUsername(string $username): static
    {
        $this->username = $username;

        return $this;
    }
}
</file>

<file path="Entity/UserProfile.php">
<?php

namespace App\Entity;

use App\Entity\Users;
use Doctrine\ORM\Mapping as ORM;
use App\Repository\UserProfileRepository;

#[ORM\Entity(repositoryClass: UserProfileRepository::class)]
class UserProfile
{
    #[ORM\Id]
    #[ORM\GeneratedValue]
    #[ORM\Column]
    private ?int $id = null;

    #[ORM\OneToOne(inversedBy: 'profile', cascade: ['persist', 'remove'])]
    #[ORM\JoinColumn(nullable: false)]
    private ?Users $user = null;

    #[ORM\Column(length: 255, nullable: true)]
    private ?string $bio = null;

    #[ORM\Column(length: 255, nullable: true)]
    private ?string $profilePicture = null;

    #[ORM\Column(length: 255, nullable: true)]
    private ?string $intrests = null;

    public function getId(): ?int
    {
        return $this->id;
    }

    public function getUser(): ?Users
    {
        return $this->user;
    }

    public function setUser(Users $user): self
    {
        $this->user = $user;
        return $this;
    }

    public function getBio(): ?string
    {
        return $this->bio;
    }

    public function setBio(?string $bio): self
    {
        $this->bio = $bio;
        return $this;
    }

    public function getProfilePicture(): ?string
    {
        return $this->profilePicture;
    }

    public function setProfilePicture(?string $profilePicture): self
    {
        $this->profilePicture = $profilePicture;
        return $this;
    }

    public function getIntrests(): ?string
    {
        return $this->intrests;
    }

    public function setIntrests(?string $intrests): self
    {
        $this->intrests = $intrests;
        return $this;
    }
}
</file>

<file path="Entity/UserRewards.php">
<?php

namespace App\Entity;

use App\Repository\UserRewardsRepository;
use Doctrine\ORM\Mapping as ORM;
use Doctrine\DBAL\Types\Types;

#[ORM\Entity(repositoryClass: UserRewardsRepository::class)]
class UserRewards
{
    #[ORM\Id]
    #[ORM\GeneratedValue]
    #[ORM\Column]
    private ?int $id = null;

    #[ORM\ManyToOne(targetEntity: Users::class)]
    #[ORM\JoinColumn(name: "user_id", referencedColumnName: "id", nullable: false)]
    private ?Users $user = null;

    #[ORM\ManyToOne(targetEntity: Rewards::class)]
    #[ORM\JoinColumn(name: "reward_id", referencedColumnName: "id", nullable: true)]
    private ?Rewards $reward = null;

    #[ORM\Column]
    private ?int $event_id = null;

    #[ORM\Column]
    private ?int $points_earned = null;

    #[ORM\Column(type: Types::DATETIME_MUTABLE)]
    private ?\DateTimeInterface $earned_at = null;

    #[ORM\Column(length: 50)]
    private ?string $type = null;

    #[ORM\Column(length: 255)]
    private ?string $raison = null;

    public function getId(): ?int
    {
        return $this->id;
    }

    public function getUser(): ?Users
    {
        return $this->user;
    }

    public function setUser(?Users $user): self
    {
        $this->user = $user;
        return $this;
    }

    public function getReward(): ?Rewards
    {
        return $this->reward;
    }

    public function setReward(?Rewards $reward): self
    {
        $this->reward = $reward;
        return $this;
    }

    public function getEventId(): ?int
    {
        return $this->event_id;
    }

    public function setEventId(int $event_id): self
    {
        $this->event_id = $event_id;
        return $this;
    }

    public function getPointsEarned(): ?int
    {
        return $this->points_earned;
    }

    public function setPointsEarned(int $points_earned): self
    {
        $this->points_earned = $points_earned;
        return $this;
    }

    public function getEarnedAt(): ?\DateTimeInterface
    {
        return $this->earned_at;
    }

    public function setEarnedAt(\DateTimeInterface $earned_at): self
    {
        $this->earned_at = $earned_at;
        return $this;
    }

    public function getType(): ?string
    {
        return $this->type;
    }

    public function setType(string $type): self
    {
        $this->type = $type;
        return $this;
    }

    public function getRaison(): ?string
    {
        return $this->raison;
    }

    public function setRaison(string $raison): self
    {
        $this->raison = $raison;
        return $this;
    }
}
</file>

<file path="Entity/Users.php">
<?php

namespace App\Entity;

use App\Repository\UsersRepository;
use Doctrine\Common\Collections\ArrayCollection;
use Doctrine\Common\Collections\Collection;
use Doctrine\DBAL\Types\Types;
use Doctrine\ORM\Mapping as ORM;
use DateTimeInterface;

#[ORM\Entity(repositoryClass: UsersRepository::class)]
#[ORM\Table(name: 'users')]
class Users
{
    #[ORM\Id]
    #[ORM\GeneratedValue]
    #[ORM\Column]
    private ?int $id = 1;

    #[ORM\Column(length: 255)]
    private ?string $username = null;

    #[ORM\Column(length: 255)]
    private ?string $password = null;

    #[ORM\Column(length: 255)]
    private ?string $email = null;

    #[ORM\Column(length: 255, nullable: true)]
    private ?string $createdAt = null;

    #[ORM\Column(type: Types::DATETIME_MUTABLE, nullable: true)]
    private ?DateTimeInterface $updatedAt = null;

    
    

    #[ORM\Column(nullable: true)]
    private ?int $points = null;

    #[ORM\Column(type: Types::INTEGER, nullable: true)]
    private ?int $age = null;

    #[ORM\Column(type: Types::STRING, length: 10, nullable: true)]
    private ?string $gender = null;

    #[ORM\Column(type: Types::DECIMAL, precision: 10, scale: 2, nullable: true)]
    private ?string $argent = null;

    #[ORM\OneToMany(targetEntity: Conversion::class, mappedBy: 'userId')]
    private Collection $conversions;

    #[ORM\OneToMany(targetEntity: Events::class, mappedBy: 'organizerId')]
    private Collection $events;

    #[ORM\OneToMany(targetEntity: Jobs::class, mappedBy: 'userId', orphanRemoval: true)]
    private Collection $jobs;

    #[ORM\OneToOne(mappedBy: 'user', cascade: ['persist', 'remove'])]
    private ?UserProfile $profile = null;

    public function __construct()
    {
        $this->conversions = new ArrayCollection();
        $this->events = new ArrayCollection();
        $this->jobs = new ArrayCollection();
    }

    public function getId(): ?int
    {
        return $this->id;
    }

    public function getUsername(): ?string
    {
        return $this->username;
    }

    public function setUsername(string $username): self
    {
        $this->username = $username;
        return $this;
    }

    public function getPassword(): ?string
    {
        return $this->password;
    }

    public function setPassword(string $password): self
    {
        $this->password = $password;
        return $this;
    }

    public function getEmail(): ?string
    {
        return $this->email;
    }

    public function setEmail(string $email): self
    {
        $this->email = $email;
        return $this;
    }

    public function getCreatedAt(): ?string
    {
        return $this->createdAt;
    }

    public function setCreatedAt(string $createdAt): self
    {
        $this->createdAt = $createdAt;
        return $this;
    }

    public function getUpdatedAt(): ?DateTimeInterface
    {
        return $this->updatedAt;
    }

    public function setUpdatedAt(?DateTimeInterface $updatedAt): self
    {
        $this->updatedAt = $updatedAt;
        return $this;
    }

    public function getPoints(): ?int
    {
        return $this->points;
    }

    public function setPoints(?int $points): self
    {
        $this->points = $points;
        return $this;
    }

    public function getAge(): ?int
    {
        return $this->age;
    }

    public function setAge(?int $age): self
    {
        $this->age = $age;
        return $this;
    }

    public function getGender(): ?string
    {
        return $this->gender;
    }

    public function setGender(?string $gender): self
    {
        $this->gender = $gender;
        return $this;
    }

    public function getArgent(): ?string
    {
        return $this->argent;
    }

    public function setArgent(?string $argent): self
    {
        $this->argent = $argent;
        return $this;
    }

    public function getConversions(): Collection
    {
        return $this->conversions;
    }

    public function addConversion(Conversion $conversion): self
    {
        if (!$this->conversions->contains($conversion)) {
            $this->conversions->add($conversion);
            $conversion->setUserId($this);
        }
        return $this;
    }

    public function removeConversion(Conversion $conversion): self
    {
        if ($this->conversions->removeElement($conversion)) {
            if ($conversion->getUserId() === $this) {
                $conversion->setUserId(null);
            }
        }
        return $this;
    }

    public function getEvents(): Collection
    {
        return $this->events;
    }

    public function addEvent(Events $event): self
    {
        if (!$this->events->contains($event)) {
            $this->events->add($event);
            $event->setOrganizerId($this);
        }
        return $this;
    }

    public function removeEvent(Events $event): self
    {
        if ($this->events->removeElement($event)) {
            if ($event->getOrganizerId() === $this) {
                $event->setOrganizerId(null);
            }
        }
        return $this;
    }

    public function getJobs(): Collection
    {
        return $this->jobs;
    }

    public function addJob(Jobs $job): self
    {
        if (!$this->jobs->contains($job)) {
            $this->jobs->add($job);
            $job->setUserId($this);
        }
        return $this;
    }

    public function removeJob(Jobs $job): self
    {
        if ($this->jobs->removeElement($job)) {
            if ($job->getUserId() === $this) {
                $job->setUserId(null);
            }
        }
        return $this;
    }

    public function getProfile(): ?UserProfile
    {
        return $this->profile;
    }

    public function setProfile(?UserProfile $profile): self
    {
        $this->profile = $profile;

        if ($profile !== null && $profile->getUser() !== $this) {
            $profile->setUser($this);
        }

        return $this;
    }
}
</file>

<file path="Entity/VisiteUtilisateur.php">
<?php

namespace App\Entity;

use Doctrine\ORM\Mapping as ORM;

#[ORM\Entity]
#[ORM\Table(name: 'visite_utilisateur')]
class VisiteUtilisateur
{
    #[ORM\Id]
    #[ORM\GeneratedValue]
    #[ORM\Column(type: 'integer')]
    private $id;

    #[ORM\Column(type: 'date')]
    private $dernier_visite;

    #[ORM\Column(type: 'integer')]
    private $serie;



    #[ORM\ManyToOne(targetEntity: Users::class, inversedBy: 'visites')]
    #[ORM\JoinColumn(name: 'user_id', referencedColumnName: 'id', nullable: false)]
    private $user;

    // Getters et Setters
    public function getId(): ?int
    {
        return $this->id;
    }

    public function getDernierVisite(): \DateTimeInterface
    {
        return $this->dernier_visite;
    }

    public function setDernierVisite(\DateTimeInterface $dernier_visite): self
    {
        $this->dernier_visite = $dernier_visite;
        return $this;
    }

    public function getSerie(): int
    {
        return $this->serie;
    }

    public function setSerie(int $serie): self
    {
        $this->serie = $serie;
        return $this;
    }



    public function getUser(): ?Users
    {
        return $this->user;
    }

    public function setUser(?Users $user): self
    {
        $this->user = $user;
        return $this;
    }

}
</file>

<file path="Entity/WorkerRaitings.php">
<?php

namespace App\Entity;

use App\Repository\WorkerRaitingsRepository;
use Doctrine\DBAL\Types\Types;
use Doctrine\ORM\Mapping as ORM;

#[ORM\Entity(repositoryClass: WorkerRaitingsRepository::class)]
class WorkerRaitings
{
    #[ORM\Id]
    #[ORM\GeneratedValue]
    #[ORM\Column]
    private ?int $id = null;

    #[ORM\Column]
    private ?int $user_id = null;

    #[ORM\Column]
    private ?int $rater_id = null;

    #[ORM\Column]
    private ?int $job_id = null;

    #[ORM\Column]
    private ?int $raiting = null;

    #[ORM\Column(type: Types::TEXT)]
    private ?string $comment = null;

    #[ORM\Column(type: Types::DATETIME_MUTABLE, nullable: true)]
    private ?\DateTimeInterface $created_at = null;

    public function getId(): ?int
    {
        return $this->id;
    }

    public function getUserId(): ?int
    {
        return $this->user_id;
    }

    public function setUserId(int $user_id): static
    {
        $this->user_id = $user_id;

        return $this;
    }

    public function getRaterId(): ?int
    {
        return $this->rater_id;
    }

    public function setRaterId(int $rater_id): static
    {
        $this->rater_id = $rater_id;

        return $this;
    }

    public function getJobId(): ?int
    {
        return $this->job_id;
    }

    public function setJobId(int $job_id): static
    {
        $this->job_id = $job_id;

        return $this;
    }

    public function getRaiting(): ?int
    {
        return $this->raiting;
    }

    public function setRaiting(int $raiting): static
    {
        $this->raiting = $raiting;

        return $this;
    }

    public function getComment(): ?string
    {
        return $this->comment;
    }

    public function setComment(string $comment): static
    {
        $this->comment = $comment;

        return $this;
    }

    public function getCreatedAt(): ?\DateTimeInterface
    {
        return $this->created_at;
    }

    public function setCreatedAt(?\DateTimeInterface $created_at): static
    {
        $this->created_at = $created_at;

        return $this;
    }
}
</file>

<file path="Form/ApplicationFormType.php">
<?php

namespace App\Form;

use App\Entity\Applications;
use Symfony\Component\Form\AbstractType;
use Symfony\Component\Form\FormBuilderInterface;
use Symfony\Component\OptionsResolver\OptionsResolver;

class ApplicationFormType extends AbstractType
{
    public function buildForm(FormBuilderInterface $builder, array $options): void
    {
        $builder
            ->add('status')
            ->add('appliedAt')
            ->add('cover_letter')
            ->add('resume_path')
            ->add('coverRating')
            
        ;
    }

    public function configureOptions(OptionsResolver $resolver): void
    {
        $resolver->setDefaults([
            'data_class' => Applications::class,
        ]);
    }
}
</file>

<file path="Form/CreateJobFormType.php">
<?php

namespace App\Form;

use App\Entity\Jobs;
use Symfony\Component\Form\AbstractType;
use Symfony\Component\Form\FormBuilderInterface;
use Symfony\Component\OptionsResolver\OptionsResolver;

class CreateJobFormType extends AbstractType
{
    public function buildForm(FormBuilderInterface $builder, array $options): void
    {
        $builder
            ->add('jobTitle')
            ->add('eventTitle')
            ->add('jobLocation')
            ->add('employmentType')
            ->add('applicationDeadLine')
            ->add('minSalary')
            ->add('maxSalary')
            ->add('currency')
            ->add('jobDescreption')
            ->add('recruiterName')
            ->add('recruiterEmail')
            
            
        ;
    }

    public function configureOptions(OptionsResolver $resolver): void
    {
        $resolver->setDefaults([
            'data_class' => Jobs::class,
        ]);
    }
}
</file>

<file path="Form/EditEventsType.php">
<?php

namespace App\Form;

use App\Entity\Events;
use Symfony\Component\Form\AbstractType;
use Symfony\Component\Form\FormBuilderInterface;
use Symfony\Component\OptionsResolver\OptionsResolver;

class EditEventType extends AbstractType
{
    public function buildForm(FormBuilderInterface $builder, array $options): void
    {
        $builder
            ->add('name')
            ->add('description')
            ->add('startTime')
            ->add('endTime')
            ->add('location')
            ->add('image')
            ->add('points')
            
        ;
    }

    public function configureOptions(OptionsResolver $resolver): void
    {
        $resolver->setDefaults([
            'data_class' => Events::class,
        ]);
    }
}
</file>

<file path="Form/EditJobsType.php">
<?php

namespace App\Form;

use App\Entity\Jobs;
use Symfony\Component\Form\AbstractType;
use Symfony\Component\Form\FormBuilderInterface;
use Symfony\Component\OptionsResolver\OptionsResolver;

class EditJobsType extends AbstractType
{
    public function buildForm(FormBuilderInterface $builder, array $options): void
    {
        $builder
            ->add('jobTitle')
            ->add('eventTitle')
            ->add('jobLocation')
            ->add('employmentType')
            ->add('applicationDeadLine')
            ->add('minSalary')
            ->add('maxSalary')
            ->add('currency')
            ->add('jobDescreption')
            ->add('recruiterName')
            ->add('recruiterEmail')
            ->add('createdAt')
            
        ;
    }

    public function configureOptions(OptionsResolver $resolver): void
    {
        $resolver->setDefaults([
            'data_class' => Jobs::class,
        ]);
    }
}
</file>

<file path="Form/EventsType.php">
<?php
// src/Form/EventsType.php

namespace App\Form;

use App\Entity\Events;
use App\Entity\Category;
use Symfony\Component\Form\AbstractType;
use Symfony\Component\Form\FormBuilderInterface;
use Symfony\Bridge\Doctrine\Form\Type\EntityType;
use Symfony\Component\Form\Extension\Core\Type\FileType;
use Symfony\Component\Form\Extension\Core\Type\TextType;
use Symfony\Component\Form\Extension\Core\Type\DateTimeType;
use Symfony\Component\Form\Extension\Core\Type\IntegerType;
use Symfony\Component\OptionsResolver\OptionsResolver;
use Symfony\Component\Validator\Constraints\NotBlank;
use Symfony\Component\Validator\Constraints\File;
use Symfony\Component\Validator\Constraints\Image;
// Ajoutez cette contrainte si vous voulez valider que endTime > startTime dans le formulaire
use Symfony\Component\Validator\Constraints\GreaterThan;

class EventsType extends AbstractType
{
    public function buildForm(FormBuilderInterface $builder, array $options): void
    {
        $builder
            ->add('name', TextType::class, [
                'label' => 'Event Name',
                'constraints' => [
                    new NotBlank(['message' => 'Please enter an event name.']),
                ],
            ])
            ->add('description', TextType::class, [ // Ou TextareaType
                'label' => 'Description',
                 'constraints' => [
                    new NotBlank(['message' => 'Please enter a description.']),
                ],
            ])
            ->add('startTime', DateTimeType::class, [
                'widget' => 'single_text',
                'label' => 'Start Time',
                'html5' => true,
                'mapped' => false, // <<< AJOUTER ICI
                 'constraints' => [
                    new NotBlank(['message' => 'Please select a start time.']),
                ],
                 'attr' => ['min' => date('Y-m-d\TH:i')],
            ])
            ->add('endTime', DateTimeType::class, [
                'widget' => 'single_text',
                'label' => 'End Time',
                 'html5' => true,
                 'mapped' => false, // <<< AJOUTER ICI
                 'constraints' => [
                    new NotBlank(['message' => 'Please select an end time.']),
                    // Exemple de validation pour s'assurer que endTime > startTime
                    // Fonctionne car le formulaire rÃ©cupÃ¨re la valeur de startTime mÃªme s'il n'est pas mappÃ©
                    new GreaterThan([
                        'propertyPath' => 'parent.all[startTime].data', // AccÃ¨de Ã  la donnÃ©e du champ startTime
                         'message' => 'End time must be after start time.'
                    ])
                ],
                 'attr' => ['min' => date('Y-m-d\TH:i')],
            ])
             ->add('location', TextType::class, [
                 'label' => 'Location',
                  'constraints' => [
                     new NotBlank(['message' => 'Please enter a location.']),
                 ],
                 // Ce champ est mappÃ© (par dÃ©faut mapped=true)
             ])
              ->add('points', IntegerType::class, [
                 'label' => 'Points',
                  'constraints' => [
                     new NotBlank(['message' => 'Please enter the points.']),
                 ],
                  // Ce champ est mappÃ©
             ])
            ->add('categoryId', EntityType::class, [
                'class' => Category::class,
                'choice_label' => 'name',
                'label' => 'Category',
                 'placeholder' => 'Choose a category',
                 'constraints' => [
                    new NotBlank(['message' => 'Please select a category.']),
                ],
                 // Ce champ est mappÃ©
            ])
            ->add('image', FileType::class, [
                'label' => 'Event Image',
                'mapped' => false, // DÃ©jÃ  false, c'est correct
                'required' => false, // Ou true si obligatoire + contrainte NotBlank
                 'constraints' => [
                     // Ajoutez ici la contrainte NotBlank si required=true
                     // new NotBlank(['message' => 'Please upload an event image.']),
                     new Image([
                         'maxSize' => '5M',
                         'mimeTypes' => [
                             'image/jpeg',
                             'image/png',
                             'image/gif',
                         ],
                         'mimeTypesMessage' => 'Please upload a valid image (JPEG, PNG, GIF).',
                         'maxSizeMessage' => 'The image is too large ({{ size }} {{ suffix }}). Allowed maximum size is {{ limit }} {{ suffix }}.',
                     ])
                 ],
            ]);
    }

    public function configureOptions(OptionsResolver $resolver): void
    {
        $resolver->setDefaults([
            'data_class' => Events::class,
            // 'csrf_protection' => true, // GÃ©nÃ©ralement activÃ© par dÃ©faut
            // 'csrf_field_name' => '_token',
            // 'csrf_token_id'   => 'event_item', // ID unique pour le token CSRF
        ]);
    }
}
</file>

<file path="Form/LoginFormType.php">
<?php

namespace App\Form;

use App\Entity\Users;
use Symfony\Component\Form\AbstractType;
use Symfony\Component\Form\FormBuilderInterface;
use Symfony\Component\OptionsResolver\OptionsResolver;

class LoginFormType extends AbstractType
{
    public function buildForm(FormBuilderInterface $builder, array $options): void
    {
        $builder
            ->add('username')
            ->add('password')
            ->add('email')
            ->add('createdAt')
            ->add('updatedAt')
            ->add('points')
            ->add('age')
            ->add('gender')
            ->add('argent')
        ;
    }

    public function configureOptions(OptionsResolver $resolver): void
    {
        $resolver->setDefaults([
            'data_class' => Users::class,
        ]);
    }
}
</file>

<file path="Form/ProfileType.php">
<?php
namespace App\Form;

use App\Entity\Users;
use Symfony\Component\Form\AbstractType;
use Symfony\Component\Form\FormBuilderInterface;
use Symfony\Component\OptionsResolver\OptionsResolver;
use Symfony\Component\Form\Extension\Core\Type\TextType;
use Symfony\Component\Form\Extension\Core\Type\EmailType;
use Symfony\Component\Form\Extension\Core\Type\IntegerType;
use Symfony\Component\Form\Extension\Core\Type\ChoiceType;
use Symfony\Component\Form\Extension\Core\Type\NumberType;

class ProfileType extends AbstractType
{
    public function buildForm(FormBuilderInterface $builder, array $options): void
    {
        $builder
            ->add('username', TextType::class, [
                'label' => 'Username'
            ])
            ->add('email', EmailType::class, [
                'label' => 'Email Address'
            ])
            ->add('age', IntegerType::class, [
                'label' => 'Age',
                'attr' => [
                    'min' => 13,
                    'max' => 120
                ]
            ])
            ->add('gender', ChoiceType::class, [
                'label' => 'Gender',
                'choices' => [
                    'Male' => 'Male',
                    'Female' => 'Female'
                ]
            ])
            ->add('points', IntegerType::class, [
                'label' => 'Points',
                'required' => false
            ])
            ->add('argent', NumberType::class, [
                'label' => 'Balance (â¬)',
                'required' => false,
                'scale' => 2
            ]);
    }

    public function configureOptions(OptionsResolver $resolver): void
    {
        $resolver->setDefaults([
            'data_class' => Users::class,
        ]);
    }
}
</file>

<file path="Form/RegistrationFormType.php">
<?php

namespace App\Form;

use App\Entity\Users;
use Symfony\Component\Form\AbstractType;
use Symfony\Component\Form\Extension\Core\Type\CheckboxType;
use Symfony\Component\Form\Extension\Core\Type\EmailType;
use Symfony\Component\Form\Extension\Core\Type\PasswordType;
use Symfony\Component\Form\Extension\Core\Type\TextType;
use Symfony\Component\Form\Extension\Core\Type\NumberType;
use Symfony\Component\Form\Extension\Core\Type\ChoiceType;
use Symfony\Component\Form\FormBuilderInterface;
use Symfony\Component\OptionsResolver\OptionsResolver;
use Symfony\Component\Validator\Constraints\IsTrue;
use Symfony\Component\Validator\Constraints\Length;
use Symfony\Component\Validator\Constraints\NotBlank;
use Symfony\Component\Validator\Constraints\Range;

class RegistrationFormType extends AbstractType
{
    public function buildForm(FormBuilderInterface $builder, array $options): void
    {
        $builder
            ->add('username', TextType::class, [
                'attr' => [
                    'class' => 'form-control',
                    'placeholder' => 'Username'
                ],
                'constraints' => [
                    new NotBlank([
                        'message' => 'Please enter a username',
                    ]),
                ],
                'label' => 'Username'
            ])
            ->add('email', EmailType::class, [
                'attr' => [
                    'class' => 'form-control',
                    'placeholder' => 'Email'
                ],
                'constraints' => [
                    new NotBlank([
                        'message' => 'Please enter an email',
                    ]),
                ],
                'label' => 'Email'
            ])
            ->add('age', NumberType::class, [
                'attr' => [
                    'class' => 'form-control',
                    'placeholder' => 'Age'
                ],
                'constraints' => [
                    new NotBlank([
                        'message' => 'Please enter your age',
                    ]),
                    new Range([
                        'min' => 18,
                        'minMessage' => 'You must be at least {{ limit }} years old',
                    ]),
                ],
                'label' => 'Age'
            ])
            ->add('gender', ChoiceType::class, [
                'choices' => [
                    'Male' => 'male',
                    'Female' => 'female',
                ],
                'attr' => [
                    'class' => 'form-control'
                ],
                'constraints' => [
                    new NotBlank([
                        'message' => 'Please select your gender',
                    ]),
                ],
                'label' => 'Gender'
            ])
            ->add('plainPassword', PasswordType::class, [
                'mapped' => false,
                'attr' => [
                    'class' => 'form-control',
                    'placeholder' => 'Password',
                    'autocomplete' => 'new-password'
                ],
                'constraints' => [
                    new NotBlank([
                        'message' => 'Please enter a password',
                    ]),
                    new Length([
                        'min' => 6,
                        'minMessage' => 'Your password should be at least {{ limit }} characters',
                        'max' => 4096,
                    ]),
                ],
                'label' => 'Password'
            ])
            ->add('agreeTerms', CheckboxType::class, [
                'mapped' => false,
                'constraints' => [
                    new IsTrue([
                        'message' => 'You should agree to our terms.',
                    ]),
                ],
                'label' => 'I agree to the terms and conditions'
            ])
        ;
    }

    public function configureOptions(OptionsResolver $resolver): void
    {
        $resolver->setDefaults([
            'data_class' => Users::class,
        ]);
    }
}
</file>

<file path="Kernel.php">
<?php

namespace App;

use Symfony\Bundle\FrameworkBundle\Kernel\MicroKernelTrait;
use Symfony\Component\HttpKernel\Kernel as BaseKernel;

class Kernel extends BaseKernel
{
    use MicroKernelTrait;
}
</file>

<file path="Repository/ApplicationsRepository.php">
<?php
// src/Repository/ApplicationsRepository.php
namespace App\Repository;

use App\Entity\Applications;
use App\Entity\Jobs;
use App\Entity\Users;
use Doctrine\Bundle\DoctrineBundle\Repository\ServiceEntityRepository;
use Doctrine\Persistence\ManagerRegistry;

class ApplicationsRepository extends ServiceEntityRepository
{
    public function __construct(ManagerRegistry $registry)
    {
        parent::__construct($registry, Applications::class);
    }

    /**
     * Build a new Applications entity (without persisting).
     *
     * @throws \LogicException if the user has already applied to this job
     */
    public function createApplication(Users $user, Jobs $job): Applications
{
    // Prevent duplicate application
    $existing = $this->findOneBy(['user_id' => $user, 'job_id' => $job]);
    if ($existing) {
        throw new \LogicException('You have already applied to this job.');
    }

    $application = new Applications();
    $application->setUserId($user);
    $application->setJobId($job);
    $application->setAppliedAt(new \DateTime());
    $application->setStatus('Pending');

    return $application;
}
public function findApplicationsForOrganizer(Users $organizer)
{
    return $this->createQueryBuilder('a')
        ->join('a.job_id_id', 'j')      // Match Applications->jobId property
        ->join('j.userId', 'u')     // Match Jobs->userId property
        ->where('u.id = :organizerId')
        ->setParameter('organizerId', $organizer->getId())
        ->orderBy('a.appliedAt', 'DESC')
        ->getQuery()
        ->getResult();
}
public function findApplicationsToOrganizerJobs(Users $organizer)
{
    return $this->createQueryBuilder('a')
        ->join('a.job_id_id', 'j')       // Join applications to jobs
        ->join('j.userId', 'u')      // Join jobs to their owner
        ->where('u.id = :organizerId')
        ->setParameter('organizerId', $organizer->getId())
        ->orderBy('a.appliedAt', 'DESC')
        ->getQuery()
        ->getResult();
}
    
public function findApplicationsByUser(Users $user)
{
    return $this->createQueryBuilder('a')
        ->andWhere('a.user_id_id = :user') // Match the Applications->userId property
        ->setParameter('user', $user)
        ->join('a.job_id_id', 'j') // Join with Jobs
        ->orderBy('a.appliedAt', 'DESC')
        ->getQuery()
        ->getResult();
}


public function findAllApplications(): array
{
    return $this->createQueryBuilder('a')
        ->leftJoin('a.user_id_id', 'u')
        ->leftJoin('a.job_id_id', 'j')
        ->addSelect('u', 'j')
        ->orderBy('a.appliedAt', 'DESC')
        ->getQuery()
        ->getResult();
}

}
</file>

<file path="Repository/CategoryRepository.php">
<?php

namespace App\Repository;

use App\Entity\Category;
use Doctrine\Bundle\DoctrineBundle\Repository\ServiceEntityRepository;
use Doctrine\Persistence\ManagerRegistry;

/**
 * @extends ServiceEntityRepository<Category>
 *
 * @method Category|null find($id, $lockMode = null, $lockVersion = null)
 * @method Category|null findOneBy(array $criteria, array $orderBy = null)
 * @method Category[]    findAll()
 * @method Category[]    findBy(array $criteria, array $orderBy = null, $limit = null, $offset = null)
 */
class CategoryRepository extends ServiceEntityRepository
{
    public function __construct(ManagerRegistry $registry)
    {
        parent::__construct($registry, Category::class);
    }

//    /**
//     * @return Category[] Returns an array of Category objects
//     */
//    public function findByExampleField($value): array
//    {
//        return $this->createQueryBuilder('c')
//            ->andWhere('c.exampleField = :val')
//            ->setParameter('val', $value)
//            ->orderBy('c.id', 'ASC')
//            ->setMaxResults(10)
//            ->getQuery()
//            ->getResult()
//        ;
//    }

//    public function findOneBySomeField($value): ?Category
//    {
//        return $this->createQueryBuilder('c')
//            ->andWhere('c.exampleField = :val')
//            ->setParameter('val', $value)
//            ->getQuery()
//            ->getOneOrNullResult()
//        ;
//    }
}
</file>

<file path="Repository/CommentsRepository.php">
<?php

namespace App\Repository;

use App\Entity\Comments;
use Doctrine\Bundle\DoctrineBundle\Repository\ServiceEntityRepository;
use Doctrine\Persistence\ManagerRegistry;

/**
 * @extends ServiceEntityRepository<Comments>
 *
 * @method Comments|null find($id, $lockMode = null, $lockVersion = null)
 * @method Comments|null findOneBy(array $criteria, array $orderBy = null)
 * @method Comments[]    findAll()
 * @method Comments[]    findBy(array $criteria, array $orderBy = null, $limit = null, $offset = null)
 */
class CommentsRepository extends ServiceEntityRepository
{
    public function __construct(ManagerRegistry $registry)
    {
        parent::__construct($registry, Comments::class);
    }

//    /**
//     * @return Comments[] Returns an array of Comments objects
//     */
//    public function findByExampleField($value): array
//    {
//        return $this->createQueryBuilder('c')
//            ->andWhere('c.exampleField = :val')
//            ->setParameter('val', $value)
//            ->orderBy('c.id', 'ASC')
//            ->setMaxResults(10)
//            ->getQuery()
//            ->getResult()
//        ;
//    }

//    public function findOneBySomeField($value): ?Comments
//    {
//        return $this->createQueryBuilder('c')
//            ->andWhere('c.exampleField = :val')
//            ->setParameter('val', $value)
//            ->getQuery()
//            ->getOneOrNullResult()
//        ;
//    }
}
</file>

<file path="Repository/ConversionRepository.php">
<?php

namespace App\Repository;

use App\Entity\Conversion;
use Doctrine\Bundle\DoctrineBundle\Repository\ServiceEntityRepository;
use Doctrine\Persistence\ManagerRegistry;

/**
 * @extends ServiceEntityRepository<Conversion>
 *
 * @method Conversion|null find($id, $lockMode = null, $lockVersion = null)
 * @method Conversion|null findOneBy(array $criteria, array $orderBy = null)
 * @method Conversion[]    findAll()
 * @method Conversion[]    findBy(array $criteria, array $orderBy = null, $limit = null, $offset = null)
 */
class ConversionRepository extends ServiceEntityRepository
{
    public function __construct(ManagerRegistry $registry)
    {
        parent::__construct($registry, Conversion::class);
    }

//    /**
//     * @return Conversion[] Returns an array of Conversion objects
//     */
//    public function findByExampleField($value): array
//    {
//        return $this->createQueryBuilder('c')
//            ->andWhere('c.exampleField = :val')
//            ->setParameter('val', $value)
//            ->orderBy('c.id', 'ASC')
//            ->setMaxResults(10)
//            ->getQuery()
//            ->getResult()
//        ;
//    }

//    public function findOneBySomeField($value): ?Conversion
//    {
//        return $this->createQueryBuilder('c')
//            ->andWhere('c.exampleField = :val')
//            ->setParameter('val', $value)
//            ->getQuery()
//            ->getOneOrNullResult()
//        ;
//    }
}
</file>

<file path="Repository/EventsRepository.php">
<?php

namespace App\Repository;

use App\Entity\Events;
use Doctrine\Bundle\DoctrineBundle\Repository\ServiceEntityRepository;
use Doctrine\Persistence\ManagerRegistry;

class EventsRepository extends ServiceEntityRepository
{
    public function __construct(ManagerRegistry $registry)
    {
        parent::__construct($registry, Events::class);
    }

    public function findByOrganizer($organizer): array
    {
        return $this->createQueryBuilder('e')
            ->andWhere('e.organizerId = :organizer')
            ->setParameter('organizer', $organizer)
            ->orderBy('e.startTime', 'ASC')
            ->getQuery()
            ->getResult();
    }

    public function findByNameDescriptionCategory(?string $searchTerm, ?int $categoryId, ?int $excludeOrganizerId = null): array
    {
        $queryBuilder = $this->createQueryBuilder('e')
            ->leftJoin('e.categoryId', 'c')
            ->addSelect('c');

        // Exclude events by organizer if specified
        if ($excludeOrganizerId !== null) {
            $queryBuilder
                ->andWhere('e.organizerId != :excludeOrgId')
                ->setParameter('excludeOrgId', $excludeOrganizerId);
        }

        // Category filter
        if ($categoryId !== null && $categoryId > 0) {
            $queryBuilder
                ->andWhere('e.categoryId = :catId')
                ->setParameter('catId', $categoryId);
        }

        // Search term filter
        $cleanSearchTerm = $searchTerm !== null ? trim($searchTerm) : null;
        if (!empty($cleanSearchTerm)) {
            $queryBuilder
                ->andWhere('LOWER(e.name) LIKE LOWER(:term) OR LOWER(e.description) LIKE LOWER(:term)')
                ->setParameter('term', '%' . $cleanSearchTerm . '%');
        }

        // Ordering
        $queryBuilder->orderBy('e.startTime', 'ASC')
                     ->addOrderBy('e.name', 'ASC');

        return $queryBuilder->getQuery()->getResult();
    }
}
</file>

<file path="Repository/FeedPostsRepository.php">
<?php

namespace App\Repository;

use App\Entity\FeedPosts;
use Doctrine\Bundle\DoctrineBundle\Repository\ServiceEntityRepository;
use Doctrine\Persistence\ManagerRegistry;

/**
 * @extends ServiceEntityRepository<FeedPosts>
 *
 * @method FeedPosts|null find($id, $lockMode = null, $lockVersion = null)
 * @method FeedPosts|null findOneBy(array $criteria, array $orderBy = null)
 * @method FeedPosts[]    findAll()
 * @method FeedPosts[]    findBy(array $criteria, array $orderBy = null, $limit = null, $offset = null)
 */
class FeedPostsRepository extends ServiceEntityRepository
{
    public function __construct(ManagerRegistry $registry)
    {
        parent::__construct($registry, FeedPosts::class);
    }

//    /**
//     * @return FeedPosts[] Returns an array of FeedPosts objects
//     */
//    public function findByExampleField($value): array
//    {
//        return $this->createQueryBuilder('f')
//            ->andWhere('f.exampleField = :val')
//            ->setParameter('val', $value)
//            ->orderBy('f.id', 'ASC')
//            ->setMaxResults(10)
//            ->getQuery()
//            ->getResult()
//        ;
//    }

//    public function findOneBySomeField($value): ?FeedPosts
//    {
//        return $this->createQueryBuilder('f')
//            ->andWhere('f.exampleField = :val')
//            ->setParameter('val', $value)
//            ->getQuery()
//            ->getOneOrNullResult()
//        ;
//    }
}
</file>

<file path="Repository/GroupFeedPostsRepository.php">
<?php

namespace App\Repository;

use App\Entity\GroupFeedPosts;
use Doctrine\Bundle\DoctrineBundle\Repository\ServiceEntityRepository;
use Doctrine\Persistence\ManagerRegistry;

/**
 * @extends ServiceEntityRepository<GroupFeedPosts>
 *
 * @method GroupFeedPosts|null find($id, $lockMode = null, $lockVersion = null)
 * @method GroupFeedPosts|null findOneBy(array $criteria, array $orderBy = null)
 * @method GroupFeedPosts[]    findAll()
 * @method GroupFeedPosts[]    findBy(array $criteria, array $orderBy = null, $limit = null, $offset = null)
 */
class GroupFeedPostsRepository extends ServiceEntityRepository
{
    public function __construct(ManagerRegistry $registry)
    {
        parent::__construct($registry, GroupFeedPosts::class);
    }

//    /**
//     * @return GroupFeedPosts[] Returns an array of GroupFeedPosts objects
//     */
//    public function findByExampleField($value): array
//    {
//        return $this->createQueryBuilder('g')
//            ->andWhere('g.exampleField = :val')
//            ->setParameter('val', $value)
//            ->orderBy('g.id', 'ASC')
//            ->setMaxResults(10)
//            ->getQuery()
//            ->getResult()
//        ;
//    }

//    public function findOneBySomeField($value): ?GroupFeedPosts
//    {
//        return $this->createQueryBuilder('g')
//            ->andWhere('g.exampleField = :val')
//            ->setParameter('val', $value)
//            ->getQuery()
//            ->getOneOrNullResult()
//        ;
//    }
}
</file>

<file path="Repository/GroupMembersRepository.php">
<?php

namespace App\Repository;

use App\Entity\GroupMembers;
use Doctrine\Bundle\DoctrineBundle\Repository\ServiceEntityRepository;
use Doctrine\Persistence\ManagerRegistry;

/**
 * @extends ServiceEntityRepository<GroupMembers>
 *
 * @method GroupMembers|null find($id, $lockMode = null, $lockVersion = null)
 * @method GroupMembers|null findOneBy(array $criteria, array $orderBy = null)
 * @method GroupMembers[]    findAll()
 * @method GroupMembers[]    findBy(array $criteria, array $orderBy = null, $limit = null, $offset = null)
 */
class GroupMembersRepository extends ServiceEntityRepository
{
    public function __construct(ManagerRegistry $registry)
    {
        parent::__construct($registry, GroupMembers::class);
    }

//    /**
//     * @return GroupMembers[] Returns an array of GroupMembers objects
//     */
//    public function findByExampleField($value): array
//    {
//        return $this->createQueryBuilder('g')
//            ->andWhere('g.exampleField = :val')
//            ->setParameter('val', $value)
//            ->orderBy('g.id', 'ASC')
//            ->setMaxResults(10)
//            ->getQuery()
//            ->getResult()
//        ;
//    }

//    public function findOneBySomeField($value): ?GroupMembers
//    {
//        return $this->createQueryBuilder('g')
//            ->andWhere('g.exampleField = :val')
//            ->setParameter('val', $value)
//            ->getQuery()
//            ->getOneOrNullResult()
//        ;
//    }
}
</file>

<file path="Repository/HistoriquePointsRepository.php">
<?php

namespace App\Repository;

use App\Entity\HistoriquePoints;
use App\Entity\Users;
use Doctrine\Bundle\DoctrineBundle\Repository\ServiceEntityRepository;
use Doctrine\Persistence\ManagerRegistry;

class HistoriquePointsRepository extends ServiceEntityRepository
{
    public function __construct(ManagerRegistry $registry)
    {
        parent::__construct($registry, HistoriquePoints::class);
    }

    public function findRecentByUser(Users $user, int $limit = 10): array
    {
        return $this->createQueryBuilder('h')
            ->where('h.user = :user')
            ->setParameter('user', $user)
            ->orderBy('h.date', 'DESC')
            ->setMaxResults($limit)
            ->getQuery()
            ->getResult();
    }
}
</file>

<file path="Repository/JobsRepository.php">
<?php

namespace App\Repository;

use App\Entity\Jobs;
use Doctrine\Bundle\DoctrineBundle\Repository\ServiceEntityRepository;
use Doctrine\Persistence\ManagerRegistry;
use App\Entity\Users;

/**
 * @extends ServiceEntityRepository<Jobs>
 */
class JobsRepository extends ServiceEntityRepository
{
    public function __construct(ManagerRegistry $registry)
    {
        parent::__construct($registry, Jobs::class);
    }

    /**
     * @return Jobs[] Returns all jobs sorted alphabetically by title
     */
    public function findAllSortedByTitle(): array
    {
        return $this->createQueryBuilder('j')
            ->orderBy('j.jobTitle', 'ASC')
            ->getQuery()
            ->getResult();
    }
    public function findAllExceptUser($user): array
    {
        return $this->createQueryBuilder('j')
            ->where('j.userId != :user')  // use 'userId' here
            ->setParameter('user', $user)
            ->orderBy('j.jobTitle', 'ASC')
            ->getQuery()
            ->getResult();
    }

    /**
     * @return Jobs[] //Returns all jobs with optional sorting
     */
    public function findAllWithSorting(string $sortField = 'jobTitle', string $sortDirection = 'ASC'): array
    {
        return $this->createQueryBuilder('j')
            ->orderBy('j.' . $sortField, $sortDirection)
            ->getQuery()
            ->getResult();
    }

    public function findByUser(Users $user): array
    {
        return $this->createQueryBuilder('j')
            ->andWhere('j.userId = :user')
            ->setParameter('user', $user)
            ->orderBy('j.jobTitle', 'ASC')
            ->getQuery()
            ->getResult();
    }
    public function delete(Jobs $job): void
{
    $this->_em->remove($job);
    $this->_em->flush();
}

}

// In JobsRepository.php

// // Find jobs by event
// public function findByEvent(Events $event): array
// {
//     return $this->createQueryBuilder('j')
//         ->andWhere('j.eventId = :event')
//         ->setParameter('event', $event)
//         ->orderBy('j.jobTitle', 'ASC')
//         ->getQuery()
//         ->getResult();
// }

// // Find jobs with salary range
// public function findBySalaryRange(int $min, int $max): array
// {
//     return $this->createQueryBuilder('j')
//         ->andWhere('j.minSalary >= :min')
//         ->andWhere('j.maxSalary <= :max')
//         ->setParameter('min', $min)
//         ->setParameter('max', $max)
//         ->orderBy('j.jobTitle', 'ASC')
//         ->getQuery()
//         ->getResult();
// }

// // Search jobs by title or description
// public function searchJobs(string $query): array
// {
//     return $this->createQueryBuilder('j')
//         ->andWhere('j.jobTitle LIKE :query OR j.jobDescreption LIKE :query')
//         ->setParameter('query', '%'.$query.'%')
//         ->orderBy('j.jobTitle', 'ASC')
//         ->getQuery()
//         ->getResult();
// }
//}

// src/Repository/JobsRepository.php
// namespace App\Repository;

// use App\Entity\Jobs;
// use Doctrine\Bundle\DoctrineBundle\Repository\ServiceEntityRepository;
// use Doctrine\Persistence\ManagerRegistry;
// use Psr\Log\LoggerInterface;

// class JobsRepository extends ServiceEntityRepository
// {
//     private $logger;

//     public function __construct(ManagerRegistry $registry, LoggerInterface $logger)
//     {
//         parent::__construct($registry, Jobs::class);
//         $this->logger = $logger;
//     }

//     public function findAllSortedByTitle(): array
//     {
//         $query = $this->createQueryBuilder('j')
//             ->orderBy('j.jobTitle', 'ASC')
//             ->getQuery();

//         // Log the generated SQL
//         $this->logger->debug('Jobs Query: '.$query->getSQL());

//         return $query->getResult();
//     }
</file>

<file path="Repository/LikesRepository.php">
<?php

namespace App\Repository;

use App\Entity\Likes;
use Doctrine\Bundle\DoctrineBundle\Repository\ServiceEntityRepository;
use Doctrine\Persistence\ManagerRegistry;

/**
 * @extends ServiceEntityRepository<Likes>
 *
 * @method Likes|null find($id, $lockMode = null, $lockVersion = null)
 * @method Likes|null findOneBy(array $criteria, array $orderBy = null)
 * @method Likes[]    findAll()
 * @method Likes[]    findBy(array $criteria, array $orderBy = null, $limit = null, $offset = null)
 */
class LikesRepository extends ServiceEntityRepository
{
    public function __construct(ManagerRegistry $registry)
    {
        parent::__construct($registry, Likes::class);
    }

//    /**
//     * @return Likes[] Returns an array of Likes objects
//     */
//    public function findByExampleField($value): array
//    {
//        return $this->createQueryBuilder('l')
//            ->andWhere('l.exampleField = :val')
//            ->setParameter('val', $value)
//            ->orderBy('l.id', 'ASC')
//            ->setMaxResults(10)
//            ->getQuery()
//            ->getResult()
//        ;
//    }

//    public function findOneBySomeField($value): ?Likes
//    {
//        return $this->createQueryBuilder('l')
//            ->andWhere('l.exampleField = :val')
//            ->setParameter('val', $value)
//            ->getQuery()
//            ->getOneOrNullResult()
//        ;
//    }
}
</file>

<file path="Repository/MessageRepository.php">
<?php

namespace App\Repository;
use App\Entity\Users;

use App\Entity\Message;
use Doctrine\Bundle\DoctrineBundle\Repository\ServiceEntityRepository;
use Doctrine\Persistence\ManagerRegistry;

/**
 * @extends ServiceEntityRepository<Message>
 *
 * @method Message|null find($id, $lockMode = null, $lockVersion = null)
 * @method Message|null findOneBy(array $criteria, array $orderBy = null)
 * @method Message[]    findAll()
 * @method Message[]    findBy(array $criteria, array $orderBy = null, $limit = null, $offset = null)
 */
class MessageRepository extends ServiceEntityRepository
{
    public function __construct(ManagerRegistry $registry)
    {
        parent::__construct($registry, Message::class);
    }
    public function findLastMessagesWithUserInfo(Users $currentUser): array
    {
        // Ãtape 1 : Trouver tous les utilisateurs avec qui l'utilisateur courant a Ã©changÃ© des messages
        $subquery = $this->getEntityManager()->createQueryBuilder()
            ->select('DISTINCT CASE WHEN m.sender = :currentUser THEN IDENTITY(m.receiver) ELSE IDENTITY(m.sender) END')
            ->from(Message::class, 'm')
            ->where('m.sender = :currentUser OR m.receiver = :currentUser');

        $userIds = array_column($subquery->getQuery()->setParameter('currentUser', $currentUser)->getScalarResult(), 1);

        if (empty($userIds)) {
            return [];
        }

        // Pour simplifier le problÃ¨me, nous allons faire une requÃªte sÃ©parÃ©e pour chaque utilisateur
        $results = [];
        foreach ($userIds as $otherUserId) {
            // Trouver l'autre utilisateur
            $otherUser = $this->getEntityManager()->getRepository(Users::class)->find($otherUserId);
            if (!$otherUser) continue;

            // Trouver le dernier message Ã©changÃ© entre les deux utilisateurs
            $lastMessageQb = $this->createQueryBuilder('m')
                ->where('(m.sender = :currentUser AND m.receiver = :otherUser) OR (m.sender = :otherUser AND m.receiver = :currentUser)')
                ->setParameter('currentUser', $currentUser)
                ->setParameter('otherUser', $otherUser)
                ->orderBy('m.sentAt', 'DESC')
                ->setMaxResults(1);

            $lastMessage = $lastMessageQb->getQuery()->getOneOrNullResult();

            if ($lastMessage) {
                $results[] = [
                    'user' => [
                        'id' => $otherUser->getId(),
                        'nom' => $otherUser->getNom(),
                        'prenom' => $otherUser->getPrenom()
                    ],
                    'message' => [
                        'id' => $lastMessage->getId(),
                        'content' => $lastMessage->getContent(),
                        'sentAt' => $lastMessage->getSentAt()->format('Y-m-d H:i:s')
                    ]
                ];
            }

        }

    // Trier les rÃ©sultats par date de message dÃ©croissante (les plus rÃ©cents d'abord)
usort($results, function($a, $b) {
    return strtotime($b['message']['sentAt']) - strtotime($a['message']['sentAt']);
});

return $results;
}


public function findLastMessagesBetweenUsers(Users $user): array
    {
        // Trouver tous les utilisateurs avec qui l'utilisateur courant a Ã©changÃ© des messages
        $qb1 = $this->createQueryBuilder('m1')
            ->select('DISTINCT CASE WHEN m1.sender = :user THEN m1.receiver ELSE m1.sender END AS userId')
            ->where('m1.sender = :user OR m1.receiver = :user')
            ->setParameter('user', $user);

        $userIds = array_column($qb1->getQuery()->getArrayResult(), 'userId');

        if (empty($userIds)) {
            return [];
        }

        // Pour chaque utilisateur, trouver le dernier message Ã©changÃ©
        $results = [];
        foreach ($userIds as $otherUserId) {
            $qb2 = $this->createQueryBuilder('m2')
                ->where('(m2.sender = :user AND m2.receiver = :otherUser) OR (m2.sender = :otherUser AND m2.receiver = :user)')
                ->setParameter('user', $user)
                ->setParameter('otherUser', $otherUserId)
                ->orderBy('m2.sentAt', 'DESC')
                ->setMaxResults(1);

            $lastMessage = $qb2->getQuery()->getOneOrNullResult();

            if ($lastMessage) {
                $results[] = $lastMessage;
            }
        }

        return $results;

    }


    /**
     * Trouve tous les messages entre deux utilisateurs
     */
    public function findMessagesBetweenUsers(Users $user1, Users $user2): array
    {
        return $this->createQueryBuilder('m')
            ->where('(m.sender = :user1 AND m.receiver = :user2) OR (m.sender = :user2 AND m.receiver = :user1)')
            ->setParameter('user1', $user1)
            ->setParameter('user2', $user2)
            ->orderBy('m.sentAt', 'ASC')
            ->getQuery()
            ->getResult();
    }

}
</file>

<file path="Repository/MessagesRepository.php">
<?php

namespace App\Repository;

use App\Entity\Messages;
use Doctrine\Bundle\DoctrineBundle\Repository\ServiceEntityRepository;
use Doctrine\Persistence\ManagerRegistry;

/**
 * @extends ServiceEntityRepository<Messages>
 *
 * @method Messages|null find($id, $lockMode = null, $lockVersion = null)
 * @method Messages|null findOneBy(array $criteria, array $orderBy = null)
 * @method Messages[]    findAll()
 * @method Messages[]    findBy(array $criteria, array $orderBy = null, $limit = null, $offset = null)
 */
class MessagesRepository extends ServiceEntityRepository
{
    public function __construct(ManagerRegistry $registry)
    {
        parent::__construct($registry, Messages::class);
    }

//    /**
//     * @return Messages[] Returns an array of Messages objects
//     */
//    public function findByExampleField($value): array
//    {
//        return $this->createQueryBuilder('m')
//            ->andWhere('m.exampleField = :val')
//            ->setParameter('val', $value)
//            ->orderBy('m.id', 'ASC')
//            ->setMaxResults(10)
//            ->getQuery()
//            ->getResult()
//        ;
//    }

//    public function findOneBySomeField($value): ?Messages
//    {
//        return $this->createQueryBuilder('m')
//            ->andWhere('m.exampleField = :val')
//            ->setParameter('val', $value)
//            ->getQuery()
//            ->getOneOrNullResult()
//        ;
//    }
}
</file>

<file path="Repository/NotificationRepository.php">
<?php

namespace App\Repository;

use App\Entity\Notification;
use Doctrine\Bundle\DoctrineBundle\Repository\ServiceEntityRepository;
use Doctrine\Persistence\ManagerRegistry;

/**
 * @extends ServiceEntityRepository<Notification>
 *
 * @method Notification|null find($id, $lockMode = null, $lockVersion = null)
 * @method Notification|null findOneBy(array $criteria, array $orderBy = null)
 * @method Notification[]    findAll()
 * @method Notification[]    findBy(array $criteria, array $orderBy = null, $limit = null, $offset = null)
 */
class NotificationRepository extends ServiceEntityRepository
{
    public function __construct(ManagerRegistry $registry)
    {
        parent::__construct($registry, Notification::class);
    }

    /**
     * Trouve toutes les notifications non lues d'un utilisateur
     */
    public function findUnreadByUser($user)
    {
        return $this->createQueryBuilder('n')
            ->andWhere('n.user = :user')
            ->andWhere('n.is_read = :isRead')
            ->setParameter('user', $user)
            ->setParameter('isRead', false)
            ->orderBy('n.created_at', 'DESC')
            ->getQuery()
            ->getResult()
        ;
    }
    
    /**
     * Compte le nombre de notifications non lues d'un utilisateur
     */
    public function countUnreadByUser($user)
    {
        return $this->createQueryBuilder('n')
            ->select('COUNT(n.id)')
            ->andWhere('n.user = :user')
            ->andWhere('n.is_read = :isRead')
            ->setParameter('user', $user)
            ->setParameter('isRead', false)
            ->getQuery()
            ->getSingleScalarResult()
        ;
    }
}
</file>

<file path="Repository/ParticipationRepository.php">
<?php

namespace App\Repository;

use App\Entity\Participation;
use Doctrine\Bundle\DoctrineBundle\Repository\ServiceEntityRepository;
use Doctrine\Persistence\ManagerRegistry;
use Doctrine\ORM\EntityManagerInterface;
use App\Entity\Events;
use App\Entity\User;
use Symfony\Component\Security\Core\User\UserInterface;

/**
 * @extends ServiceEntityRepository<Participation>
 *
 * @method Participation|null find($id, $lockMode = null, $lockVersion = null)
 * @method Participation|null findOneBy(array $criteria, array $orderBy = null)
 * @method Participation[]    findAll()
 * @method Participation[]    findBy(array $criteria, array $orderBy = null, $limit = null, $offset = null)
 */
class ParticipationRepository extends ServiceEntityRepository
{
     private EntityManagerInterface $entityManager;

    public function __construct(ManagerRegistry $registry, EntityManagerInterface $entityManager)
    {
        parent::__construct($registry, Participation::class);
        $this->entityManager = $entityManager;
    }

 public function getGenderDistributionForEvent(Events $event): array
    {
        $qb = $this->entityManager->createQueryBuilder();

        $qb->select('participant.gender AS gender, COUNT(participant.id) AS genderCount')
            ->from(Participation::class, 'p_event')
            ->innerJoin('p_event.participant', 'participant')
            ->where('p_event.event = :event')
            ->andWhere('participant.gender IS NOT NULL') // Only consider participants with a gender
            ->groupBy('participant.gender')
            ->setParameter('event', $event);

        $results = $qb->getQuery()->getResult();

        // Ensure we always have entries for male and female, even if count is 0
        $genders = ['male' => 1, 'female' => 0]; 
        foreach ($results as $result) {
            if (isset($result['gender']) && array_key_exists(strtolower($result['gender']), $genders)) {
                $genders[strtolower($result['gender'])] = (int)$result['genderCount'];
            }
        }
        // Transform to desired array structure for the chart
        $output = [];
        foreach($genders as $genderKey => $count) {
            $output[] = ['gender' => ucfirst($genderKey), 'count' => $count];
        }
        return $output;
    }

public function findParticipantsOfMyEvents($organizer): array
{
    return $this->createQueryBuilder('p')
        ->join('p.event', 'e')
        ->where('e.organizerId = :organizer')
        ->setParameter('organizer', $organizer)
        ->getQuery()
        ->getResult();
}




}
</file>

<file path="Repository/ReviewsRepository.php">
<?php

namespace App\Repository;

use App\Entity\Reviews;
use Doctrine\Bundle\DoctrineBundle\Repository\ServiceEntityRepository;
use Doctrine\Persistence\ManagerRegistry;

/**
 * @extends ServiceEntityRepository<Reviews>
 *
 * @method Reviews|null find($id, $lockMode = null, $lockVersion = null)
 * @method Reviews|null findOneBy(array $criteria, array $orderBy = null)
 * @method Reviews[]    findAll()
 * @method Reviews[]    findBy(array $criteria, array $orderBy = null, $limit = null, $offset = null)
 */
class ReviewsRepository extends ServiceEntityRepository
{
    public function __construct(ManagerRegistry $registry)
    {
        parent::__construct($registry, Reviews::class);
    }

//    /**
//     * @return Reviews[] Returns an array of Reviews objects
//     */
//    public function findByExampleField($value): array
//    {
//        return $this->createQueryBuilder('r')
//            ->andWhere('r.exampleField = :val')
//            ->setParameter('val', $value)
//            ->orderBy('r.id', 'ASC')
//            ->setMaxResults(10)
//            ->getQuery()
//            ->getResult()
//        ;
//    }

//    public function findOneBySomeField($value): ?Reviews
//    {
//        return $this->createQueryBuilder('r')
//            ->andWhere('r.exampleField = :val')
//            ->setParameter('val', $value)
//            ->getQuery()
//            ->getOneOrNullResult()
//        ;
//    }
}
</file>

<file path="Repository/RewardsRepository.php">
<?php

namespace App\Repository;

use App\Entity\Rewards;
use Doctrine\Bundle\DoctrineBundle\Repository\ServiceEntityRepository;
use Doctrine\Persistence\ManagerRegistry;

/**
 * @extends ServiceEntityRepository<Rewards>
 *
 * @method Rewards|null find($id, $lockMode = null, $lockVersion = null)
 * @method Rewards|null findOneBy(array $criteria, array $orderBy = null)
 * @method Rewards[]    findAll()
 * @method Rewards[]    findBy(array $criteria, array $orderBy = null, $limit = null, $offset = null)
 */
class RewardsRepository extends ServiceEntityRepository
{
    public function __construct(ManagerRegistry $registry)
    {
        parent::__construct($registry, Rewards::class);
    }

//    /**
//     * @return Rewards[] Returns an array of Rewards objects
//     */
//    public function findByExampleField($value): array
//    {
//        return $this->createQueryBuilder('r')
//            ->andWhere('r.exampleField = :val')
//            ->setParameter('val', $value)
//            ->orderBy('r.id', 'ASC')
//            ->setMaxResults(10)
//            ->getQuery()
//            ->getResult()
//        ;
//    }

//    public function findOneBySomeField($value): ?Rewards
//    {
//        return $this->createQueryBuilder('r')
//            ->andWhere('r.exampleField = :val')
//            ->setParameter('val', $value)
//            ->getQuery()
//            ->getOneOrNullResult()
//        ;
//    }
}
</file>

<file path="Repository/RouletteRepository.php">
<?php

namespace App\Repository;

use App\Entity\Roulette;
use App\Entity\Users;
use Doctrine\Bundle\DoctrineBundle\Repository\ServiceEntityRepository;
use Doctrine\Persistence\ManagerRegistry;

/**
 * @extends ServiceEntityRepository<Roulette>
 *
 * @method Roulette|null find($id, $lockMode = null, $lockVersion = null)
 * @method Roulette|null findOneBy(array $criteria, array $orderBy = null)
 * @method Roulette[]    findAll()
 * @method Roulette[]    findBy(array $criteria, array $orderBy = null, $limit = null, $offset = null)
 */
class RouletteRepository extends ServiceEntityRepository
{
    public function __construct(ManagerRegistry $registry)
    {
        parent::__construct($registry, Roulette::class);
    }

    
public function findByUser(Users $user): array
{
    return $this->createQueryBuilder('r')
        ->andWhere('r.user = :user')
        ->setParameter('user', $user)
        ->orderBy('r.date', 'DESC')
        ->getQuery()
        ->getResult();
}


//    /**
//     * @return Roulette[] Returns an array of Roulette objects
//     */
//    public function findByExampleField($value): array
//    {
//        return $this->createQueryBuilder('r')
//            ->andWhere('r.exampleField = :val')
//            ->setParameter('val', $value)
//            ->orderBy('r.id', 'ASC')
//            ->setMaxResults(10)
//            ->getQuery()
//            ->getResult()
//        ;
//    }

//    public function findOneBySomeField($value): ?Roulette
//    {
//        return $this->createQueryBuilder('r')
//            ->andWhere('r.exampleField = :val')
//            ->setParameter('val', $value)
//            ->getQuery()
//            ->getOneOrNullResult()
//        ;
//    }
}
</file>

<file path="Repository/SharesRepository.php">
<?php

namespace App\Repository;

use App\Entity\Shares;
use Doctrine\Bundle\DoctrineBundle\Repository\ServiceEntityRepository;
use Doctrine\Persistence\ManagerRegistry;

/**
 * @extends ServiceEntityRepository<Shares>
 *
 * @method Shares|null find($id, $lockMode = null, $lockVersion = null)
 * @method Shares|null findOneBy(array $criteria, array $orderBy = null)
 * @method Shares[]    findAll()
 * @method Shares[]    findBy(array $criteria, array $orderBy = null, $limit = null, $offset = null)
 */
class SharesRepository extends ServiceEntityRepository
{
    public function __construct(ManagerRegistry $registry)
    {
        parent::__construct($registry, Shares::class);
    }

//    /**
//     * @return Shares[] Returns an array of Shares objects
//     */
//    public function findByExampleField($value): array
//    {
//        return $this->createQueryBuilder('s')
//            ->andWhere('s.exampleField = :val')
//            ->setParameter('val', $value)
//            ->orderBy('s.id', 'ASC')
//            ->setMaxResults(10)
//            ->getQuery()
//            ->getResult()
//        ;
//    }

//    public function findOneBySomeField($value): ?Shares
//    {
//        return $this->createQueryBuilder('s')
//            ->andWhere('s.exampleField = :val')
//            ->setParameter('val', $value)
//            ->getQuery()
//            ->getOneOrNullResult()
//        ;
//    }
}
</file>

<file path="Repository/TransactionArgentRepository.php">
<?php

namespace App\Repository;

use App\Entity\TransactionArgent;
use Doctrine\Bundle\DoctrineBundle\Repository\ServiceEntityRepository;
use Doctrine\Persistence\ManagerRegistry;

/**
 * @extends ServiceEntityRepository<TransactionArgent>
 *
 * @method TransactionArgent|null find($id, $lockMode = null, $lockVersion = null)
 * @method TransactionArgent|null findOneBy(array $criteria, array $orderBy = null)
 * @method TransactionArgent[]    findAll()
 * @method TransactionArgent[]    findBy(array $criteria, array $orderBy = null, $limit = null, $offset = null)
 */
class TransactionArgentRepository extends ServiceEntityRepository
{
    public function __construct(ManagerRegistry $registry)
    {
        parent::__construct($registry, TransactionArgent::class);
    }

//    /**
//     * @return TransactionArgent[] Returns an array of TransactionArgent objects
//     */
//    public function findByExampleField($value): array
//    {
//        return $this->createQueryBuilder('t')
//            ->andWhere('t.exampleField = :val')
//            ->setParameter('val', $value)
//            ->orderBy('t.id', 'ASC')
//            ->setMaxResults(10)
//            ->getQuery()
//            ->getResult()
//        ;
//    }

//    public function findOneBySomeField($value): ?TransactionArgent
//    {
//        return $this->createQueryBuilder('t')
//            ->andWhere('t.exampleField = :val')
//            ->setParameter('val', $value)
//            ->getQuery()
//            ->getOneOrNullResult()
//        ;
//    }
}
</file>

<file path="Repository/UserFollowersRepository.php">
<?php

namespace App\Repository;

use App\Entity\UserFollowers;
use Doctrine\Bundle\DoctrineBundle\Repository\ServiceEntityRepository;
use Doctrine\Persistence\ManagerRegistry;

class UserFollowersRepository extends ServiceEntityRepository
{
    public function __construct(ManagerRegistry $registry)
    {
        parent::__construct($registry, UserFollowers::class);
    }

    public function findFollowers(int $userId): array
    {
        return $this->createQueryBuilder('uf')
            ->where('uf.followed = :userId')
            ->setParameter('userId', $userId)
            ->getQuery()
            ->getResult()
        ;
    }

    public function findFollowing(int $userId): array
    {
        return $this->createQueryBuilder('uf')
            ->where('uf.follower = :userId')
            ->setParameter('userId', $userId)
            ->getQuery()
            ->getResult()
        ;
    }
}
</file>

<file path="Repository/UserGroupsRepository.php">
<?php

namespace App\Repository;

use App\Entity\UserGroups;
use Doctrine\Bundle\DoctrineBundle\Repository\ServiceEntityRepository;
use Doctrine\Persistence\ManagerRegistry;

/**
 * @extends ServiceEntityRepository<UserGroups>
 *
 * @method UserGroups|null find($id, $lockMode = null, $lockVersion = null)
 * @method UserGroups|null findOneBy(array $criteria, array $orderBy = null)
 * @method UserGroups[]    findAll()
 * @method UserGroups[]    findBy(array $criteria, array $orderBy = null, $limit = null, $offset = null)
 */
class UserGroupsRepository extends ServiceEntityRepository
{
    public function __construct(ManagerRegistry $registry)
    {
        parent::__construct($registry, UserGroups::class);
    }

//    /**
//     * @return UserGroups[] Returns an array of UserGroups objects
//     */
//    public function findByExampleField($value): array
//    {
//        return $this->createQueryBuilder('u')
//            ->andWhere('u.exampleField = :val')
//            ->setParameter('val', $value)
//            ->orderBy('u.id', 'ASC')
//            ->setMaxResults(10)
//            ->getQuery()
//            ->getResult()
//        ;
//    }

//    public function findOneBySomeField($value): ?UserGroups
//    {
//        return $this->createQueryBuilder('u')
//            ->andWhere('u.exampleField = :val')
//            ->setParameter('val', $value)
//            ->getQuery()
//            ->getOneOrNullResult()
//        ;
//    }
}
</file>

<file path="Repository/UserIntrestsRepository.php">
<?php

namespace App\Repository;

use App\Entity\UserIntrests;
use Doctrine\Bundle\DoctrineBundle\Repository\ServiceEntityRepository;
use Doctrine\Persistence\ManagerRegistry;

/**
 * @extends ServiceEntityRepository<UserIntrests>
 *
 * @method UserIntrests|null find($id, $lockMode = null, $lockVersion = null)
 * @method UserIntrests|null findOneBy(array $criteria, array $orderBy = null)
 * @method UserIntrests[]    findAll()
 * @method UserIntrests[]    findBy(array $criteria, array $orderBy = null, $limit = null, $offset = null)
 */
class UserIntrestsRepository extends ServiceEntityRepository
{
    public function __construct(ManagerRegistry $registry)
    {
        parent::__construct($registry, UserIntrests::class);
    }

//    /**
//     * @return UserIntrests[] Returns an array of UserIntrests objects
//     */
//    public function findByExampleField($value): array
//    {
//        return $this->createQueryBuilder('u')
//            ->andWhere('u.exampleField = :val')
//            ->setParameter('val', $value)
//            ->orderBy('u.id', 'ASC')
//            ->setMaxResults(10)
//            ->getQuery()
//            ->getResult()
//        ;
//    }

//    public function findOneBySomeField($value): ?UserIntrests
//    {
//        return $this->createQueryBuilder('u')
//            ->andWhere('u.exampleField = :val')
//            ->setParameter('val', $value)
//            ->getQuery()
//            ->getOneOrNullResult()
//        ;
//    }
}
</file>

<file path="Repository/UserMessagesRepository.php">
<?php

namespace App\Repository;

use App\Entity\UserMessages;
use Doctrine\Bundle\DoctrineBundle\Repository\ServiceEntityRepository;
use Doctrine\Persistence\ManagerRegistry;

/**
 * @extends ServiceEntityRepository<UserMessages>
 *
 * @method UserMessages|null find($id, $lockMode = null, $lockVersion = null)
 * @method UserMessages|null findOneBy(array $criteria, array $orderBy = null)
 * @method UserMessages[]    findAll()
 * @method UserMessages[]    findBy(array $criteria, array $orderBy = null, $limit = null, $offset = null)
 */
class UserMessagesRepository extends ServiceEntityRepository
{
    public function __construct(ManagerRegistry $registry)
    {
        parent::__construct($registry, UserMessages::class);
    }

//    /**
//     * @return UserMessages[] Returns an array of UserMessages objects
//     */
//    public function findByExampleField($value): array
//    {
//        return $this->createQueryBuilder('u')
//            ->andWhere('u.exampleField = :val')
//            ->setParameter('val', $value)
//            ->orderBy('u.id', 'ASC')
//            ->setMaxResults(10)
//            ->getQuery()
//            ->getResult()
//        ;
//    }

//    public function findOneBySomeField($value): ?UserMessages
//    {
//        return $this->createQueryBuilder('u')
//            ->andWhere('u.exampleField = :val')
//            ->setParameter('val', $value)
//            ->getQuery()
//            ->getOneOrNullResult()
//        ;
//    }
}
</file>

<file path="Repository/UserProfileRepository.php">
<?php

namespace App\Repository;

use App\Entity\UserProfile;
use Doctrine\Bundle\DoctrineBundle\Repository\ServiceEntityRepository;
use Doctrine\Persistence\ManagerRegistry;

/**
 * @extends ServiceEntityRepository<UserProfile>
 *
 * @method UserProfile|null find($id, $lockMode = null, $lockVersion = null)
 * @method UserProfile|null findOneBy(array $criteria, array $orderBy = null)
 * @method UserProfile[]    findAll()
 * @method UserProfile[]    findBy(array $criteria, array $orderBy = null, $limit = null, $offset = null)
 */
class UserProfileRepository extends ServiceEntityRepository
{
    public function __construct(ManagerRegistry $registry)
    {
        parent::__construct($registry, UserProfile::class);
    }

//    /**
//     * @return UserProfile[] Returns an array of UserProfile objects
//     */
//    public function findByExampleField($value): array
//    {
//        return $this->createQueryBuilder('u')
//            ->andWhere('u.exampleField = :val')
//            ->setParameter('val', $value)
//            ->orderBy('u.id', 'ASC')
//            ->setMaxResults(10)
//            ->getQuery()
//            ->getResult()
//        ;
//    }

//    public function findOneBySomeField($value): ?UserProfile
//    {
//        return $this->createQueryBuilder('u')
//            ->andWhere('u.exampleField = :val')
//            ->setParameter('val', $value)
//            ->getQuery()
//            ->getOneOrNullResult()
//        ;
//    }
}
</file>

<file path="Repository/UserRewardsRepository.php">
<?php

namespace App\Repository;

use App\Entity\UserRewards;
use Doctrine\Bundle\DoctrineBundle\Repository\ServiceEntityRepository;
use Doctrine\Persistence\ManagerRegistry;

/**
 * @extends ServiceEntityRepository<UserRewards>
 *
 * @method UserRewards|null find($id, $lockMode = null, $lockVersion = null)
 * @method UserRewards|null findOneBy(array $criteria, array $orderBy = null)
 * @method UserRewards[]    findAll()
 * @method UserRewards[]    findBy(array $criteria, array $orderBy = null, $limit = null, $offset = null)
 */
class UserRewardsRepository extends ServiceEntityRepository
{
    public function __construct(ManagerRegistry $registry)
    {
        parent::__construct($registry, UserRewards::class);
    }

//    /**
//     * @return UserRewards[] Returns an array of UserRewards objects
//     */
//    public function findByExampleField($value): array
//    {
//        return $this->createQueryBuilder('u')
//            ->andWhere('u.exampleField = :val')
//            ->setParameter('val', $value)
//            ->orderBy('u.id', 'ASC')
//            ->setMaxResults(10)
//            ->getQuery()
//            ->getResult()
//        ;
//    }

//    public function findOneBySomeField($value): ?UserRewards
//    {
//        return $this->createQueryBuilder('u')
//            ->andWhere('u.exampleField = :val')
//            ->setParameter('val', $value)
//            ->getQuery()
//            ->getOneOrNullResult()
//        ;
//    }
}
</file>

<file path="Repository/UsersRepository.php">
<?php

namespace App\Repository;

use App\Entity\Users;
use Doctrine\Bundle\DoctrineBundle\Repository\ServiceEntityRepository;
use Doctrine\Persistence\ManagerRegistry;

/**
 * @extends ServiceEntityRepository<Users>
 *
 * @method Users|null find($id, $lockMode = null, $lockVersion = null)
 * @method Users|null findOneBy(array $criteria, array $orderBy = null)
 * @method Users[]    findAll()
 * @method Users[]    findBy(array $criteria, array $orderBy = null, $limit = null, $offset = null)
 */
class UsersRepository extends ServiceEntityRepository
{
    public function __construct(ManagerRegistry $registry)
    {
        parent::__construct($registry, Users::class);
    }

//    /**
//     * @return Users[] Returns an array of Users objects
//     */
//    public function findByExampleField($value): array
//    {
//        return $this->createQueryBuilder('u')
//            ->andWhere('u.exampleField = :val')
//            ->setParameter('val', $value)
//            ->orderBy('u.id', 'ASC')
//            ->setMaxResults(10)
//            ->getQuery()
//            ->getResult()
//        ;
//    }

//    public function findOneBySomeField($value): ?Users
//    {
//        return $this->createQueryBuilder('u')
//            ->andWhere('u.exampleField = :val')
//            ->setParameter('val', $value)
//            ->getQuery()
//            ->getOneOrNullResult()
//        ;
//    }
}
</file>

<file path="Repository/VisiteUtilisateurRepository.php">
<?php

namespace App\Repository;

use App\Entity\VisiteUtilisateur;
use Doctrine\Bundle\DoctrineBundle\Repository\ServiceEntityRepository;
use Doctrine\Persistence\ManagerRegistry;

/**
 * @extends ServiceEntityRepository<VisiteUtilisateur>
 *
 * @method VisiteUtilisateur|null find($id, $lockMode = null, $lockVersion = null)
 * @method VisiteUtilisateur|null findOneBy(array $criteria, array $orderBy = null)
 * @method VisiteUtilisateur[]    findAll()
 * @method VisiteUtilisateur[]    findBy(array $criteria, array $orderBy = null, $limit = null, $offset = null)
 */
class VisiteUtilisateurRepository extends ServiceEntityRepository
{
    public function __construct(ManagerRegistry $registry)
    {
        parent::__construct($registry, VisiteUtilisateur::class);
    }

//    /**
//     * @return VisiteUtilisateur[] Returns an array of VisiteUtilisateur objects
//     */
//    public function findByExampleField($value): array
//    {
//        return $this->createQueryBuilder('v')
//            ->andWhere('v.exampleField = :val')
//            ->setParameter('val', $value)
//            ->orderBy('v.id', 'ASC')
//            ->setMaxResults(10)
//            ->getQuery()
//            ->getResult()
//        ;
//    }

//    public function findOneBySomeField($value): ?VisiteUtilisateur
//    {
//        return $this->createQueryBuilder('v')
//            ->andWhere('v.exampleField = :val')
//            ->setParameter('val', $value)
//            ->getQuery()
//            ->getOneOrNullResult()
//        ;
//    }
}
</file>

<file path="Repository/WorkerRaitingsRepository.php">
<?php

namespace App\Repository;

use App\Entity\WorkerRaitings;
use Doctrine\Bundle\DoctrineBundle\Repository\ServiceEntityRepository;
use Doctrine\Persistence\ManagerRegistry;

/**
 * @extends ServiceEntityRepository<WorkerRaitings>
 *
 * @method WorkerRaitings|null find($id, $lockMode = null, $lockVersion = null)
 * @method WorkerRaitings|null findOneBy(array $criteria, array $orderBy = null)
 * @method WorkerRaitings[]    findAll()
 * @method WorkerRaitings[]    findBy(array $criteria, array $orderBy = null, $limit = null, $offset = null)
 */
class WorkerRaitingsRepository extends ServiceEntityRepository
{
    public function __construct(ManagerRegistry $registry)
    {
        parent::__construct($registry, WorkerRaitings::class);
    }

//    /**
//     * @return WorkerRaitings[] Returns an array of WorkerRaitings objects
//     */
//    public function findByExampleField($value): array
//    {
//        return $this->createQueryBuilder('w')
//            ->andWhere('w.exampleField = :val')
//            ->setParameter('val', $value)
//            ->orderBy('w.id', 'ASC')
//            ->setMaxResults(10)
//            ->getQuery()
//            ->getResult()
//        ;
//    }

//    public function findOneBySomeField($value): ?WorkerRaitings
//    {
//        return $this->createQueryBuilder('w')
//            ->andWhere('w.exampleField = :val')
//            ->setParameter('val', $value)
//            ->getQuery()
//            ->getOneOrNullResult()
//        ;
//    }
}
</file>

<file path="Service/PointsService.php">
<?php

namespace App\Service;

use App\Entity\Users;
use App\Entity\HistoriquePoints;
use App\Entity\UserRewards;
use App\Entity\Rewards;
use App\Entity\TransactionArgent;
use Doctrine\ORM\EntityManagerInterface;
use Symfony\Component\HttpFoundation\RequestStack;

class PointsService
{
    private $entityManager;
    private $requestStack;

    public function __construct(EntityManagerInterface $entityManager, RequestStack $requestStack)
    {
        $this->entityManager = $entityManager;
        $this->requestStack = $requestStack;
    }

    /**
     * Ajoute des points Ã  un utilisateur et met Ã  jour toutes les tables concernÃ©es
     *
     * @param Users $user L'utilisateur
     * @param int $points Le nombre de points Ã  ajouter
     * @param string $type Le type d'action (gain ou perte)
     * @param string $raison La raison de l'ajout/retrait de points
     * @param int|null $rewardId L'ID de la rÃ©compense associÃ©e (si applicable)
     * @param int|null $eventId L'ID de l'Ã©vÃ©nement associÃ© (si applicable)
     * @return bool True si l'opÃ©ration a rÃ©ussi, false sinon
     */
    public function addPoints(Users $user, int $points, string $type, string $raison, ?int $rewardId = null, ?int $eventId = null): bool
    {
        try {
            // 1. Mettre Ã  jour les points de l'utilisateur
            $currentPoints = $user->getPoints() ?? 0;
            $user->setPoints($currentPoints + $points);
            // 2. Enregistrer dans historique_points
            $historique = new HistoriquePoints();
            $historique->setUser($user);
            $historique->setType($type);
            $historique->setPoints($points);
            $historique->setRaison($raison);
            $historique->setDate(new \DateTime());
            // DEBUG LOG: Afficher toutes les valeurs de l'entitÃ© avant persist/flush
            error_log('DEBUG HistoriquePoints avant persist: ' . print_r([
                'user_id' => $user ? $user->getId() : null,
                'type' => $type,
                'points' => $points,
                'raison' => $raison,
                'date' => (new \DateTime())->format('Y-m-d H:i:s'),
            ], true));
            // 3. Enregistrer dans user_rewards pour toute action de points
            $userReward = new UserRewards();
            $userReward->setUser($user);
            $userReward->setType($type);
            $userReward->setRaison($raison);
            $userReward->setPointsEarned($points);
            $userReward->setEarnedAt(new \DateTime());
            $userReward->setEventId($eventId ?? 0);
            // Si un reward_id est fourni, associer la rÃ©compense
            if ($rewardId !== null) {
                $reward = $this->entityManager->getRepository(Rewards::class)->find($rewardId);
                if ($reward) {
                    $userReward->setReward($reward);
                }
            }
            // Persister les changements
            $this->entityManager->persist($user);
            $this->entityManager->persist($historique);
            $this->entityManager->persist($userReward);
            try {
                $this->entityManager->flush();
            } catch (\Exception $e) {
                error_log('Erreur persist/flush PointsService::addPoints: ' . $e->getMessage());
                throw $e;
            }
            // Mettre Ã  jour la session si l'utilisateur est connectÃ©
            $session = $this->requestStack->getSession();
            if ($session->has('user')) {
                $session->set('user', $user);
            }
            return true;
        } catch (\Exception $e) {
            // Log l'erreur
            error_log('Erreur lors de l\'ajout de points: ' . $e->getMessage());
            return false;
        }
    }
    
    /**
     * Retire des points Ã  un utilisateur et met Ã  jour toutes les tables concernÃ©es
     *
     * @param Users $user L'utilisateur
     * @param int $points Le nombre de points Ã  retirer (valeur positive)
     * @param string $raison La raison du retrait de points
     * @return bool True si l'opÃ©ration a rÃ©ussi, false sinon
     */
    public function removePoints(Users $user, int $points, string $raison): bool
    {
        // VÃ©rifier que l'utilisateur a suffisamment de points
        $currentPoints = $user->getPoints() ?? 0;
        if ($currentPoints < $points) {
            // Si l'utilisateur n'a pas assez de points, on retire ce qu'il a
            $points = $currentPoints;
        }
        
        // Appeler addPoints avec une valeur nÃ©gative
        return $this->addPoints($user, -$points, 'perte', $raison);
    }
    
    /**
     * Convertit des points en argent
     *
     * @param Users $user L'utilisateur
     * @param int $points Le nombre de points Ã  convertir
     * @param string $devise La devise (TND, EUR, USD)
     * @return array RÃ©sultat de la conversion avec statut, message et montant
     */
    public function convertPointsToMoney(Users $user, int $points, string $devise): array
    {
        try {
            // VÃ©rifier que l'utilisateur a au moins 100 points
            $currentPoints = $user->getPoints() ?? 0;
            if ($currentPoints < 100) {
                return [
                    'success' => false,
                    'message' => 'Vous devez avoir au moins 100 points pour effectuer une conversion.'
                ];
            }
            
            // VÃ©rifier que le nombre de points est un multiple de 100
            if ($points % 100 !== 0) {
                return [
                    'success' => false,
                    'message' => 'Le nombre de points doit Ãªtre un multiple de 100.'
                ];
            }
            
            // VÃ©rifier que l'utilisateur a suffisamment de points
            if ($currentPoints < $points) {
                return [
                    'success' => false,
                    'message' => 'Vous n\'avez pas assez de points pour cette conversion.'
                ];
            }
            
            // Calculer le montant en TND (5 TND pour 100 points)
            $montantTND = ($points / 100) * 5;
            
            // Convertir en devise demandÃ©e
            $montant = $this->convertCurrency($montantTND, $devise);
            
            // Mettre Ã  jour les points de l'utilisateur
            $user->setPoints($currentPoints - $points);
            
            // Mettre Ã  jour l'argent de l'utilisateur
            $currentArgent = $user->getArgent() ?? '0.00';
            $newArgent = (float)$currentArgent + $montant;
            $user->setArgent((string)$newArgent);
            
            // Enregistrer dans historique_points
            $this->addPoints($user, -$points, 'perte', 'Conversion en ' . $devise);
            
            // Enregistrer dans transaction_argent
            $transaction = new TransactionArgent();
            $transaction->setUser($user);
            $transaction->setType('conversion');
            $transaction->setMontant((string)$montant);
            $transaction->setDevise($devise);
            $transaction->setDate(new \DateTime());
            $transaction->setPointConvertis((string)$points);
            
            // Persister les changements
            $this->entityManager->persist($transaction);
            $this->entityManager->persist($user);
            $this->entityManager->flush();
            
            // Mettre Ã  jour la session si l'utilisateur est connectÃ©
            $session = $this->requestStack->getSession();
            if ($session->has('user')) {
                $session->set('user', $user);
            }
            
            return [
                'success' => true,
                'message' => 'Conversion rÃ©ussie',
                'montant' => $montant,
                'devise' => $devise,
                'points' => $points
            ];
        } catch (\Exception $e) {
            // Log l'erreur
            error_log('Erreur lors de la conversion de points: ' . $e->getMessage());
            return [
                'success' => false,
                'message' => 'Une erreur est survenue lors de la conversion: ' . $e->getMessage()
            ];
        }
    }
    
    /**
     * Convertit un montant de TND vers une autre devise
     *
     * @param float $montantTND Le montant en TND
     * @param string $devise La devise cible (TND, EUR, USD)
     * @return float Le montant converti
     */
    private function convertCurrency(float $montantTND, string $devise): float
    {
        // Taux de conversion (Ã  ajuster selon les taux rÃ©els)
        $taux = [
            'TND' => 1.0,
            'EUR' => 0.29, // 1 TND = 0.29 EUR
            'USD' => 0.32  // 1 TND = 0.32 USD
        ];
        
        // VÃ©rifier que la devise est supportÃ©e
        if (!isset($taux[$devise])) {
            return $montantTND; // Par dÃ©faut, retourner le montant en TND
        }
        
        // Convertir le montant
        return $montantTND * $taux[$devise];
    }
    
    /**
     * RÃ©cupÃ¨re l'historique des points d'un utilisateur
     *
     * @param Users $user L'utilisateur
     * @param int $limit Limite du nombre d'entrÃ©es Ã  rÃ©cupÃ©rer
     * @return array L'historique des points
     */
    public function getPointsHistory(Users $user, int $limit = 10): array
    {
        return $this->entityManager->getRepository(HistoriquePoints::class)
            ->findBy(
                ['user' => $user],
                ['date' => 'DESC'],
                $limit
            );
    }
}
</file>

<file path="Service/RouletteService.php">
<?php

namespace App\Service;

use App\Entity\Users;
use App\Entity\Roulette;
use App\Entity\HistoriquePoints;
use Doctrine\ORM\EntityManagerInterface;

class RouletteService
{
    private const MAX_DAILY_SPINS = 4;
    private const REWARDS = [0, 100, 50, 40, 200];

    private $entityManager;

    public function __construct(EntityManagerInterface $entityManager)
    {
        $this->entityManager = $entityManager;
    }

    public function canSpin(Users $user): bool
    {
        // Utiliser la date et heure actuelles pour plus de prÃ©cision
        $now = new \DateTime();
        $today = new \DateTime($now->format('Y-m-d') . ' 00:00:00');
        
        try {
            // RÃ©cupÃ©rer les tours effectuÃ©s aujourd'hui avec des dates prÃ©cises
            $startOfDay = clone $today;
            $endOfDay = (clone $today)->modify('+1 day');
            
            // Log dÃ©taillÃ© des paramÃ¨tres de date pour dÃ©boguer
            error_log('DEBUG - PÃ©riode de recherche: ' . $startOfDay->format('Y-m-d H:i:s') . ' Ã  ' . $endOfDay->format('Y-m-d H:i:s'));
            error_log('DEBUG - Date actuelle: ' . $now->format('Y-m-d H:i:s'));
            
            // Utiliser une requÃªte DQL avec des paramÃ¨tres explicites
            $spinCount = $this->entityManager->getRepository(Roulette::class)
                ->createQueryBuilder('r')
                ->select('COUNT(r.id)')
                ->where('r.user = :user')
                ->andWhere('r.createdAt >= :startOfDay')
                ->andWhere('r.createdAt < :endOfDay')
                ->setParameter('user', $user)
                ->setParameter('startOfDay', $startOfDay, '\Doctrine\DBAL\Types\DateTimeType')
                ->setParameter('endOfDay', $endOfDay, '\Doctrine\DBAL\Types\DateTimeType')
                ->getQuery()
                ->getSingleScalarResult();
                
            // Assurons-nous que spinCount est bien un entier
            $spinCount = (int)$spinCount;
            
            // Log dÃ©taillÃ© pour dÃ©boguer
            error_log('DEBUG - Utilisateur ID: ' . $user->getId() . ', Nombre de tours aujourd\'hui: ' . $spinCount . ' (max: ' . self::MAX_DAILY_SPINS . ')');
            
            // VÃ©rifier si l'utilisateur a au moins un tour disponible
            $canSpin = $spinCount < self::MAX_DAILY_SPINS;
            error_log('DEBUG - L\'utilisateur peut-il tourner la roue? ' . ($canSpin ? 'OUI' : 'NON'));
            
            return $canSpin;
        } catch (\Exception $e) {
            // En cas d'erreur, permettre Ã  l'utilisateur de tourner la roue mais logger l'erreur
            error_log('ERREUR - VÃ©rification des tours: ' . $e->getMessage() . ' - ' . $e->getTraceAsString());
            return true;
        }
    }

    public function getRemainingSpins(Users $user): int
    {
        // Utiliser la date et heure actuelles pour plus de prÃ©cision
        $now = new \DateTime();
        $today = new \DateTime($now->format('Y-m-d') . ' 00:00:00');
        
        try {
            // RÃ©cupÃ©rer les tours effectuÃ©s aujourd'hui avec des dates prÃ©cises
            $startOfDay = clone $today;
            $endOfDay = (clone $today)->modify('+1 day');
            
            // Log dÃ©taillÃ© des paramÃ¨tres de date pour dÃ©boguer
            error_log('DEBUG - Calcul des tours restants - PÃ©riode: ' . $startOfDay->format('Y-m-d H:i:s') . ' Ã  ' . $endOfDay->format('Y-m-d H:i:s'));
            error_log('DEBUG - Date actuelle: ' . $now->format('Y-m-d H:i:s'));
            
            // Utiliser une requÃªte DQL avec des paramÃ¨tres explicites
            $spinCount = $this->entityManager->getRepository(Roulette::class)
                ->createQueryBuilder('r')
                ->select('COUNT(r.id)')
                ->where('r.user = :user')
                ->andWhere('r.createdAt >= :startOfDay')
                ->andWhere('r.createdAt < :endOfDay')
                ->setParameter('user', $user)
                ->setParameter('startOfDay', $startOfDay, '\Doctrine\DBAL\Types\DateTimeType')
                ->setParameter('endOfDay', $endOfDay, '\Doctrine\DBAL\Types\DateTimeType')
                ->getQuery()
                ->getSingleScalarResult();
            
            // Assurons-nous que spinCount est bien un entier
            $spinCount = (int)$spinCount;
            
            // Calculer les tours restants
            $remainingSpins = max(0, self::MAX_DAILY_SPINS - $spinCount);
            
            // Log dÃ©taillÃ© pour dÃ©boguer
            error_log('DEBUG - Utilisateur ID: ' . $user->getId() . ', Tours effectuÃ©s: ' . $spinCount . ', Tours restants: ' . $remainingSpins);
            
            return $remainingSpins;
        } catch (\Exception $e) {
            // En cas d'erreur, indiquer que l'utilisateur a tous ses tours disponibles mais logger l'erreur
            error_log('ERREUR - Calcul des tours restants: ' . $e->getMessage() . ' - ' . $e->getTraceAsString());
            return self::MAX_DAILY_SPINS;
        }
    }

    public function getNextSpinDate(): \DateTime
    {
        // Retourne le jour suivant puisque la roue peut Ãªtre utilisÃ©e tous les jours
        $today = new \DateTime('today');
        return (clone $today)->modify('+1 day');
    }

    public function spin(Users $user): array
    {
        // VÃ©rifier si l'utilisateur peut tourner la roue avec logs dÃ©taillÃ©s
        $remainingSpins = $this->getRemainingSpins($user);
        error_log('DEBUG - Spin demandÃ© - Utilisateur ID: ' . $user->getId() . ', Tours restants: ' . $remainingSpins);
        
        if (!$this->canSpin($user)) {
            error_log('ALERTE - Tentative de tour de roue refusÃ©e pour l\'utilisateur ID: ' . $user->getId() . ', Tours restants: ' . $remainingSpins);
            throw new \Exception('Vous avez atteint le nombre maximum de tours pour aujourd\'hui');
        }

        error_log('DEBUG - Tour de roue autorisÃ© pour l\'utilisateur ID: ' . $user->getId());
        $reward = self::REWARDS[array_rand(self::REWARDS)];
        error_log('DEBUG - RÃ©compense tirÃ©e: ' . $reward . ' points');
        
        // Valider les donnÃ©es
        $validationResult = $this->validateRouletteData($user, $reward);
        if (!$validationResult) {
            error_log('Validation des donnÃ©es Ã©chouÃ©e pour l\'utilisateur ID: ' . $user->getId());
            throw new \Exception('DonnÃ©es de la roulette invalides.');
        }

        // Ajouter les points
        $currentPoints = $user->getPoints() ?? 0;
        $user->setPoints($currentPoints + $reward);
        error_log('Points mis Ã  jour: ' . $currentPoints . ' + ' . $reward . ' = ' . $user->getPoints());

        // Enregistrer le tour avec date prÃ©cise
        $rouletteSpin = new Roulette();
        $rouletteSpin->setUser($user);
        // DÃ©finir le rÃ©sultat (l'entitÃ© Roulette utilise setResult)
        $rouletteSpin->setResult($reward . ' points');
        
        // DÃ©finir la date actuelle avec prÃ©cision (l'entitÃ© Roulette utilise setCreatedAt)
        $now = new \DateTime();
        $rouletteSpin->setCreatedAt($now);
        error_log('DEBUG - Enregistrement du tour Ã  la date exacte: ' . $now->format('Y-m-d H:i:s'));
        error_log('DEBUG - Objet date crÃ©Ã©: ' . get_class($now) . ', Timezone: ' . $now->getTimezone()->getName());

        // Enregistrer l'historique
        $historiquePoints = new HistoriquePoints();
        $historiquePoints->setUser($user);
        $historiquePoints->setType('gain');
        $historiquePoints->setPoints($reward);
        $historiquePoints->setRaison('roulette');
        $historiquePoints->setDate($now);

        try {
            // Persister les entitÃ©s avec gestion d'erreur
            $this->entityManager->persist($user);
            $this->entityManager->persist($rouletteSpin);
            $this->entityManager->persist($historiquePoints);
            $this->entityManager->flush();
            error_log('DEBUG - DonnÃ©es persistÃ©es avec succÃ¨s dans la base de donnÃ©es');
            
            // Recalculer les tours restants aprÃ¨s l'enregistrement
            $remainingSpins = $this->getRemainingSpins($user);
            error_log('DEBUG - Tours restants aprÃ¨s ce tour: ' . $remainingSpins);
        } catch (\Exception $e) {
            error_log('ERREUR - Ãchec de persistance des donnÃ©es: ' . $e->getMessage() . ' - ' . $e->getTraceAsString());
            throw new \Exception('Erreur lors de l\'enregistrement des points. Veuillez rÃ©essayer.');
        }
        
        return [
            'reward' => $reward,
            'remainingSpins' => $remainingSpins,
            'totalPoints' => $user->getPoints(),
            'pointsWon' => $reward
        ];
    }

    /**
     * Valide les donnÃ©es de la roulette avant de les persister
     * 
     * @param Users $user L'utilisateur qui tourne la roue
     * @param int $pointsWon Les points gagnÃ©s
     * @return bool Retourne true si les donnÃ©es sont valides
     * @throws \Exception Si les donnÃ©es ne sont pas valides
     */
    public function validateRouletteData(Users $user, int $pointsWon): bool
    {
        try {
            // VÃ©rifier que l'utilisateur existe et a un ID
            if (!$user || !$user->getId()) {
                throw new \Exception('Utilisateur invalide ou ID manquant');
            }
            
            // VÃ©rifier que les points sont valides
            if (!is_int($pointsWon)) {
                // Tenter de convertir en entier si ce n'est pas dÃ©jÃ  le cas
                $pointsWon = (int)$pointsWon;
                error_log('Points convertis en entier: ' . $pointsWon);
            }
            
            if ($pointsWon < 0) {
                throw new \Exception('Valeur de points nÃ©gative: ' . $pointsWon);
            }
            
            // VÃ©rifier que l'utilisateur a les mÃ©thodes nÃ©cessaires
            if (!method_exists($user, 'getPoints') || !method_exists($user, 'setPoints')) {
                throw new \Exception('Les mÃ©thodes getPoints ou setPoints ne sont pas dÃ©finies pour l\'utilisateur');
            }
            
            // VÃ©rifier que la somme ne dÃ©passe pas la capacitÃ© d'un entier
            $currentPoints = $user->getPoints() ?? 0;
            if ($currentPoints > PHP_INT_MAX - $pointsWon) {
                throw new \Exception('DÃ©passement de la valeur maximale de points');
            }
            
            // VÃ©rifier si la valeur des points est dans la liste des rÃ©compenses autorisÃ©es
            if (!in_array($pointsWon, self::REWARDS)) {
                error_log('Avertissement: Valeur de points non standard: ' . $pointsWon . ', mais traitement autorisÃ©');
            }
            
            return true;
        } catch (\Exception $e) {
            // Log l'erreur mais ne pas la propager
            error_log('Erreur de validation dans RouletteService: ' . $e->getMessage());
            // Retourner false au lieu de lancer une exception
            return false;
        }
    }
    
    public function getRewardInfo(int $reward): array
    {
        return [
            'reward' => $reward,
            'totalPoints' => 0,
            'pointsWon' => $reward
        ];
    }


    public function getSpinHistory(Users $user, int $limit = 5): array
    {
        return $this->entityManager->getRepository(Roulette::class)->findBy(
            ['user' => $user],
            ['createdAt' => 'DESC'],
            $limit
        );
    }
}
</file>

<file path="Service/VisitService.php">
<?php

namespace App\Service;

use App\Entity\VisiteUtilisateur;
use App\Entity\Users;
use Doctrine\ORM\EntityManagerInterface;

class VisitService
{
    private $entityManager;
    private $pointsService;

    public function __construct(EntityManagerInterface $entityManager, PointsService $pointsService)
    {
        $this->entityManager = $entityManager;
        $this->pointsService = $pointsService;
    }

    public function updateUserVisit(Users $user): void
    {
        $repository = $this->entityManager->getRepository(VisiteUtilisateur::class);
        $visit = $repository->findOneBy(['user' => $user]);

        $today = new \DateTime();
        $streak = 0;

        if (!$visit) {
            $visit = new VisiteUtilisateur();
            $visit->setUser($user);
            $visit->setDernierVisite($today);
            $visit->setSerie(1);
            $this->entityManager->persist($visit);
        } else {
            $lastVisit = $visit->getDernierVisite();
            $daysDifference = $lastVisit->diff($today)->days;

            if ($daysDifference === 1) {
                $streak = $visit->getSerie() + 1;
                $visit->setSerie($streak);
            } elseif ($daysDifference > 1) {
                $streak = 1;
                $visit->setSerie($streak);
            }

            $visit->setDernierVisite($today);
        }

        if ($streak === 7) {
            $this->pointsService->addPoints($user, 5); // Add 5 points for 7-day streak
            $visit->setSerie(0); // Reset streak
        }

        $this->entityManager->flush();
    }
}
</file>

<file path="Service/VisitTrackerService.php">
<?php

namespace App\Service;

use App\Entity\Users;
use App\Entity\VisiteUtilisateur;
use Doctrine\ORM\EntityManagerInterface;

class VisitTrackerService
{
    private $entityManager;
    private $pointsService;

    public function __construct(EntityManagerInterface $entityManager, PointsService $pointsService)
    {
        $this->entityManager = $entityManager;
        $this->pointsService = $pointsService;
    }

    /**
     * Enregistre une visite pour un utilisateur et attribue des points si nÃ©cessaire
     *
     * @param Users $user L'utilisateur qui visite le site
     * @return array RÃ©sultat de l'opÃ©ration avec statut et message
     */
    public function trackVisit(Users $user): array
    {
        error_log('trackVisit appelÃ© pour user id: ' . $user->getId());
        // Pour debug : dÃ©commenter la ligne suivante pour stopper l'exÃ©cution et voir le user
        // dd($user);
        try {
            // RÃ©cupÃ©rer la derniÃ¨re visite de l'utilisateur
            $visiteRepository = $this->entityManager->getRepository(VisiteUtilisateur::class);
            $derniereVisite = $visiteRepository->findOneBy(['user' => $user], ['dernier_visite' => 'DESC']);
            
            $today = new \DateTime();
            $today->setTime(0, 0, 0); // Minuit aujourd'hui
            
            // Si c'est la premiÃ¨re visite de l'utilisateur
            if (!$derniereVisite) {
                $visite = new VisiteUtilisateur();
                $visite->setUser($user);
                $visite->setDernierVisite($today);
                $visite->setSerie(1);
                
                $this->entityManager->persist($visite);
                $this->entityManager->flush();
                
                // Ajouter des points pour la premiÃ¨re visite
                $this->pointsService->addPoints($user, 5, 'gain', 'PremiÃ¨re visite');
                
                return [
                    'success' => true,
                    'message' => 'PremiÃ¨re visite enregistrÃ©e. +5 points!',
                    'serie' => 1
                ];
            }
            
            // RÃ©cupÃ©rer la date de la derniÃ¨re visite
            $derniereDateVisite = $derniereVisite->getDernierVisite();
            $derniereDateVisite->setTime(0, 0, 0); // Minuit le jour de la derniÃ¨re visite
            
            // Calculer la diffÃ©rence en jours
            $diffJours = $today->diff($derniereDateVisite)->days;
            
            // Si l'utilisateur a dÃ©jÃ  visitÃ© aujourd'hui
            if ($diffJours == 0) {
                return [
                    'success' => true,
                    'message' => 'Vous avez dÃ©jÃ  visitÃ© le site aujourd\'hui.',
                    'serie' => $derniereVisite->getSerie()
                ];
            }
            
            // Si l'utilisateur visite le jour suivant sa derniÃ¨re visite
            if ($diffJours == 1) {
                $nouvelleSerie = $derniereVisite->getSerie() + 1;
                
                $visite = new VisiteUtilisateur();
                $visite->setUser($user);
                $visite->setDernierVisite($today);
                $visite->setSerie($nouvelleSerie);
                
                $this->entityManager->persist($visite);
                
                // Si l'utilisateur atteint 7 visites consÃ©cutives, ajouter un bonus
                if ($nouvelleSerie % 7 == 0) {
                    $this->pointsService->addPoints($user, 100, 'gain', '7 Days Visit');
                    $message = 'Visite enregistrÃ©e. FÃ©licitations pour vos ' . $nouvelleSerie . ' visites consÃ©cutives! +100 points bonus!';
                } else {
                    $this->pointsService->addPoints($user, 5, 'gain', '5 Days Visit');
                    $message = 'Visite enregistrÃ©e. +5 points! SÃ©rie actuelle: ' . $nouvelleSerie . ' jours.';
                }
                
                $this->entityManager->flush();
                
                return [
                    'success' => true,
                    'message' => $message,
                    'serie' => $nouvelleSerie
                ];
            } 
            // Si la sÃ©rie est interrompue
            else {
                $visite = new VisiteUtilisateur();
                $visite->setUser($user);
                $visite->setDernierVisite($today);
                $visite->setSerie(1);
                
                $this->entityManager->persist($visite);
                $this->entityManager->flush();
                
                // Ajouter des points pour la visite
                $this->pointsService->addPoints($user, 5, 'gain', '5 Days Visit');
                
                return [
                    'success' => true,
                    'message' => 'Visite enregistrÃ©e. +5 points! Nouvelle sÃ©rie commencÃ©e.',
                    'serie' => 1
                ];
            }
        } catch (\Exception $e) {
            // Log l'erreur
            error_log('Erreur lors du suivi de visite: ' . $e->getMessage());
            return [
                'success' => false,
                'message' => 'Une erreur est survenue lors de l\'enregistrement de votre visite.',
                'serie' => 0
            ];
        }
    }
    
    /**
     * VÃ©rifie les utilisateurs inactifs et retire des points si nÃ©cessaire
     * Cette mÃ©thode est destinÃ©e Ã  Ãªtre exÃ©cutÃ©e par une commande cron
     *
     * @return int Nombre d'utilisateurs pÃ©nalisÃ©s
     */
    public function checkInactiveUsers(): int
    {
        try {
            $usersRepository = $this->entityManager->getRepository(Users::class);
            $visiteRepository = $this->entityManager->getRepository(VisiteUtilisateur::class);
            
            // RÃ©cupÃ©rer tous les utilisateurs
            $users = $usersRepository->findAll();
            $today = new \DateTime();
            $penalizedCount = 0;
            
            foreach ($users as $user) {
                // RÃ©cupÃ©rer la derniÃ¨re visite de l'utilisateur
                $derniereVisite = $visiteRepository->findOneBy(['user' => $user], ['dernier_visite' => 'DESC']);
                
                // Si l'utilisateur n'a jamais visitÃ© le site, on passe au suivant
                if (!$derniereVisite) {
                    continue;
                }
                
                // RÃ©cupÃ©rer la date de la derniÃ¨re visite
                $derniereDateVisite = $derniereVisite->getDernierVisite();
                
                // Calculer la diffÃ©rence en jours
                $diffJours = $today->diff($derniereDateVisite)->days;
                
                // Si l'utilisateur est inactif depuis 14 jours ou plus
                if ($diffJours >= 14) {
                    // VÃ©rifier si l'utilisateur a dÃ©jÃ  Ã©tÃ© pÃ©nalisÃ© pour cette pÃ©riode d'inactivitÃ©
                    $historiqueRepository = $this->entityManager->getRepository(HistoriquePoints::class);
                    $dejapenalise = $historiqueRepository->findOneBy([
                        'user' => $user,
                        'type' => 'perte',
                        'raison' => '14 Days Absence'
                    ]);
                    
                    // Si l'utilisateur n'a pas encore Ã©tÃ© pÃ©nalisÃ© pour cette pÃ©riode
                    if (!$dejapenalise) {
                        // Retirer 50 points pour inactivitÃ©
                        $this->pointsService->removePoints($user, 50, '14 Days Absence');
                        $penalizedCount++;
                    }
                }
            }
            
            return $penalizedCount;
        } catch (\Exception $e) {
            // Log l'erreur
            error_log('Erreur lors de la vÃ©rification des utilisateurs inactifs: ' . $e->getMessage());
            return 0;
        }
    }
    
    /**
     * Logique avancÃ©e de gestion de visite utilisateur (alignÃ©e avec la version Java)
     */
    public function trackVisitAdvanced(Users $user): array
    {
        $visiteRepository = $this->entityManager->getRepository(VisiteUtilisateur::class);
        $today = new \DateTime();
        $today->setTime(0, 0, 0);
        $lastVisite = $visiteRepository->findOneBy(['user' => $user], ['dernier_visite' => 'DESC']);
        $currentStreak = $lastVisite ? $lastVisite->getSerie() : 0;
        $lastVisitDate = $lastVisite ? $lastVisite->getDernierVisite() : null;
        $newStreak = $currentStreak;
        $message = null;

        if (!$lastVisite) {
            // PremiÃ¨re visite
            $newStreak = 1;
        } else {
            $lastVisit = (clone $lastVisitDate)->setTime(0, 0, 0);
            $yesterday = (clone $today)->modify('-1 day');
            $daysSinceLastVisit = $lastVisit->diff($today)->days;
            if ($daysSinceLastVisit >= 14) {
                // Calculer le nombre d'intervalles de 14 jours
                $intervals = (int) floor($daysSinceLastVisit / 14);
                $pointsToDeduct = $intervals * 5;
                if ($pointsToDeduct > 0) {
                    $this->pointsService->removePoints($user, $pointsToDeduct, 'absence de ' . $daysSinceLastVisit . ' jours');
                    // Historique pour chaque intervalle
                    for ($i = 1; $i <= $intervals; $i++) {
                        $intervalDays = $i * 14;
                        $this->pointsService->addPoints($user, -5, 'perte', 'absence de ' . $intervalDays . ' jours');
                    }
                    $message = 'InactivitÃ© dÃ©tectÃ©e : tu as perdu ' . $pointsToDeduct . ' points pour ' . $daysSinceLastVisit . ' jours d\'absence.';
                }
                $newStreak = 1;
            } elseif ($lastVisit == $yesterday) {
                $newStreak = $currentStreak + 1;
            } elseif ($lastVisit != $today) {
                $newStreak = 1;
            }
        }

        // Bonus pour 7 jours consÃ©cutifs
        if ($newStreak == 7) {
            $this->pointsService->addPoints($user, 50, 'gain', 'visite 7 jours');
            $message = 'FÃ©licitations ! Tu as gagnÃ© 50 points pour 7 jours consÃ©cutifs.';
            $newStreak = 0;
        }

        // Enregistrer la visite du jour
        try {
            $visite = new VisiteUtilisateur();
            $visite->setUser($user);
            $visite->setDernierVisite($today);
            $visite->setSerie($newStreak);
            $this->entityManager->persist($visite);
            $this->entityManager->flush();
        } catch (\Exception $e) {
            error_log('Erreur persist/flush VisiteUtilisateur dans trackVisitAdvanced: ' . $e->getMessage());
            throw $e;
        }

        return [
            'success' => true,
            'message' => $message,
            'serie' => $newStreak
        ];
    }
}
</file>

<file path="WebSocket/Chat.php">
<?php
// src/WebSocket/Chat.php
namespace App\WebSocket;

use Ratchet\MessageComponentInterface;
use Ratchet\ConnectionInterface;

class Chat implements MessageComponentInterface
{
    protected $clients;

    public function __construct()
    {
        $this->clients = new \SplObjectStorage;
    }

    public function onOpen(ConnectionInterface $conn)
    {
        $this->clients->attach($conn);
    }

    public function onMessage(ConnectionInterface $from, $msg)
    {
        foreach ($this->clients as $client) {
            if ($from !== $client) {
                $client->send($msg);
            }
        }
    }

    public function onClose(ConnectionInterface $conn)
    {
        $this->clients->detach($conn);
    }

    public function onError(ConnectionInterface $conn, \Exception $e)
    {
        $conn->close();
    }
}
</file>

</files>
