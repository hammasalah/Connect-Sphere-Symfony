This file is a merged representation of the entire codebase, combined into a single document by Repomix.

<file_summary>
This section contains a summary of this file.

<purpose>
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.
</purpose>

<file_format>
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files (if enabled)
5. Multiple file entries, each consisting of:
  - File path as an attribute
  - Full contents of the file
</file_format>

<usage_guidelines>
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.
</usage_guidelines>

<notes>
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Files are sorted by Git change count (files with more changes are at the bottom)
</notes>

</file_summary>

<directory_structure>
.env.test
.gitignore
bin/console
bin/phpunit
compose.override.yaml
compose.yaml
composer.json
config/bundles.php
config/packages/cache.yaml
config/packages/debug.yaml
config/packages/doctrine_migrations.yaml
config/packages/doctrine.yaml
config/packages/framework.yaml
config/packages/mailer.yaml
config/packages/messenger.yaml
config/packages/monolog.yaml
config/packages/notifier.yaml
config/packages/routing.yaml
config/packages/security.yaml
config/packages/translation.yaml
config/packages/twig.yaml
config/packages/validator.yaml
config/packages/web_profiler.yaml
config/preload.php
config/routes.yaml
config/routes/framework.yaml
config/routes/web_profiler.yaml
config/services.yaml
LICENSE
migrations/Version20250416151753.php
migrations/Version20250416213512.php
migrations/Version20250419191515.php
migrations/Version20250419191746.php
migrations/Version20250419191845.php
phpunit.xml.dist
public/css/add_event_form.css
public/css/auth.css
public/css/chatbot.css
public/css/create_job_form.css
public/css/events_page.css
public/css/home.css
public/css/job_feed.css
public/css/organizer.css
public/css/root.css
public/index.php
repomix-output.txt
src/Command/CreateTestUserCommand.php
src/Controller/application/ApplicationFormController.php
src/Controller/auth/AuthController.php
src/Controller/chatbot/ChatbotController.php
src/Controller/create_job/CreateJobController.php
src/Controller/events/EventsController.php
src/Controller/explore/ExploreController.php
src/Controller/group/GroupController.php
src/Controller/home/HomeController.php
src/Controller/jobapplications/JobApplicationsController.php
src/Controller/jobfeed/JobFeedController.php
src/Controller/organizer/OrganizerController.php
src/Controller/participation/ParticipationController.php
src/Controller/profile/ProfileController.php
src/Controller/RootController.php
src/Controller/social/SocialController.php
src/Entity/Applications.php
src/Entity/Category.php
src/Entity/Comments.php
src/Entity/Conversion.php
src/Entity/Events.php
src/Entity/FeedPosts.php
src/Entity/GroupFeedPosts.php
src/Entity/GroupMembers.php
src/Entity/HistoriquePoints.php
src/Entity/Jobs.php
src/Entity/Likes.php
src/Entity/Messages.php
src/Entity/Participation.php
src/Entity/Reviews.php
src/Entity/Rewards.php
src/Entity/Roulette.php
src/Entity/Shares.php
src/Entity/TransactionArgent.php
src/Entity/UserGroups.php
src/Entity/UserIntrests.php
src/Entity/UserMessages.php
src/Entity/UserProfile.php
src/Entity/UserRewards.php
src/Entity/Users.php
src/Entity/VisiteUtilisateur.php
src/Entity/WorkerRaitings.php
src/Form/ApplicationFormType.php
src/Form/CreateJobFormType.php
src/Form/EventsType.php
src/Form/LoginFormType.php
src/Form/RegistrationFormType.php
src/Kernel.php
src/Repository/ApplicationsRepository.php
src/Repository/CategoryRepository.php
src/Repository/CommentsRepository.php
src/Repository/ConversionRepository.php
src/Repository/EventsRepository.php
src/Repository/FeedPostsRepository.php
src/Repository/GroupFeedPostsRepository.php
src/Repository/GroupMembersRepository.php
src/Repository/HistoriquePointsRepository.php
src/Repository/JobsRepository.php
src/Repository/LikesRepository.php
src/Repository/MessagesRepository.php
src/Repository/ParticipationRepository.php
src/Repository/ReviewsRepository.php
src/Repository/RewardsRepository.php
src/Repository/RouletteRepository.php
src/Repository/SharesRepository.php
src/Repository/TransactionArgentRepository.php
src/Repository/UserGroupsRepository.php
src/Repository/UserIntrestsRepository.php
src/Repository/UserMessagesRepository.php
src/Repository/UserProfileRepository.php
src/Repository/UserRewardsRepository.php
src/Repository/UsersRepository.php
src/Repository/VisiteUtilisateurRepository.php
src/Repository/WorkerRaitingsRepository.php
symfony.lock
templates/application_form/application_form.html.twig
templates/auth/auth.html.twig
templates/auth/login.html.twig
templates/auth/register.html.twig
templates/base.html.twig
templates/chatbot/chatbot.html.twig
templates/create_job/createjob.html.twig
templates/events/add_event.html.twig
templates/events/events.html.twig
templates/explore/explore.html.twig
templates/group/group.html.twig
templates/home/home.html.twig
templates/jobapplications/jobapplications.html.twig
templates/jobfeed/jobfeed.html.twig
templates/organizer/organizer.html.twig
templates/profile/profile.html.twig
templates/social/social.html.twig
tests/bootstrap.php
tests/controller/CreateJobControllerTest.php
tests/Functional/RegistrationControllerTest.php
</directory_structure>

<files>
This section contains the contents of the repository's files.

<file path="public/css/add_event_form.css">
:root {
    --primary-color: #1c2b5d;
    --primary-hover: #3d5472;
    --secondary-color: #d54d67;
    --secondary-hover: #b03c54;
    --light-bg: #f8f9fa;
    --white: #ffffff;
    --border-color: #dee2e6;
    --text-color: #343a40;
    --text-muted: #6c757d;
    --input-border: #ced4da;
    --focus-color: #80bdff;
    --focus-shadow: rgba(0, 123, 255, 0.25);
    --error-color: #dc3545;
    --spacing-sm: 0.5rem;
    --spacing-md: 1rem;
    --spacing-lg: 1.5rem;
    --spacing-xl: 2rem;
    --border-radius: 8px;
    --box-shadow: 0 2px 8px rgba(0,0,0,0.08);
    --label-width: 120px;

    /* aliases for home page styles */
    --theme-primary-pink: #E83E8C;
    --theme-secondary-teal: #20C997;
    --theme-bg-light: #FFFFFF;
    --theme-bg-medium: #F8F9FA;
    --theme-border-color: var(--border-color);
    --theme-text-dark: var(--text-color);
    --body-font: 'Poppins', sans-serif;
}

.add-event-page-container {
    max-width: 1000px;
    margin: 2.5rem auto;
    background-color: var(--light-bg);
    padding: 30px;
    border-radius: var(--border-radius);
    box-shadow: 0 4px 12px rgba(0,0,0,0.06);
    position: relative;
    overflow: hidden;
}

.add-event-page-container::before {
    content: '';
    position: absolute;
    top: 0; left: 0; right: 0;
    height: 6px;
    background: linear-gradient(90deg, var(--primary-color), var(--secondary-color));
    z-index: 1;
}

.add-event-page-container h1 {
    font-size: 1.85rem;
    font-weight: 700;
    color: var(--primary-color);
    margin-bottom: 2.2rem;
    padding-bottom: 1rem;
    border-bottom: 1px solid var(--border-color);
    position: relative;
}

.add-event-page-container h1::after {
    content: '';
    position: absolute;
    bottom: -1px; left: 0;
    width: 120px; height: 3px;
    background-color: var(--primary-color);
}

.add-event-form {
    background-color: var(--white);
    padding: 35px 40px;
    border-radius: var(--border-radius);
    box-shadow: var(--box-shadow);
}

.form-field-row {
    display: flex;
    flex-direction: column;
    margin-bottom: var(--spacing-lg);
    align-items: flex-start;
}

.add-event-form .form-label {
    font-weight: 600;
    color: var(--primary-color) !important;
    font-size: 0.95rem;
    margin-bottom: 8px;
    display: block !important;
    background-color: transparent !important;
}

.form-widget-container {
    width: 100%;
}

.add-event-form .form-control,
.add-event-form .form-select,
.add-event-form textarea.form-control,
.add-event-form input[type="datetime-local"] {
    border: 2px solid var(--input-border);
    border-radius: 6px;
    padding: 0.85rem 1rem;
    font-size: 0.95rem;
    color: var(--text-color);
    background-color: var(--white);
    transition: all 0.2s ease-in-out;
    width: 100%;
    box-sizing: border-box;
    margin-bottom: 0.25rem;
}

.add-event-form .form-control:focus,
.add-event-form .form-select:focus,
.add-event-form textarea.form-control:focus,
.add-event-form input[type="datetime-local"]:focus {
    border-color: var(--primary-color);
    outline: 0;
    box-shadow: 0 0 0 0.2rem rgba(28,43,93,0.2);
    transform: translateY(-2px);
}

.add-event-form ::placeholder,
.add-event-form :-ms-input-placeholder,
.add-event-form ::-ms-input-placeholder {
    color: #adb5bd; 
    font-style: italic;
}

.add-event-form textarea.form-control {
     min-height: 140px;
     resize: vertical;
     line-height: 1.5;
}

.date-time-container {
    display: grid;
    grid-template-columns: 1fr 1fr;
    gap: 20px;
    width: 100%;
}

.date-input-group label {
    font-size: 0.85rem;
    color: var(--text-muted);
    margin-bottom: 8px;
    font-weight: 500;
}

.add-event-form input[type="file"] { display: none; }

.file-upload-label {
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    width: 90%;
    padding: 2rem 1.5rem;
    background-color: var(--light-bg);
    background-image:
      linear-gradient(45deg, rgba(28,43,93,0.03) 25%, transparent 25%, transparent 50%,
                      rgba(28,43,93,0.03) 50%, rgba(28,43,93,0.03) 75%, transparent 75%, transparent);
    background-size: 20px 20px;
    border: 2px dashed var(--input-border);
    border-radius: var(--border-radius);
    text-align: center;
    color: var(--primary-color);
    cursor: pointer;
    transition: all 0.3s ease;
    font-weight: 500;
    font-size: 1.1rem;
    position: relative;
    overflow: hidden;
}

.file-upload-label::before {
    content: "📷";
    font-size: 2rem;
    margin-bottom: 10px;
    display: block;
}

.file-upload-label:hover {
    background-color: rgba(28,43,93,0.05);
    border-color: var(--primary-color);
    transform: translateY(-3px);
    box-shadow: 0 4px 12px rgba(0,0,0,0.1);
}

#file-chosen-display {
     display: block;
     text-align: center;
     margin-top: 10px;
     font-size: 0.9rem;
     color: var(--text-muted);
     font-style: italic;
     min-height: 1.5em;
     padding: 5px;
     background-color: rgba(0,0,0,0.02);
     border-radius: 4px;
}

.add-event-form .form-field-row ul.list-unstyled {
     margin-top: 0.4rem;
     margin-bottom: 30px;
     list-style: none;
}

.add-event-form .form-field-row ul.list-unstyled li {
     color: var(--error-color);
     font-size: 0.875em;
     padding-left: 20px;
     position: relative;
}

.add-event-form .form-field-row ul.list-unstyled li::before {
    content: "!";
    position: absolute;
    left: 0; top: 0;
    width: 16px; height: 16px;
    background: var(--error-color);
    color: #fff;
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    font-size: 12px;
    font-weight: bold;
}

.add-event-form .is-invalid {
    border-color: var(--error-color) !important;
    background-color: rgba(220,53,69,0.02);
}

.add-event-form .form-text,
.add-event-form .form-help,
.add-event-form .invalid-feedback,
.add-event-form .form-errors {
    display: block !important;
    width: 100%;
    margin-top: 0.25rem;
    font-size: 0.875rem;
    color: var(--text-muted) !important;
    background: transparent !important;
}

.add-event-form .invalid-feedback,
.add-event-form .form-errors {
    color: var(--error-color) !important;
}

.form-buttons {
    padding-top: var(--spacing-lg);
    margin-top: var(--spacing-xl);
    border-top: 1px solid var(--border-color);
    display: flex;
    justify-content: flex-end;
    gap: 15px;
}

.btn-cancel-event,
.btn-save-event {
    padding: 12px 28px;
    border-radius: 30px;
    font-size: 1rem;
    font-weight: 600;
    border: none;
    cursor: pointer;
    transition: all 0.3s ease;
    line-height: 1.5;
    position: relative;
    overflow: hidden;
}

.btn-cancel-event {
    background-color: var(--secondary-color);
    color: #fff;
}

.btn-save-event {
    background-color: var(--primary-color);
    color: #fff;
}

.btn-cancel-event:hover,
.btn-save-event:hover {
    transform: translateY(-3px);
    box-shadow: 0 4px 12px rgba(0,0,0,0.15);
}

.btn-cancel-event:hover {
    background-color: var(--secondary-hover);
}

.btn-save-event:hover {
    background-color: var(--primary-hover);
}

.btn-save-event::after {
    content: '';
    position: absolute;
    top: 50%; left: 50%;
    width: 5px; height: 5px;
    background: rgba(255,255,255,0.5);
    opacity: 0;
    border-radius: 50%;
    transform: translate(-50%,-50%);
    z-index: -1;
}

.btn-save-event:hover::after {
    animation: ripple 1s ease-out;
}

@keyframes ripple {
    0%   { transform: scale(0); opacity: 0.5; }
    20%  { transform: scale(25); opacity: 0.3; }
    100% { transform: scale(40); opacity: 0; }
}

.btn-save-event.loading {
    pointer-events: none;
    opacity: 0.8;
}
.btn-save-event.loading::before {
    content: '';
    display:inline-block;
    width:1em; height:1em;
    border:2px solid rgba(255,255,255,0.3);
    border-top-color:#fff;
    border-radius:50%;
    animation:spin 1s infinite;
    margin-right:0.5em;
    vertical-align:text-bottom;
}
@keyframes spin {
    to { transform: rotate(360deg); }
}

/* Responsive */
@media (max-width: 768px) {
    .add-event-page-container { padding: 20px; margin: 1rem auto; }
    .add-event-form { padding: 25px 20px; }
    .date-time-container { grid-template-columns: 1fr; gap: 15px; }
    .btn-cancel-event,
    .btn-save-event {
        padding: 10px 20px;
        width: 100%;
    }
    .form-buttons { flex-direction: column-reverse; }
}

/* --- Header Styles (from home page) --- */
.header {
    background: #fff;
    box-shadow: 0 1px 3px rgba(0,0,0,0.1);
    padding: .8rem 1rem;
    border-bottom: 1px solid var(--theme-border-color);
    font-family: var(--body-font);
}
.header .nav-container {
    display: flex;
    justify-content: space-between;
    align-items: center;
    max-width: 1140px;
    margin: 0 auto;
    padding: 0 15px;
}
.header .logo-img {
    height: 80px;
}
.header .nav-links {
    display: flex;
    gap: 1.5rem;
}
.header .nav-link {
    font-weight: 500;
    transition: color .2s;
    color: var(--theme-text-dark);
    text-decoration: none;
}
.header .nav-link:hover {
    color: var(--theme-primary-pink);
    text-decoration: none;
}
.header .contact-btn {
    background: var(--theme-primary-pink);
    color: white;
    padding: .5rem 1.2rem;
    border-radius: 20px;
    font-weight: 500;
    text-decoration: none;
    transition: background .2s;
}
.header .contact-btn:hover {
    background: #d0367c;
    color: white;
}



/* --- Footer Styles (from home page) --- */
.site-footer {
    background: #343a40;
    color: rgba(255,255,255,.75);
    padding: 3rem 1rem 1.5rem;
    margin-top: 3rem;
    font-family: var(--body-font);
}
.site-footer .footer-content {
    display: flex;
    flex-wrap: wrap;
    justify-content: space-between;
    gap: 2rem;
    max-width: 1140px;
    margin: 0 auto;
    padding: 0 15px;
}
.site-footer .footer-column {
    flex: 1;
    min-width: 200px;
}
.site-footer .footer-column h4 {
    color: #fff;
    margin-bottom: 1rem;
    font-weight: 600;
    border-bottom: 2px solid #E83E8C;
    display: inline-block;
    padding-bottom: .5rem;
}
.site-footer .footer-column ul {
    list-style: none;
    padding: 0;
}
.site-footer .footer-column ul li {
    margin-bottom: .6rem;
}
.site-footer .footer-column ul li a {
    color: rgba(255,255,255,.75);
    transition: color .2s;
    text-decoration: none;
}
.site-footer .footer-column ul li a:hover {
    color: #E83E8C;
    text-decoration: none;
}
.site-footer .footer-contact i {
    margin-right: .5rem;
    color: #E83E8C;
}
.site-footer .footer-social-icons a {
    color: rgba(255,255,255,.75);
    margin-right: 1rem;
    font-size: 1.5rem;
    transition: color .2s;
    text-decoration: none;
}
.site-footer .footer-social-icons a:hover {
    color: #E83E8C;
    text-decoration: none;
}
.site-footer .footer-bottom {
    text-align: center;
    margin-top: 2rem;
    font-size: .85rem;
    color: rgba(255,255,255,.55);
    border-top: 1px solid #495057;
    padding-top: 1rem;
    max-width: 1140px;
    margin-left: auto;
    margin-right: auto;
}
</file>

<file path="public/css/chatbot.css">
/* Base variables */
:root {
    --theme-primary-pink: #E83E8C;
    --theme-secondary-teal: #20C997;
    --theme-text-dark: #343A40;
    --theme-bg-light: #FFFFFF;
    --theme-bg-medium: #F8F9FA;
    --theme-border-color: #DEE2E6;
    --body-font: 'Poppins', sans-serif;
    
    /* New variables for the enhanced chatbot */
    --chatbot-accent: #1c2b5d;
    --chatbot-shadow: 0 6px 16px rgba(0,0,0,0.12);
    --chatbot-gradient: linear-gradient(135deg, #1c2b5d, #3d5472);
    --user-msg-bg: #e8f4ff;
    --bot-msg-bg: #f0f2f5;
    --animation-timing: 0.3s;
}

/* Header styles */
.header {
    background: #fff;
    box-shadow: 0 1px 3px rgba(0,0,0,0.1);
    padding: .8rem 1rem;
    border-bottom: 1px solid var(--theme-border-color);
    font-family: var(--body-font);
}

.header .nav-container {
    display: flex;
    justify-content: space-between;
    align-items: center;
    max-width: 1140px;
    margin: 0 auto;
    padding: 0 15px;
}

.header .logo-img {
    height: 80px;
}

.header .nav-links {
    display: flex;
    gap: 1.5rem;
}

.header .nav-link {
    font-weight: 500;
    transition: color .2s;
    color: var(--theme-text-dark);
    text-decoration: none;
}

.header .nav-link:hover {
    color: var(--theme-primary-pink);
    text-decoration: none;
}

.header .contact-btn {
    background: var(--theme-primary-pink);
    color: white;
    padding: .5rem 1.2rem;
    border-radius: 20px;
    font-weight: 500;
    text-decoration: none;
    transition: background .2s;
}

.header .contact-btn:hover {
    background: #d0367c;
    color: white;
}

/* Footer styles */
.site-footer {
    background: #343a40;
    color: rgba(255,255,255,.75);
    padding: 3rem 1rem 1.5rem;
    margin-top: 3rem;
    font-family: var(--body-font);
}

.site-footer .footer-content {
    display: flex;
    flex-wrap: wrap;
    justify-content: space-between;
    gap: 2rem;
    max-width: 1140px;
    margin: 0 auto;
    padding: 0 15px;
}

.site-footer .footer-column {
    flex: 1;
    min-width: 200px;
}

.site-footer .footer-column h4 {
    color: #fff;
    margin-bottom: 1rem;
    font-weight: 600;
    border-bottom: 2px solid #E83E8C;
    display: inline-block;
    padding-bottom: .5rem;
}

.site-footer .footer-column ul {
    list-style: none;
    padding: 0;
}

.site-footer .footer-column ul li {
    margin-bottom: .6rem;
}

.site-footer .footer-column ul li a {
    color: rgba(255,255,255,.75);
    transition: color .2s;
    text-decoration: none;
}

.site-footer .footer-column ul li a:hover {
    color: #E83E8C;
    text-decoration: none;
}

.site-footer .footer-contact i {
    margin-right: .5rem;
    color: #E83E8C;
}

.site-footer .footer-social-icons a {
    color: rgba(255,255,255,.75);
    margin-right: 1rem;
    font-size: 1.5rem;
    transition: color .2s;
    text-decoration: none;
}

.site-footer .footer-social-icons a:hover {
    color: #E83E8C;
    text-decoration: none;
}

.site-footer .footer-bottom {
    text-align: center;
    margin-top: 2rem;
    font-size: .85rem;
    color: rgba(255,255,255,.55);
    border-top: 1px solid #495057;
    padding-top: 1rem;
    max-width: 1140px;
    margin-left: auto;
    margin-right: auto;
}

/* Enhanced Chatbot styles */
.chatbot-page-container {
    min-height: 100vh;
    display: flex;
    flex-direction: column;
    background: linear-gradient(135deg, #f8f9fa, #e9ecef);
}

.chatbot-main-content {
    flex: 1;
    padding: 2rem 1rem;
    display: flex;
    justify-content: center;
    align-items: center;
}

.chatbot-container {
    max-width: 900px;
    width: 100%;
    margin: 0 auto;
    padding: 0;
    background-color: var(--theme-bg-light);
    border-radius: 12px;
    box-shadow: var(--chatbot-shadow);
    display: flex;
    flex-direction: column;
    height: 75vh;
    border: 1px solid var(--theme-border-color);
    overflow: hidden;
    transition: all var(--animation-timing) ease;
}

.chatbot-header {
    background: var(--chatbot-gradient);
    color: white;
    padding: 1.5rem 1.5rem;
    border-top-left-radius: 12px;
    border-top-right-radius: 12px;
    display: flex;
    align-items: center;
    justify-content: space-between;
}

.chatbot-header-left {
    display: flex;
    align-items: center;
}

.chatbot-avatar {
    width: 60px;
    height: 60px;
    background-color: white;
    border-radius: 50%;
    margin-right: 15px;
    display: flex;
    align-items: center;
    justify-content: center;
    box-shadow: 0 4px 8px rgba(0,0,0,0.25);
    border: 2px solid rgba(255,255,255,0.5);
    transition: transform 0.3s ease;
}

.chatbot-avatar:hover {
    transform: scale(1.05);
}

.chatbot-avatar i {
    color: var(--chatbot-accent);
    font-size: 2rem;
}

.chatbot-title {
    margin: 0;
    color: white;
    font-size: 1.4rem;
    font-weight: 600;
}

.chatbot-header-right {
    display: flex;
    gap: 10px;
}

.chatbot-header-button {
    background: rgba(255,255,255,0.2);
    border: none;
    width: 32px;
    height: 32px;
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    color: white;
    cursor: pointer;
    transition: background var(--animation-timing);
}

.chatbot-header-button:hover {
    background: rgba(255,255,255,0.3);
}

#chatbot-response-area {
    flex-grow: 1;
    background-color: #ffffff;
    padding: 1.5rem;
    overflow-y: auto;
    display: flex;
    flex-direction: column;
    gap: 1rem;
    scroll-behavior: smooth;
}

.message {
    padding: 12px 16px;
    border-radius: 18px;
    max-width: 80%;
    position: relative;
    font-size: 0.95rem;
    line-height: 1.5;
    animation: messageAppear 0.3s ease-out;
}

@keyframes messageAppear {
    from {
        opacity: 0;
        transform: translateY(10px);
    }
    to {
        opacity: 1;
        transform: translateY(0);
    }
}

.message.bot {
    background-color: var(--bot-msg-bg);
    border-bottom-left-radius: 4px;
    align-self: flex-start;
    color: var(--theme-text-dark);
}

.message.user {
    background-color: var(--user-msg-bg);
    border-bottom-right-radius: 4px;
    align-self: flex-end;
    color: var(--chatbot-accent);
}

.message-time {
    font-size: 0.7rem;
    color: #6c757d;
    margin-top: 5px;
    text-align: right;
}

.bot-typing {
    display: flex;
    gap: 5px;
    padding: 12px 16px;
    background-color: var(--bot-msg-bg);
    border-radius: 18px;
    border-bottom-left-radius: 4px;
    align-self: flex-start;
    max-width: 100px;
}

.typing-dot {
    width: 8px;
    height: 8px;
    background-color: #6c757d;
    border-radius: 50%;
    animation: typingAnimation 1.5s infinite ease-in-out;
}

.typing-dot:nth-child(1) {
    animation-delay: 0s;
}

.typing-dot:nth-child(2) {
    animation-delay: 0.3s;
}

.typing-dot:nth-child(3) {
    animation-delay: 0.6s;
}

@keyframes typingAnimation {
    0%, 100% {
        transform: translateY(0);
    }
    50% {
        transform: translateY(-5px);
    }
}

#chatbot-response-area p {
    margin-bottom: 0.8em;
}

#chatbot-response-area ul,
#chatbot-response-area ol {
    margin-left: 1.5em;
    margin-bottom: 0.8em;
}

#chatbot-response-area li {
    margin-bottom: 0.3em;
}

#chatbot-response-area pre {
    background-color: #e9ecef;
    padding: 10px;
    border-radius: 8px;
    overflow-x: auto;
    margin-bottom: 0.8em;
}

#chatbot-response-area code {
    font-family: monospace;
}

#chatbot-response-area h1,
#chatbot-response-area h2,
#chatbot-response-area h3,
#chatbot-response-area h4 {
    margin-top: 1em;
    margin-bottom: 0.5em;
    color: var(--chatbot-accent);
    font-weight: 600;
}

.chatbot-input-container {
    padding: 1rem 1.5rem;
    background-color: white;
    border-top: 1px solid var(--theme-border-color);
}

.chatbot-input-area {
    display: flex;
    gap: 10px;
    align-items: center;
    background-color: var(--theme-bg-medium);
    border-radius: 24px;
    padding: 6px;
    position: relative;
    transition: all var(--animation-timing);
    border: 1px solid var(--theme-border-color);
}

.chatbot-input-area:focus-within {
    box-shadow: 0 0 0 2px rgba(28, 43, 93, 0.2);
    border-color: var(--chatbot-accent);
}

.input-icon {
    display: flex;
    align-items: center;
    justify-content: center;
    width: 38px;
    height: 38px;
    color: #6c757d;
    cursor: pointer;
    transition: color var(--animation-timing);
}

.input-icon:hover {
    color: var(--theme-primary-pink);
}

#chatbot-input {
    flex-grow: 1;
    padding: 10px 5px;
    border: none;
    background: transparent;
    font-size: 0.95rem;
    outline: none;
}

#chatbot-send-btn {
    width: 38px;
    height: 38px;
    background-color: var(--chatbot-accent);
    color: white;
    border: none;
    border-radius: 50%;
    cursor: pointer;
    font-size: 1rem;
    display: flex;
    align-items: center;
    justify-content: center;
    transition: all var(--animation-timing);
}

#chatbot-send-btn:hover {
    background-color: #3d5472;
    transform: scale(1.05);
}

#chatbot-send-btn:disabled {
    background-color: #6c757d;
    cursor: not-allowed;
    transform: scale(1);
}

#chatbot-send-btn i {
    transition: transform var(--animation-timing);
}

#chatbot-send-btn:hover i {
    transform: translateX(2px);
}

.loading-indicator {
    display: flex !important;
    align-items: center;
    justify-content: center;
    gap: 10px;
    color: var(--chatbot-accent);
    padding: 10px;
    margin-bottom: 10px;
    border-radius: 8px;
    background-color: rgba(28, 43, 93, 0.05);
    font-weight: 500;
}

.loading-indicator i {
    animation: spin 1s infinite linear;
}

@keyframes spin {
    from {
        transform: rotate(0deg);
    }
    to {
        transform: rotate(360deg);
    }
}

.error-message {
    background-color: #f8d7da;
    color: #721c24;
    border: 1px solid #f5c6cb;
    display: none;
    padding: 12px;
    margin-bottom: 10px;
    border-radius: 8px;
    font-weight: 500;
    animation: shake 0.5s;
}

@keyframes shake {
    0%, 100% {transform: translateX(0);}
    10%, 30%, 50%, 70%, 90% {transform: translateX(-5px);}
    20%, 40%, 60%, 80% {transform: translateX(5px);}
}

.suggestions-container {
    display: flex;
    flex-wrap: wrap;
    gap: 8px;
    margin-top: 15px;
    padding-bottom: 5px;
}

.suggestion-chip {
    background-color: #e9ecef;
    border: 1px solid #ced4da;
    border-radius: 16px;
    padding: 6px 12px;
    font-size: 0.85rem;
    cursor: pointer;
    transition: all var(--animation-timing);
    white-space: nowrap;
    display: flex;
    align-items: center;
    gap: 6px;
}

.suggestion-chip:hover {
    background-color: var(--theme-primary-pink);
    color: white;
    border-color: var(--theme-primary-pink);
}

.chatbot-info-panel {
    display: flex;
    gap: 10px;
    padding: 15px;
    background-color: rgba(28, 43, 93, 0.05);
    border-radius: 8px;
    margin-bottom: 15px;
}

.info-icon {
    color: var(--chatbot-accent);
    font-size: 1.5rem;
}

.info-content {
    flex: 1;
}

.info-content h4 {
    margin-top: 0;
    margin-bottom: 5px;
    color: var(--chatbot-accent);
}

.info-content p {
    margin-bottom: 0;
    font-size: 0.9rem;
}

/* Responsive adjustments */
@media (max-width: 768px) {
    .chatbot-container {
        height: 80vh;
        border-radius: 8px;
    }
    
    .chatbot-header {
        padding: 1rem;
    }
    
    .message {
        max-width: 90%;
    }
    
    .chatbot-title {
        font-size: 1.2rem;
    }
    
    .chatbot-input-container {
        padding: 0.75rem;
    }
}
</file>

<file path="public/css/events_page.css">
/* --- Base Styles --- */
:root {
   --primary-color: #1c2b5d;
   --primary-hover: #3d5472;
   --secondary-color: #d54d67;
   --secondary-hover: #b03c54;
   --light-bg: #f8f9fa;
   --card-shadow: 0 4px 8px rgba(0, 0, 0, 0.06);
   --card-shadow-hover: 0 8px 16px rgba(0, 0, 0, 0.1);
   --transition-fast: 0.2s ease;
   --transition-medium: 0.3s ease;
   --border-radius: 10px;
   
   /* Header/Footer variables */
   --theme-primary-pink: #E83E8C;
   --theme-secondary-teal: #20C997;
   --theme-text-dark: #343A40;
   --theme-border-color: #DEE2E6;
   --map-bg-color: #f0f5f9;
   --body-font: 'Poppins', sans-serif;
}

/* --- Global Animations --- */
@keyframes fadeIn {
   from { opacity: 0; transform: translateY(10px); }
   to   { opacity: 1; transform: translateY(0); }
}

/* --- Header Styles --- */
.header {
   background: #fff;
   box-shadow: 0 1px 3px rgba(0,0,0,0.1);
   padding: .8rem 1rem;
   border-bottom: 1px solid var(--theme-border-color);
   font-family: var(--body-font);
}
.header .nav-container {
   display: flex;
   justify-content: space-between;
   align-items: center;
   max-width: 1140px;
   margin: 0 auto;
   padding: 0 15px;
}
.header .logo-img {
   height: 80px;
}
.header .nav-links {
   display: flex;
   gap: 1.5rem;
}
.header .nav-link {
   font-weight: 500;
   transition: color .2s;
   color: var(--theme-text-dark);
   text-decoration: none;
}
.header .nav-link:hover {
   color: var(--theme-primary-pink);
   text-decoration: none;
}
.header .contact-btn {
   background: var(--theme-primary-pink);
   color: white;
   padding: .5rem 1.2rem;
   border-radius: 20px;
   font-weight: 500;
   text-decoration: none;
   transition: background .2s;
}
.header .contact-btn:hover {
   background: #d0367c;
   color: white;
}

/* --- Main Content Styles --- */
.event-list-page {
   padding: 25px 30px;
   background-color: var(--light-bg);
   min-height: calc(100vh - 60px);
}

/* --- Top Controls --- */
.events-controls-header { 
   display: flex; 
   flex-wrap: wrap; 
   justify-content: space-between; 
   align-items: center; 
   padding: 15px 0; 
   margin-bottom: 20px; 
   border-bottom: 1px solid rgba(222, 226, 230, 0.7); 
   gap: 20px; 
   animation: fadeIn 0.5s ease-out;
}
.events-controls-header .page-title { 
   font-size: 1.8rem; 
   font-weight: 700; 
   color: var(--primary-color); 
   margin: 0; 
   flex-shrink: 0; 
   position: relative;
}
.page-title::after {
   content: '';
   position: absolute;
   bottom: -5px;
   left: 0;
   width: 50px;
   height: 3px;
   background: var(--secondary-color);
   border-radius: 3px;
}

/* Controls row - key fix for alignment */
.controls-row {
   display: flex;
   align-items: center;
   flex-grow: 1;
   justify-content: flex-end;
   gap: 12px;
}

.search-filter-form { 
   display: flex; 
   align-items: center; 
   gap: 12px; 
   flex-grow: 1;
   max-width: 500px;
}

.search-filter-form input[type="text"] { 
   font-size: 0.95rem; 
   padding: 8px 15px; 
   border: 1px solid #ced4da; 
   border-radius: 6px; 
   background-color: #fff; 
   height: 40px;
   flex-grow: 1; 
   transition: var(--transition-fast);
   box-shadow: 0 2px 4px rgba(0,0,0,0.05);
}

.search-filter-form input[type="text"]:focus { 
   border-color: var(--primary-color); 
   box-shadow: 0 0 0 3px rgba(28, 43, 93, 0.15); 
   outline: none; 
}

/* --- Category Grid Layout --- */
.category-filters-section {
   padding: 15px 0;
   margin-bottom: 30px;
   border-bottom: 1px solid rgba(224, 224, 224, 0.7);
   animation: fadeIn 0.6s ease-out;
}

.category-filters-container {
   width: 100%;
   display: flex;
   justify-content: center;
}

.category-filters-list {
   display: grid;
   grid-template-columns: repeat(7, auto);
   justify-content: center;
   gap: 10px;
   list-style: none;
   padding: 0;
   margin: 0;
}

/* Second row of categories */
.category-filters-list li:nth-child(n+8) {
   grid-column: span 1;
}

/* Center the second row */
.category-filters-list::after {
   content: '';
   grid-column: 1 / span 3;
}
.category-pill a {
   display: inline-flex;
   align-items: center;
   padding: 8px 16px;
   border-radius: 25px;
   background-color: #e9ecef;
   color: #495057;
   text-decoration: none;
   font-size: 0.9rem;
   font-weight: 500;
   border: 1px solid #ced4da;
   transition: var(--transition-fast);
   box-shadow: 0 2px 4px rgba(0,0,0,0.05);
   white-space: nowrap;
}
.category-pill a i {
   margin-right: 8px;
   font-size: 0.9em;
   width: 16px;
   text-align: center;
}
.category-pill a:hover {
   background-color: #ced4da;
   color: var(--primary-color);
   border-color: #adb5bd;
   transform: translateY(-1px);
}
.category-pill.active a {
   background-color: var(--primary-color);
   color: white;
   border-color: var(--primary-color);
   font-weight: 600;
   box-shadow: 0 3px 6px rgba(28, 43, 93, 0.2);
}
.category-pill.active a i {
   color: white;
}

/* --- Consistent Button Sizes --- */
/* --- Button Styles --- */
.btn-search, .btn-add-event-page {
   height: 40px;
   min-width: 120px;
   padding: 8px 18px;
   border-radius: 6px;
   font-size: 0.95rem;
   font-weight: 500;
   display: inline-flex;
   align-items: center;
   justify-content: center;
   text-align: center;
   box-sizing: border-box;
   transition: var(--transition-fast);
   box-shadow: 0 2px 4px rgba(0,0,0,0.1);
   white-space: nowrap;
}

.search-filter-form button[type="submit"].btn-search {
   background-color: #6c757d;
   color: white;
   border: none;
   flex-shrink: 0;
}

.btn-add-event-page {
   background-color: var(--primary-color);
   color: white;
   border: none;
   text-decoration: none;
   flex-shrink: 0;
}

.search-filter-form button[type="submit"].btn-search:hover,
.btn-add-event-page:hover {
   transform: translateY(-1px);
   box-shadow: 0 4px 8px rgba(0,0,0,0.15);
}

.search-filter-form button[type="submit"].btn-search:hover {
   background-color: #5a6268;
}

.btn-add-event-page:hover {
   background-color: var(--primary-hover);
}

/* --- Event Grid --- */
.event-grid-row { 
   display: flex; 
   flex-wrap: wrap; 
   gap: 25px; 
   margin-top: 25px; 
   justify-content: flex-start; 
}
.event-column { 
   flex-basis: calc(25% - 19px); 
   min-width: 280px; 
   display: flex; 
   padding: 0; 
   animation: fadeIn 0.5s ease-out;
   animation-fill-mode: both;
}
.event-column:nth-child(1) { animation-delay: 0.1s; }
.event-column:nth-child(2) { animation-delay: 0.2s; }
.event-column:nth-child(3) { animation-delay: 0.3s; }
.event-column:nth-child(4) { animation-delay: 0.4s; }
.event-column:nth-child(5) { animation-delay: 0.5s; }
.event-column:nth-child(6) { animation-delay: 0.6s; }
.event-column:nth-child(n+7) { animation-delay: 0.7s; }

.event-display-card { 
   border: 1px solid rgba(233, 236, 239, 0.8); 
   border-radius: var(--border-radius); 
   background-color: #ffffff; 
   box-shadow: var(--card-shadow); 
   transition: transform 0.3s ease-out, box-shadow 0.3s ease-out; 
   height: 100%; 
   display: flex; 
   flex-direction: column; 
   overflow: hidden; 
   width: 100%; 
   position: relative;
}
.event-display-card:hover { 
   transform: translateY(-8px); 
   box-shadow: var(--card-shadow-hover); 
}
.event-display-card::before {
   content: '';
   position: absolute;
   top: 0;
   left: 0;
   width: 100%;
   height: 4px;
   background: linear-gradient(90deg, var(--primary-color), var(--secondary-color));
   opacity: 0;
   transition: var(--transition-fast);
}
.event-display-card:hover::before {
   opacity: 1;
}
.event-display-card .card-img-wrapper { 
   background-color: var(--light-bg); 
   text-align: center; 
   padding: 15px; 
   border-bottom: 1px solid rgba(233, 236, 239, 0.8); 
   min-height: 200px; 
   display: flex; 
   align-items: center; 
   justify-content: center; 
   transition: var(--transition-fast);
}
.event-display-card:hover .card-img-wrapper {
   background-color: #f1f3f5;
}
.event-display-card .card-img-top { 
   max-height: 180px; 
   width: auto; 
   max-width: 100%; 
   object-fit: contain; 
   display: inline-block; 
   border-radius: 6px; 
   transition: var(--transition-fast);
}
.event-display-card:hover .card-img-top {
   transform: scale(1.03);
}
.event-display-card .card-body { 
   padding: 1.25rem 1.5rem; 
   flex-grow: 1; 
   display: flex; 
   flex-direction: column; 
   text-align: center; 
}
.event-display-card .card-title { 
   font-size: 1.2rem; 
   font-weight: 700; 
   color: #343a40; 
   margin-bottom: 0.8rem; 
   transition: var(--transition-fast);
}
.event-display-card:hover .card-title {
   color: var(--primary-color);
}
.event-display-card .event-text-details { 
   font-size: 0.92rem; 
   color: #495057; 
   line-height: 1.6; 
   margin-bottom: 1.2rem; 
   flex-grow: 1; 
}
.event-display-card .event-text-details small { 
   display: block; 
   margin-top: 6px; 
   color: #6c757d; 
   font-size: 0.82rem;
}
.event-card-actions { 
   margin-top: auto; 
   padding-top: 1.2rem; 
   display: flex; 
   justify-content: center; 
   gap: 12px; 
}
.btn-view-details, .btn-participate { 
   font-size: 0.88rem; 
   padding: 8px 18px; 
   border-radius: 6px; 
   border: none; 
   transition: var(--transition-fast); 
   font-weight: 600; 
   text-transform: uppercase; 
   letter-spacing: 0.5px; 
   cursor: pointer; 
   text-decoration: none; 
   box-shadow: 0 2px 4px rgba(0,0,0,0.1);
}
.btn-view-details { 
   background-color: var(--secondary-color); 
   color: white; 
}
.btn-view-details:hover { 
   background-color: var(--secondary-hover); 
   transform: translateY(-2px);
   box-shadow: 0 4px 8px rgba(213, 77, 103, 0.2);
}
.btn-participate { 
   background-color: var(--primary-color); 
   color: white; 
}
.btn-participate:hover { 
   background-color: var(--primary-hover); 
   transform: translateY(-2px);
   box-shadow: 0 4px 8px rgba(28, 43, 93, 0.2);
}
.no-events-message { 
   text-align: center; 
   padding: 3rem; 
   color: #6c757d; 
   font-size: 1.1rem;
   width: 100%;
   background: white;
   border-radius: var(--border-radius);
   box-shadow: var(--card-shadow);
   animation: fadeIn 0.5s ease-out;
}
.no-events-message a { 
   color: var(--primary-color); 
   text-decoration: none;
   font-weight: 600;
   position: relative;
}
.no-events-message a::after {
   content: '';
   position: absolute;
   bottom: -2px;
   left: 0;
   width: 100%;
   height: 2px;
   background: var(--primary-color);
   transform: scaleX(0);
   transition: transform 0.3s ease;
   transform-origin: right;
}
.no-events-message a:hover::after {
   transform: scaleX(1);
   transform-origin: left;
}

/* --- Event Modal --- */
.event-modal-overlay { 
   position: fixed; 
   top: 0; 
   left: 0; 
   width: 100%; 
   height: 100%; 
   background-color: rgba(0, 0, 0, 0.6); 
   display: none; 
   justify-content: center; 
   align-items: center; 
   z-index: 1050; 
   opacity: 0; 
   transition: opacity 0.3s ease; 
   backdrop-filter: blur(5px);
}
.event-modal-overlay.active { 
   display: flex; 
   opacity: 1; 
}
.event-modal-content { 
   background-color: #fff; 
   border-radius: var(--border-radius); 
   box-shadow: 0 10px 30px rgba(0,0,0,0.3); 
   width: 90%; 
   max-width: 500px; 
   max-height: 90vh; 
   overflow-y: auto; 
   position: relative; 
   display: flex; 
   flex-direction: column; 
   transform: scale(0.9); 
   transition: transform 0.3s ease, opacity 0.3s ease; 
   opacity: 0;
   border: 1px solid rgba(0,0,0,0.1);
}
.event-modal-overlay.active .event-modal-content { 
   transform: scale(1); 
   opacity: 1;
}
.event-modal-body { 
   padding: 30px 35px; 
   text-align: center; 
}
.event-modal-image-wrapper { 
   margin-bottom: 25px; 
   background-color: var(--light-bg); 
   padding: 10px; 
   border-radius: 8px; 
   display: inline-block; 
   box-shadow: 0 2px 4px rgba(0,0,0,0.05);
   transition: var(--transition-fast);
}
.event-modal-image-wrapper:hover {
   transform: scale(1.02);
   box-shadow: 0 4px 8px rgba(0,0,0,0.1);
}
.event-modal-image { 
   max-width: 100%; 
   max-height: 250px; 
   object-fit: contain; 
   border-radius: 6px; 
   transition: var(--transition-fast);
}
.event-modal-title { 
   font-size: 1.7rem; 
   font-weight: 700; 
   margin-bottom: 15px; 
   color: var(--primary-color); 
   position: relative;
   padding-bottom: 10px;
}
.event-modal-title::after {
   content: '';
   position: absolute;
   bottom: 0;
   left: 50%;
   transform: translateX(-50%);
   width: 60px;
   height: 3px;
   background: linear-gradient(90deg, var(--primary-color), var(--secondary-color));
   border-radius: 3px;
}
.event-modal-description { 
   font-size: 1.05rem; 
   color: #555; 
   line-height: 1.7; 
   margin-bottom: 25px; 
}
.event-modal-details { 
   font-size: 0.95rem; 
   color: #666; 
   line-height: 1.7; 
   margin-bottom: 30px; 
   border-top: 1px solid #eee; 
   padding-top: 25px; 
   text-align: left; 
}
.event-modal-details strong { 
   color: var(--primary-color); 
   font-weight: 600; 
   display: inline-block; 
   min-width: 90px; 
}
.event-modal-close-x { 
   position: absolute; 
   top: 12px; 
   right: 15px; 
   font-size: 2rem; 
   color: #aaa; 
   background: none; 
   border: none; 
   cursor: pointer; 
   padding: 0; 
   line-height: 1; 
   font-weight: bold; 
   transition: var(--transition-fast);
   z-index: 1;
}
.event-modal-close-x:hover { 
   color: var(--secondary-color); 
   transform: rotate(90deg);
}

/* Modal Footer */
.event-modal-footer {
   padding: 20px 30px; 
   border-top: 1px solid #eee; 
   display: flex;
   justify-content: space-between;
   align-items: center; 
   gap: 15px; 
   background-color: var(--light-bg);
   border-bottom-left-radius: var(--border-radius); 
   border-bottom-right-radius: var(--border-radius);
}
.share-icons { 
   display: flex;
   align-items: center;
   gap: 5px;
}
.share-icons a { 
   color: #495057; 
   font-size: 1.6rem; 
   margin-left: 10px; 
   text-decoration: none; 
   transition: var(--transition-fast); 
   display: inline-flex;
   align-items: center;
   justify-content: center;
   width: 40px;
   height: 40px;
   border-radius: 50%;
   background: rgba(255,255,255,0.8);
}
.share-icons a:hover { 
   transform: scale(1.1) translateY(-3px); 
}
.share-icons a.facebook-share:hover { 
   color: #1877F2; 
   background: rgba(24, 119, 242, 0.1);
}
.share-icons a.whatsapp-share:hover { 
   color: #25D366; 
   background: rgba(37, 211, 102, 0.1);
}
.share-icons a.copy-link:hover { 
   color: #ffc107; 
   background: rgba(255, 193, 7, 0.1);
}
.btn-modal-close { 
   font-size: 0.95rem; 
   padding: 10px 25px; 
   border-radius: 6px; 
   border: none; 
   font-weight: 600; 
   cursor: pointer; 
   transition: var(--transition-fast); 
   background-color: var(--secondary-color); 
   color: white; 
   box-shadow: 0 2px 4px rgba(0,0,0,0.1);
}
.btn-modal-close:hover { 
   background-color: var(--secondary-hover); 
   transform: translateY(-2px);
   box-shadow: 0 4px 8px rgba(213, 77, 103, 0.2);
}
.copy-link-feedback {
   display: none; 
   position: absolute; 
   bottom: 70px; 
   left: 50%; 
   transform: translateX(-50%);
   background-color: rgba(0, 0, 0, 0.8); 
   color: white; 
   padding: 8px 15px;
   border-radius: 20px; 
   font-size: 0.85rem; 
   white-space: nowrap; 
   z-index: 1070;
   animation: fadeIn 0.3s ease-out;
}

/* --- Footer Styles --- */
.site-footer {
   background: #343a40;
   color: rgba(255,255,255,.75);
   padding: 3rem 1rem 1.5rem;
   margin-top: 3rem;
   font-family: var(--body-font);
}
.site-footer .footer-content {
   display: flex;
   flex-wrap: wrap;
   justify-content: space-between;
   gap: 2rem;
   max-width: 1140px;
   margin: 0 auto;
   padding: 0 15px;
}
.site-footer .footer-column {
   flex: 1;
   min-width: 200px;
}
.site-footer .footer-column h4 {
   color: #fff;
   margin-bottom: 1rem;
   font-weight: 600;
   border-bottom: 2px solid #E83E8C;
   display: inline-block;
   padding-bottom: .5rem;
}
.site-footer .footer-column ul {
   list-style: none;
   padding: 0;
}
.site-footer .footer-column ul li {
   margin-bottom: .6rem;
}
.site-footer .footer-column ul li a {
   color: rgba(255,255,255,.75);
   transition: color .2s;
   text-decoration: none;
}
.site-footer .footer-column ul li a:hover {
   color: #E83E8C;
   text-decoration: none;
}
.site-footer .footer-contact i {
   margin-right: .5rem;
   color: #E83E8C;
}
.site-footer .footer-social-icons a {
   color: rgba(255,255,255,.75);
   margin-right: 1rem;
   font-size: 1.5rem;
   transition: color .2s;
   text-decoration: none;
}
.site-footer .footer-social-icons a:hover {
   color: #E83E8C;
   text-decoration: none;
}
.site-footer .footer-bottom {
   text-align: center;
   margin-top: 2rem;
   font-size: .85rem;
   color: rgba(255,255,255,.55);
   border-top: 1px solid #495057;
   padding-top: 1rem;
   max-width: 1140px;
   margin-left: auto;
   margin-right: auto;
}

/* --- Responsive Adjustments --- */
@media (max-width: 992px) {
   .category-filters-list {
       grid-template-columns: repeat(4, auto);
   }
}

@media (max-width: 768px) {
   .category-filters-list {
       grid-template-columns: repeat(3, auto);
   }
   
   .events-controls-header {
      flex-direction: column;
      align-items: stretch;
   }
   
   .controls-row {
      flex-direction: column;
      width: 100%;
   }
   
   .search-filter-form {
      max-width: 100%;
      width: 100%;
   }
   
   .btn-add-event-page {
      width: 100%;
   }

   .event-card-actions {
      flex-direction: column;
      gap: 8px;
   }
   
   .btn-view-details, .btn-participate {
      width: 100%;
   }
}

@media (max-width: 576px) {
   .category-filters-list {
       grid-template-columns: repeat(2, auto);
   }
   
   .event-card-actions {
       flex-direction: column;
       gap: 8px;
   }
   
   .btn-view-details, .btn-participate {
       width: 100%;
   }
}
</file>

<file path="public/css/home.css">
/* === Original inline CSS === */
:root {
    --theme-primary-pink: #E83E8C; --theme-secondary-teal: #20C997;
    --theme-text-dark: #343A40; --theme-bg-light: #FFFFFF;
    --theme-bg-medium: #F8F9FA; --theme-border-color: #DEE2E6;
    --map-bg-color: #f0f5f9; --body-font: 'Poppins', sans-serif;
  }
  body {
    margin:0; font-family:var(--body-font); background:var(--theme-bg-light);
    color:var(--theme-text-dark); font-size:16px; line-height:1.6;
  }
  a { color:var(--theme-primary-pink); text-decoration:none; }
  a:hover { text-decoration:underline; }
  .container { max-width:1140px; margin:0 auto; padding:0 15px; }

  .header { background:#fff; box-shadow:0 1px 3px rgba(0,0,0,0.1); padding:.8rem 1rem; border-bottom:1px solid var(--theme-border-color); }
  .header .nav-container { display:flex; justify-content:space-between; align-items:center; }
  .header .logo-img { height:80px; }
  .header .nav-links { display:flex; gap:1.5rem; }
  .header .nav-link { font-weight:500; transition:color .2s; }
  .header .nav-link:hover { color:var(--theme-primary-pink); }
  .header .contact-btn { background:var(--theme-primary-pink); color:#fff; padding:.5rem 1.2rem; border-radius:20px; font-weight:500; }
  .header .contact-btn:hover { background:#d0367c; }

  /* === ENHANCED HERO SECTION STYLES === */
  .hero {
    padding: 4rem 1rem;
    text-align: center;
    background: linear-gradient(135deg, rgba(255,255,255,0.95) 0%, rgba(248,249,250,0.95) 100%);
    position: relative;
    overflow: hidden;
  }
  
  .hero::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    
    opacity: 0.05;
    z-index: 0;
  }
  
  .hero .container {
    position: relative;
    z-index: 1;
  }
  
  .hero h1 {
    color: var(--theme-primary-pink);
    font-weight: 800;
    margin-bottom: 0.5rem;
    font-size: 2.5rem;
    text-transform: uppercase;
    letter-spacing: 1px;
    text-shadow: 1px 1px 1px rgba(0,0,0,0.05);
    animation: fadeInDown 1s ease-out;
  }
  
  .hero h2 {
    font-size: 2rem;
    font-weight: 700;
    color: var(--theme-text-dark);
    max-width: 800px;
    margin: 0 auto 2rem;
    line-height: 1.3;
    animation: fadeInUp 1s ease-out;
  }
  
  @keyframes fadeInDown {
    from {
      opacity: 0;
      transform: translateY(-20px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }
  
  @keyframes fadeInUp {
    from {
      opacity: 0;
      transform: translateY(20px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }
  
  @keyframes fadeIn {
    from {
      opacity: 0;
    }
    to {
      opacity: 1;
    }
  }
  
  .featured-events {
    display: flex;
    justify-content: center;
    gap: 1.5rem;
    flex-wrap: wrap;
    margin-bottom: 2.5rem;
    animation: fadeIn 1.2s ease-out;
  }
  
  .featured-event-card {
    flex: 1 1 calc(33% - 1.5rem);
    max-width: calc(33% - 1.5rem);
    background: #fff;
    border-radius: 12px;
    overflow: hidden;
    box-shadow: 0 5px 15px rgba(0,0,0,0.08);
    text-decoration: none;
    color: inherit;
    transition: transform 0.3s, box-shadow 0.3s;
    position: relative;
  }
  
  .featured-event-card:hover {
    transform: translateY(-5px);
    box-shadow: 0 8px 25px rgba(0,0,0,0.15);
    text-decoration: none;
  }
  
  .featured-event-card img {
    width: 100%;
    height: 180px;
    object-fit: cover;
    transition: transform 0.5s;
  }
  
  .featured-event-card:hover img {
    transform: scale(1.05);
  }
  
  .featured-event-card .info {
    padding: 1.2rem;
    position: relative;
  }
  
  .featured-event-card .info h4 {
    margin: 0 0 0.5rem;
    font-size: 1.25rem;
    color: var(--theme-text-dark);
    font-weight: 600;
  }
  
  .featured-event-card .info p {
    margin: 0;
    font-size: 0.95rem;
    color: #555;
  }
  
  #current-date {
    color: #666;
    margin: 0 0 1.5rem;
    font-size: 1.1rem;
    font-weight: 500;
    display: inline-block;
    padding: 0.5rem 1rem;
    background: rgba(255,255,255,0.7);
    border-radius: 30px;
    box-shadow: 0 2px 5px rgba(0,0,0,0.05);
  }
  
  .cta-buttons {
    display: flex;
    justify-content: center;
    gap: 1rem;
    margin-bottom: 1rem;
  }
  
  .cta-btn {
    display: inline-block;
    background: var(--theme-secondary-teal);
    color: #fff;
    padding: 0.75rem 1.5rem;
    border-radius: 30px;
    font-weight: 600;
    text-decoration: none;
    transition: all 0.3s;
    border: none;
    cursor: pointer;
    box-shadow: 0 4px 10px rgba(32, 201, 151, 0.2);
    font-size: 1rem;
  }
  
  .cta-btn:hover {
    background: #1AAE88;
    transform: translateY(-2px);
    box-shadow: 0 6px 15px rgba(32, 201, 151, 0.3);
    text-decoration: none;
  }
  
  .cta-btn.surprise {
    background: var(--theme-primary-pink);
    box-shadow: 0 4px 10px rgba(232, 62, 140, 0.2);
  }
  
  .cta-btn.surprise:hover {
    background: #d0367c;
    box-shadow: 0 6px 15px rgba(232, 62, 140, 0.3);
  }
  
  @media (max-width: 992px) {
    .featured-event-card {
      flex: 1 1 calc(50% - 1.5rem);
      max-width: calc(50% - 1.5rem);
    }
  }
  
  @media (max-width: 768px) {
    .hero h1 {
      font-size: 2rem;
    }
    .hero h2 {
      font-size: 1.5rem;
    }
    .featured-event-card {
      flex: 1 1 100%;
      max-width: 100%;
    }
  }
  /* === END ENHANCED HERO SECTION STYLES === */

  .event-map-section { padding:2.5rem 1rem; background:var(--theme-bg-medium); border-bottom:1px solid var(--theme-border-color); }
  .event-map-section h2 { text-align:center; margin-bottom:2rem; font-weight:600; }
  #standalone-event-map {
    width:100%; max-width:1100px; height:550px; margin:0 auto;
    background:var(--map-bg-color); border:1px solid var(--theme-border-color);
    border-radius:8px; box-shadow:0 5px 15px rgba(0,0,0,0.08); position:relative;
  }
  .map-feedback-message {
    position:absolute; top:50%; left:50%; transform:translate(-50%,-50%);
    background:rgba(255,255,255,0.8); padding:8px 12px; border-radius:4px; color:#666;
  }

  .section { padding:3rem 1rem; }

  .site-footer { background:#343a40; color:rgba(255,255,255,.75); padding:3rem 1rem 1.5rem; margin-top:3rem; }
  .site-footer .footer-content { display:flex; flex-wrap:wrap; justify-content:space-between; gap:2rem; }
  .site-footer .footer-column { flex:1; min-width:200px; }
  .site-footer .footer-column h4 { color:#fff; margin-bottom:1rem; font-weight:600; border-bottom:2px solid #E83E8C; display:inline-block; padding-bottom:.5rem; }
  .site-footer .footer-column ul { list-style:none; padding:0; }
  .site-footer .footer-column ul li { margin-bottom:.6rem; }
  .site-footer .footer-column ul li a { color:rgba(255,255,255,.75); transition:color .2s; }
  .site-footer .footer-column ul li a:hover { color:#E83E8C; }
  .site-footer .footer-contact i { margin-right:.5rem; color:#E83E8C; }
  .site-footer .footer-social-icons a { color:rgba(255,255,255,.75); margin-right:1rem; font-size:1.5rem; transition:color .2s; }
  .site-footer .footer-social-icons a:hover { color:#E83E8C; }
  .site-footer .footer-bottom { text-align:center; margin-top:2rem; font-size:.85rem; color:rgba(255,255,255,.55); border-top:1px solid #495057; padding-top:1rem; }
</file>

<file path="src/Controller/home/HomeController.php">
<?php
// src/Controller/HomeController.php

namespace App\Controller\home; // Gardez le même namespace ou créez-en un nouveau (ex: App\Controller\Main)

use App\Repository\EventsRepository;
use Symfony\Bundle\FrameworkBundle\Controller\AbstractController;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\Routing\Annotation\Route;
use Psr\Log\LoggerInterface;

class HomeController extends AbstractController
{
    private LoggerInterface $logger;

    public function __construct(LoggerInterface $logger)
    {
        $this->logger = $logger;
    }

    // --- NOUVELLE ROUTE pour la page d'accueil post-login ---
    #[Route('/home', name: 'app_home', methods: ['GET'])]
    public function index(EventsRepository $eventsRepository): Response
    {
        $this->logger->info('Home Page: Request received.');
        $eventsJsonForMap = '[]'; // JSON par défaut

        try {
            // 1. Récupérer les événements (pour la carte)
            $allEvents = $eventsRepository->findBy([], ['startTime' => 'DESC'], 50);

            // 2. Préparer les données JSON pour la carte
            $eventsDataForMap = [];
            foreach ($allEvents as $event) {
                $locationText = $event->getLocation();
                if (!empty($locationText)) {
                    $eventsDataForMap[] = [ /* ... données pour la carte ... */
                        'id' => $event->getId(), 'name' => $event->getName() ?? '?',
                        'description' => $event->getDescription() ?? '', 'location' => $locationText,
                        'start_time' => $event->getStartTime() ? date('d/m/Y H:i', strtotime($event->getStartTime())) : 'N/A',
                        'category' => $event->getCategoryId() ? $event->getCategoryId()->getName() : 'N/A',
                    ];
                }
            }
            $this->logger->info(sprintf('Home Page: Prepared %d events for map JSON.', count($eventsDataForMap)));

            // 3. Encoder en JSON
            $_eventsJson = json_encode($eventsDataForMap);
            if ($_eventsJson !== false) { $eventsJsonForMap = $_eventsJson; }
            else { $this->logger->error('Home Page: JSON encoding failed.'); }

        } catch (\Exception $e) {
            $this->logger->error('Home Page: Error loading data.', ['exception' => $e]);
            $this->addFlash('error', 'Could not load map data.');
            $eventsJsonForMap = '[]';
        }

        // 4. Rendre un NOUVEAU template dédié pour cette page
        return $this->render('home/home.html.twig', [ // Nom de template suggéré
            'eventsJsonForMap' => $eventsJsonForMap,
]);

    }
}
</file>

<file path="src/Controller/participation/ParticipationController.php">
<?php
// src/Controller/ParticipationController.php


namespace App\Controller;

use Doctrine\DBAL\Connection;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpFoundation\JsonResponse;
use Symfony\Component\Routing\Annotation\Route;
use Symfony\Bundle\FrameworkBundle\Controller\AbstractController;
use Symfony\Component\HttpFoundation\Session\SessionInterface;

class ParticipationController extends AbstractController
{
    private Connection $connection;

    public function __construct(Connection $connection)
    {
        $this->connection = $connection;
    }

    #[Route('/events/participate/{eventId}', name: 'app_event_participate', methods: ['POST'])]
    public function participate(
        int $eventId,
        Request $request,
        SessionInterface $session
    ): JsonResponse {
        try {
            // Get current user from session
            $currentUser = $session->get('user');
            
            if (!$currentUser) {
                throw new \Exception('You must be logged in to participate');
            }

            $userId = $currentUser->getId();
            if (!$userId) {
                throw new \Exception('Invalid user ID');
            }

            // Check if event exists
            $eventExists = $this->connection->fetchOne(
                'SELECT COUNT(*) FROM events WHERE id = ?',
                [$eventId]
            );
            
            if (!$eventExists) {
                throw new \Exception('Event not found');
            }

            // Check if participation already exists
            $sql = "SELECT COUNT(*) FROM participation_events pe 
                    JOIN participation_uses pu ON pe.participation_id = pu.participation_id
                    WHERE pe.events_id = ? AND pu.users_id = ?";
            $exists = $this->connection->fetchOne($sql, [$eventId, $userId]);

            if ($exists) {
                throw new \Exception('You are already participating in this event');
            }

            // Create new participation record
            $this->connection->beginTransaction();

            // 1. Insert into participation table
            $this->connection->insert('participation', ['num' => 1]);
            $participationId = $this->connection->lastInsertId();

            // 2. Insert into participation_events
            $this->connection->insert('participation_events', [
                'participation_id' => $participationId,
                'events_id' => $eventId
            ]);

            // 3. Insert into participation_uses
            $this->connection->insert('participation_uses', [
                'participation_id' => $participationId,
                'users_id' => $userId
            ]);

            $this->connection->commit();

            return new JsonResponse([
                'success' => true,
                'message' => 'Successfully joined the event!'
            ]);

        } catch (\Exception $e) {
            if ($this->connection->isTransactionActive()) {
                $this->connection->rollBack();
            }
            
            return new JsonResponse([
                'success' => false,
                'message' => $e->getMessage()
            ], 500);
        }
    }
}
</file>

<file path="src/Form/EventsType.php">
<?php
// src/Form/EventsType.php

namespace App\Form;

use App\Entity\Events;
use App\Entity\Category;
use Symfony\Component\Form\AbstractType;
use Symfony\Component\Form\FormBuilderInterface;
use Symfony\Bridge\Doctrine\Form\Type\EntityType;
use Symfony\Component\Form\Extension\Core\Type\FileType;
use Symfony\Component\Form\Extension\Core\Type\TextType;
use Symfony\Component\Form\Extension\Core\Type\DateTimeType;
use Symfony\Component\Form\Extension\Core\Type\IntegerType;
use Symfony\Component\OptionsResolver\OptionsResolver;
use Symfony\Component\Validator\Constraints\NotBlank;
use Symfony\Component\Validator\Constraints\File;
use Symfony\Component\Validator\Constraints\Image;
// Ajoutez cette contrainte si vous voulez valider que endTime > startTime dans le formulaire
use Symfony\Component\Validator\Constraints\GreaterThan;

class EventsType extends AbstractType
{
    public function buildForm(FormBuilderInterface $builder, array $options): void
    {
        $builder
            ->add('name', TextType::class, [
                'label' => 'Event Name',
                'constraints' => [
                    new NotBlank(['message' => 'Please enter an event name.']),
                ],
            ])
            ->add('description', TextType::class, [ // Ou TextareaType
                'label' => 'Description',
                 'constraints' => [
                    new NotBlank(['message' => 'Please enter a description.']),
                ],
            ])
            ->add('startTime', DateTimeType::class, [
                'widget' => 'single_text',
                'label' => 'Start Time',
                'html5' => true,
                'mapped' => false, // <<< AJOUTER ICI
                 'constraints' => [
                    new NotBlank(['message' => 'Please select a start time.']),
                ],
                 'attr' => ['min' => date('Y-m-d\TH:i')],
            ])
            ->add('endTime', DateTimeType::class, [
                'widget' => 'single_text',
                'label' => 'End Time',
                 'html5' => true,
                 'mapped' => false, // <<< AJOUTER ICI
                 'constraints' => [
                    new NotBlank(['message' => 'Please select an end time.']),
                    // Exemple de validation pour s'assurer que endTime > startTime
                    // Fonctionne car le formulaire récupère la valeur de startTime même s'il n'est pas mappé
                    new GreaterThan([
                        'propertyPath' => 'parent.all[startTime].data', // Accède à la donnée du champ startTime
                         'message' => 'End time must be after start time.'
                    ])
                ],
                 'attr' => ['min' => date('Y-m-d\TH:i')],
            ])
             ->add('location', TextType::class, [
                 'label' => 'Location',
                  'constraints' => [
                     new NotBlank(['message' => 'Please enter a location.']),
                 ],
                 // Ce champ est mappé (par défaut mapped=true)
             ])
              ->add('points', IntegerType::class, [
                 'label' => 'Points',
                  'constraints' => [
                     new NotBlank(['message' => 'Please enter the points.']),
                 ],
                  // Ce champ est mappé
             ])
            ->add('categoryId', EntityType::class, [
                'class' => Category::class,
                'choice_label' => 'name',
                'label' => 'Category',
                 'placeholder' => 'Choose a category',
                 'constraints' => [
                    new NotBlank(['message' => 'Please select a category.']),
                ],
                 // Ce champ est mappé
            ])
            ->add('image', FileType::class, [
                'label' => 'Event Image',
                'mapped' => false, // Déjà false, c'est correct
                'required' => false, // Ou true si obligatoire + contrainte NotBlank
                 'constraints' => [
                     // Ajoutez ici la contrainte NotBlank si required=true
                     // new NotBlank(['message' => 'Please upload an event image.']),
                     new Image([
                         'maxSize' => '5M',
                         'mimeTypes' => [
                             'image/jpeg',
                             'image/png',
                             'image/gif',
                         ],
                         'mimeTypesMessage' => 'Please upload a valid image (JPEG, PNG, GIF).',
                         'maxSizeMessage' => 'The image is too large ({{ size }} {{ suffix }}). Allowed maximum size is {{ limit }} {{ suffix }}.',
                     ])
                 ],
            ]);
    }

    public function configureOptions(OptionsResolver $resolver): void
    {
        $resolver->setDefaults([
            'data_class' => Events::class,
            // 'csrf_protection' => true, // Généralement activé par défaut
            // 'csrf_field_name' => '_token',
            // 'csrf_token_id'   => 'event_item', // ID unique pour le token CSRF
        ]);
    }
}
</file>

<file path="templates/events/add_event.html.twig">
{# templates/events/add_event.html.twig #}
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8"/>
  <title>Create New Event | ConnectSphere</title>
  <meta name="viewport" content="width=device-width, initial-scale=1"/>

  {# Base theme CSS (your root styles) #}
  <link rel="stylesheet" href="{{ asset('css/root.css') }}"/>

  {# Page‑specific CSS #}
  <link rel="stylesheet" href="{{ asset('css/add_event_form.css') }}"/>

  {# Bootstrap for alerts, grid, form controls, etc. #}
  <link
    href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css"
    rel="stylesheet"
    integrity="sha384-+++"
    crossorigin="anonymous"
  />

  {# Font Awesome for icons #}
  <link
    rel="stylesheet"
    href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css"
  />
</head>
<body>

  <!-- HEADER -->
  <header class="header">
    <nav class="nav-container container">
      <div class="logo">
        <a href="{{ path('app_home') }}" style="display:flex;align-items:center;text-decoration:none;">
          <img src="{{ asset('images/logo.png') }}" alt="Logo" class="logo-img" style="margin-right:10px;">
          <span style="font-weight:bold;font-size:1.5rem;color:black;">ConnectSphere</span>
        </a>
      </div>
      <div class="nav-links">
        <a href="{{ path('app_home') }}" class="nav-link">Home</a>
        <a href="{{ path('app_events') }}" class="nav-link">Events</a>
        <a href="{{ path('app_chatbot') }}" class="nav-link">Chatbot</a>
        <a href="#" class="nav-link">Speakers</a>
        <a href="#" class="nav-link">Tickets</a>
        <a href="#" class="nav-link">Blogs</a>
        <a href="#" class="contact-btn nav-link">Contact</a>
      </div>
    </nav>
  </header>

  <main class="container py-5">
    <div class="add-event-page-container">
      <h1>Create New Event</h1>

      {# Flash messages #}
      {% for label, messages in app.flashes %}
        <div class="alert alert-{{ label }} alert-dismissible fade show" role="alert">
          {% for message in messages %}{{ message }}{% endfor %}
          <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
      {% endfor %}

      {{ form_start(create_event_form, {
          action: path('app_event_new'),
          method: 'POST',
          attr: { novalidate: 'novalidate', class: 'add-event-form' }
      }) }}

        {% if not create_event_form.vars.valid %}
          <div class="alert alert-danger mb-4">
            {{ form_errors(create_event_form) }}
          </div>
        {% endif %}

        <div class="form-field-row">
          <label for="{{ create_event_form.name.vars.id }}" class="form-label">Event Name</label>
          <div class="form-widget-container">
            {{ form_widget(create_event_form.name, {
                attr: {
                  placeholder: 'Please enter the name of your event',
                  class: form_errors(create_event_form.name) ? 'is-invalid' : ''
                }
            }) }}
            {{ form_errors(create_event_form.name) }}
            <div class="form-help">Choose a clear, descriptive name for your event</div>
          </div>
        </div>

        <div class="form-field-row">
          <label for="{{ create_event_form.description.vars.id }}" class="form-label">Description</label>
          <div class="form-widget-container">
            {{ form_widget(create_event_form.description, {
                attr: {
                  placeholder: 'Describe your event',
                  rows: 5,
                  class: form_errors(create_event_form.description) ? 'is-invalid' : ''
                }
            }) }}
            {{ form_errors(create_event_form.description) }}
            <div class="form-help">Provide details about what participants can expect</div>
          </div>
        </div>

        <div class="form-field-row">
          <label class="form-label">Event Dates</label>
          <div class="form-widget-container">
            <div class="date-time-container d-flex gap-3">
              <div class="date-input-group flex-fill">
                <label>Start day</label>
                {{ form_widget(create_event_form.startTime, {
                    attr: {
                      class: form_errors(create_event_form.startTime) ? 'is-invalid' : ''
                    }
                }) }}
                {{ form_errors(create_event_form.startTime) }}
              </div>
              <div class="date-input-group flex-fill">
                <label>End day</label>
                {{ form_widget(create_event_form.endTime, {
                    attr: {
                      class: form_errors(create_event_form.endTime) ? 'is-invalid' : ''
                    }
                }) }}
                {{ form_errors(create_event_form.endTime) }}
              </div>
            </div>
            <div class="form-help">Select the start and end dates/times of your event</div>
          </div>
        </div>

        <div class="form-field-row">
          <label for="{{ create_event_form.location.vars.id }}" class="form-label">Location</label>
          <div class="form-widget-container">
            {{ form_widget(create_event_form.location, {
                attr: {
                  placeholder: 'Location',
                  class: form_errors(create_event_form.location) ? 'is-invalid' : ''
                }
            }) }}
            {{ form_errors(create_event_form.location) }}
            <div class="form-help">Enter the physical or virtual location of the event</div>
          </div>
        </div>

        <div class="form-field-row">
          <label for="{{ create_event_form.points.vars.id }}" class="form-label">Points</label>
          <div class="form-widget-container">
            {{ form_widget(create_event_form.points, {
                attr: {
                  placeholder: 'Points awarded',
                  class: form_errors(create_event_form.points) ? 'is-invalid' : ''
                }
            }) }}
            {{ form_errors(create_event_form.points) }}
            <div class="form-help">Number of points participants will earn</div>
          </div>
        </div>

        <div class="form-field-row">
          <label for="{{ create_event_form.categoryId.vars.id }}" class="form-label">Category</label>
          <div class="form-widget-container">
            {{ form_widget(create_event_form.categoryId, {
                attr: {
                  class: form_errors(create_event_form.categoryId) ? 'is-invalid' : ''
                }
            }) }}
            {{ form_errors(create_event_form.categoryId) }}
            <div class="form-help">Select the most appropriate category for your event</div>
          </div>
        </div>

        <div class="form-field-row">
          <label class="form-label">Event Image</label>
          <div class="form-widget-container">
            <label
              for="{{ create_event_form.image.vars.id }}"
              class="file-upload-label {{ form_errors(create_event_form.image) ? 'is-invalid' : '' }}"
            >Upload Image</label>
            {{ form_widget(create_event_form.image) }}
            <span id="file-chosen-display">No file chosen</span>
            {{ form_errors(create_event_form.image) }}
            <div class="form-help">Upload an image to represent your event (1200×630px recommended)</div>
          </div>
        </div>

        <div class="form-buttons d-flex gap-3 mt-4">
          <a href="{{ path('app_events') }}" class="btn btn-secondary btn-cancel-event">Cancel</a>
          <button type="submit" id="save-event-btn" class="btn btn-primary btn-save-event">Save Event</button>
        </div>

      {{ form_end(create_event_form) }}
    </div>
  </main>

  <!-- ORIGINAL FOOTER -->
  <footer class="site-footer mt-5">
    <div class="footer-content container">
      <div class="footer-column">
        <h4>ConnectSphere</h4>
        <p>The ultimate platform for planning, promoting, and attending successful events. Join our community!</p>
      </div>
      <div class="footer-column">
        <h4>Quick Links</h4>
        <ul>
          <li><a href="{{ path('app_home') }}">Home</a></li>
          <li><a href="{{ path('app_events') }}">Events</a></li>
          <li><a href="#">About Us</a></li>
          <li><a href="#">Blog</a></li>
          <li><a href="#">Contact</a></li>
          <li><a href="#">Terms of Service</a></li>
        </ul>
      </div>
      <div class="footer-column footer-contact">
        <h4>Contact Us</h4>
        <p><i class="fas fa-phone"></i><a href="tel:+21692160411">+216 92 160 411</a></p>
        <p><i class="fas fa-envelope"></i><a href="mailto:ConnecSphere@gmail.com">ConnecSphere@gmail.com</a></p>
      </div>
      <div class="footer-column">
        <h4>Follow Us</h4>
        <div class="footer-social-icons">
          <a href="#" aria-label="Facebook"><i class="fab fa-facebook-square"></i></a>
          <a href="#" aria-label="Instagram"><i class="fab fa-instagram-square"></i></a>
          <a href="#" aria-label="LinkedIn"><i class="fab fa-linkedin"></i></a>
          <a href="#" aria-label="Twitter"><i class="fab fa-twitter-square"></i></a>
        </div>
      </div>
    </div>
    <div class="footer-bottom text-center py-3">
      © {{ "now"|date("Y") }} ConnectSphere. All rights reserved.
    </div>
  </footer>

  {# Bootstrap JS bundle #}
  <script
    src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"
    integrity="sha384-+++"
    crossorigin="anonymous"
  ></script>

  {# Page-specific JavaScript #}
  <script>
  document.addEventListener('DOMContentLoaded', function() {
    // File name display
    const fileInput = document.getElementById('{{ create_event_form.image.vars.id }}');
    const fileChosen = document.getElementById('file-chosen-display');
    if (fileInput && fileChosen) {
      fileInput.addEventListener('change', function(){
        if (this.files.length > 0) {
          let name = this.files[0].name;
          if (name.length > 30) {
            name = name.slice(0,15) + '…' + name.slice(-10);
          }
          fileChosen.textContent = name;
        } else {
          fileChosen.textContent = 'No file chosen';
        }
      });
    }

    // Button loading effect
    const form = document.querySelector('.add-event-form');
    const btnSave = document.getElementById('save-event-btn');
    if (form && btnSave) {
      form.addEventListener('submit', function() {
        btnSave.classList.add('loading');
        btnSave.textContent = 'Saving...';
      });
    }
  });
  </script>

</body>
</html>
</file>

<file path="templates/home/home.html.twig">
{# templates/home/home.html.twig #}
{# PAS de {% extends 'base.html.twig' %} ici #}

<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>Home - ConnectSphere</title>
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <link rel="icon"
        href="data:image/svg+xml,<svg xmlns=%22http://www.w3.org/2000/svg%22 viewBox=%220 0 128 128%22><text y=%221.2em%22 font-size=%2296%22>⚫️</text><text y=%221.3em%22 x=%220.2em%22 font-size=%2276%22 fill=%22%23fff%22>CS</text></svg>">

  <!-- Google Fonts (Poppins) --> 
  <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@400;500;600;700;800&display=swap"
        rel="stylesheet">
  <!-- Font Awesome -->
  <link rel="stylesheet"
        href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
  <!-- Main CSS -->
  <link rel="stylesheet" href="{{ asset('css/root.css') }}">
  <!-- Leaflet CSS -->
  <link rel="stylesheet"
        href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css"
        integrity="sha256-p4NxAoJBhIIN+hmNHrzRCf9tD/miZyoHS5obTRR9BMY="
        crossorigin=""/>

  <style>
    /* === Original inline CSS === */
    :root {
      --theme-primary-pink: #E83E8C; --theme-secondary-teal: #20C997;
      --theme-text-dark: #343A40; --theme-bg-light: #FFFFFF;
      --theme-bg-medium: #F8F9FA; --theme-border-color: #DEE2E6;
      --map-bg-color: #f0f5f9; --body-font: 'Poppins', sans-serif;
    }
    body {
      margin:0; font-family:var(--body-font); background:var(--theme-bg-light);
      color:var(--theme-text-dark); font-size:16px; line-height:1.6;
    }
    a { color:var(--theme-primary-pink); text-decoration:none; }
    a:hover { text-decoration:underline; }
    .container { max-width:1140px; margin:0 auto; padding:0 15px; }

    .header { background:#fff; box-shadow:0 1px 3px rgba(0,0,0,0.1); padding:.8rem 1rem; border-bottom:1px solid var(--theme-border-color); }
    .header .nav-container { display:flex; justify-content:space-between; align-items:center; }
    .header .logo-img { height:80px; }
    .header .nav-links { display:flex; gap:1.5rem; }
    .header .nav-link { font-weight:500; transition:color .2s; }
    .header .nav-link:hover { color:var(--theme-primary-pink); }
    .header .contact-btn { background:var(--theme-primary-pink); color:#fff; padding:.5rem 1.2rem; border-radius:20px; font-weight:500; }
    .header .contact-btn:hover { background:#d0367c; }

    /* === ENHANCED HERO SECTION STYLES === */
    .hero {
      padding: 4rem 1rem;
      text-align: center;
      background: linear-gradient(135deg, rgba(255,255,255,0.95) 0%, rgba(248,249,250,0.95) 100%);
      position: relative;
      overflow: hidden;
    }
    
    .hero::before {
      content: '';
      position: absolute;
      top: 0;
      left: 0;
      right: 0;
      bottom: 0;
      background: url('{{ asset('images/pattern-bg.png') }}') repeat;
      opacity: 0.05;
      z-index: 0;
    }
    
    .hero .container {
      position: relative;
      z-index: 1;
    }
    
    .hero h1 {
      color: var(--theme-primary-pink);
      font-weight: 800;
      margin-bottom: 0.5rem;
      font-size: 2.5rem;
      text-transform: uppercase;
      letter-spacing: 1px;
      text-shadow: 1px 1px 1px rgba(0,0,0,0.05);
      animation: fadeInDown 1s ease-out;
    }
    
    .hero h2 {
      font-size: 2rem;
      font-weight: 700;
      color: var(--theme-text-dark);
      max-width: 800px;
      margin: 0 auto 2rem;
      line-height: 1.3;
      animation: fadeInUp 1s ease-out;
    }
    
    @keyframes fadeInDown {
      from {
        opacity: 0;
        transform: translateY(-20px);
      }
      to {
        opacity: 1;
        transform: translateY(0);
      }
    }
    
    @keyframes fadeInUp {
      from {
        opacity: 0;
        transform: translateY(20px);
      }
      to {
        opacity: 1;
        transform: translateY(0);
      }
    }
    
    @keyframes fadeIn {
      from {
        opacity: 0;
      }
      to {
        opacity: 1;
      }
    }
    
    .featured-events {
      display: flex;
      justify-content: center;
      gap: 1.5rem;
      flex-wrap: wrap;
      margin-bottom: 2.5rem;
      animation: fadeIn 1.2s ease-out;
    }
    
    .featured-event-card {
      flex: 1 1 calc(33% - 1.5rem);
      max-width: calc(33% - 1.5rem);
      background: #fff;
      border-radius: 12px;
      overflow: hidden;
      box-shadow: 0 5px 15px rgba(0,0,0,0.08);
      text-decoration: none;
      color: inherit;
      transition: transform 0.3s, box-shadow 0.3s;
      position: relative;
    }
    
    .featured-event-card:hover {
      transform: translateY(-5px);
      box-shadow: 0 8px 25px rgba(0,0,0,0.15);
      text-decoration: none;
    }
    
    .featured-event-card img {
      width: 100%;
      height: 180px;
      object-fit: cover;
      transition: transform 0.5s;
    }
    
    .featured-event-card:hover img {
      transform: scale(1.05);
    }
    
    .featured-event-card .info {
      padding: 1.2rem;
      position: relative;
    }
    
    .featured-event-card .info h4 {
      margin: 0 0 0.5rem;
      font-size: 1.25rem;
      color: var(--theme-text-dark);
      font-weight: 600;
    }
    
    .featured-event-card .info p {
      margin: 0;
      font-size: 0.95rem;
      color: #555;
    }
    
    #current-date {
      color: #666;
      margin: 0 0 1.5rem;
      font-size: 1.1rem;
      font-weight: 500;
      display: inline-block;
      padding: 0.5rem 1rem;
      background: rgba(255,255,255,0.7);
      border-radius: 30px;
      box-shadow: 0 2px 5px rgba(0,0,0,0.05);
    }
    
    .cta-buttons {
      display: flex;
      justify-content: center;
      gap: 1rem;
      margin-bottom: 1rem;
    }
    
    .cta-btn {
      display: inline-block;
      background: var(--theme-secondary-teal);
      color: #fff;
      padding: 0.75rem 1.5rem;
      border-radius: 30px;
      font-weight: 600;
      text-decoration: none;
      transition: all 0.3s;
      border: none;
      cursor: pointer;
      box-shadow: 0 4px 10px rgba(32, 201, 151, 0.2);
      font-size: 1rem;
    }
    
    .cta-btn:hover {
      background: #1AAE88;
      transform: translateY(-2px);
      box-shadow: 0 6px 15px rgba(32, 201, 151, 0.3);
      text-decoration: none;
    }
    
    .cta-btn.surprise {
      background: var(--theme-primary-pink);
      box-shadow: 0 4px 10px rgba(232, 62, 140, 0.2);
    }
    
    .cta-btn.surprise:hover {
      background: #d0367c;
      box-shadow: 0 6px 15px rgba(232, 62, 140, 0.3);
    }
    
    @media (max-width: 992px) {
      .featured-event-card {
        flex: 1 1 calc(50% - 1.5rem);
        max-width: calc(50% - 1.5rem);
      }
    }
    
    @media (max-width: 768px) {
      .hero h1 {
        font-size: 2rem;
      }
      .hero h2 {
        font-size: 1.5rem;
      }
      .featured-event-card {
        flex: 1 1 100%;
        max-width: 100%;
      }
    }
    /* === END ENHANCED HERO SECTION STYLES === */

    .event-map-section { padding:2.5rem 1rem; background:var(--theme-bg-medium); border-bottom:1px solid var(--theme-border-color); }
    .event-map-section h2 { text-align:center; margin-bottom:2rem; font-weight:600; }
    #standalone-event-map {
      width:100%; max-width:1100px; height:550px; margin:0 auto;
      background:var(--map-bg-color); border:1px solid var(--theme-border-color);
      border-radius:8px; box-shadow:0 5px 15px rgba(0,0,0,0.08); position:relative;
    }
    .map-feedback-message {
      position:absolute; top:50%; left:50%; transform:translate(-50%,-50%);
      background:rgba(255,255,255,0.8); padding:8px 12px; border-radius:4px; color:#666;
    }

    .section { padding:3rem 1rem; }

    .site-footer { background:#343a40; color:rgba(255,255,255,.75); padding:3rem 1rem 1.5rem; margin-top:3rem; }
    .site-footer .footer-content { display:flex; flex-wrap:wrap; justify-content:space-between; gap:2rem; }
    .site-footer .footer-column { flex:1; min-width:200px; }
    .site-footer .footer-column h4 { color:#fff; margin-bottom:1rem; font-weight:600; border-bottom:2px solid #E83E8C; display:inline-block; padding-bottom:.5rem; }
    .site-footer .footer-column ul { list-style:none; padding:0; }
    .site-footer .footer-column ul li { margin-bottom:.6rem; }
    .site-footer .footer-column ul li a { color:rgba(255,255,255,.75); transition:color .2s; }
    .site-footer .footer-column ul li a:hover { color:#E83E8C; }
    .site-footer .footer-contact i { margin-right:.5rem; color:#E83E8C; }
    .site-footer .footer-social-icons a { color:rgba(255,255,255,.75); margin-right:1rem; font-size:1.5rem; transition:color .2s; }
    .site-footer .footer-social-icons a:hover { color:#E83E8C; }
    .site-footer .footer-bottom { text-align:center; margin-top:2rem; font-size:.85rem; color:rgba(255,255,255,.55); border-top:1px solid #495057; padding-top:1rem; }
  </style>
</head>
<body>

  <!-- HEADER -->
  <header class="header">
    <nav class="nav-container container">
      <div class="logo">
        <a href="{{ path('app_home') }}" style="display:flex;align-items:center;text-decoration:none;">
          <img src="{{ asset('images/logo.png') }}" alt="Logo" class="logo-img" style="margin-right:10px;">
          <span style="font-weight:bold;font-size:1.5rem;color:black;">ConnectSphere</span>
        </a>
      </div>
      <div class="nav-links">
        <a href="{{ path('app_home') }}" class="nav-link">Home</a>
        <a href="{{ path('app_events') }}" class="nav-link">Events</a>
        <a href="{{ path('app_chatbot') }}" class="nav-link">Chatbot</a>
        <a href="#" class="nav-link">Speakers</a>
        <a href="#" class="nav-link">Tickets</a>
        <a href="#" class="nav-link">Blogs</a>
        <a href="#" class="contact-btn nav-link">Contact</a>
      </div>
    </nav>
  </header>

  <!-- ENHANCED HERO -->
  <section class="hero">
    <div class="container">
      <h1>Welcome!</h1>
      <h2>The Ultimate Platform for Planning and Promoting Successful Events</h2>
      
      <!-- FEATURED EVENTS (3 in one line) -->
      <div class="featured-events">
        <a href="{{ path('app_events') }}" class="featured-event-card">
          <img src="{{ asset('images/ev6.jpg') }}" alt="Food Festival">
          <div class="info">
            <h4>Food Festival</h4>
            <p>Street food & cook‑offs</p>
          </div>
        </a>
        <a href="{{ path('app_events') }}" class="featured-event-card">
          <img src="{{ asset('images/ev5.jpg') }}" alt="Yoga Retreat">
          <div class="info">
            <h4>Yoga Retreat</h4>
            <p>Sunrise beach yoga</p>
          </div>
        </a>
        <a href="{{ path('app_events') }}" class="featured-event-card">
          <img src="{{ asset('images/ev4.jpg') }}" alt="Dev Tech Meetup">
          <div class="info">
            <h4>Dev Tech Meetup</h4>
            <p>JS frameworks deep‑dive</p>
          </div>
        </a>
      </div>
      <p id="current-date"></p>
      <div class="cta-buttons">
        <a href="{{ path('app_events') }}" class="cta-btn">Explore Events</a>
        <button id="surprise-btn" class="cta-btn surprise">Surprise Me</button>
      </div>
    </div>
  </section>

  <!-- MAP SECTION -->
  <section class="event-map-section">
    <div class="container">
      <h2>Event Locations Overview</h2>
      <div id="standalone-event-map">
        <p class="map-feedback-message">Loading map...</p>
      </div>
    </div>
  </section>

  <!-- WHO WE ARE -->
  <section class="section">
    <div class="container">
      <h1 style="color:#E83E8C;font-weight:800;">WHO WE ARE</h1>
      <h2>ConnectSphere helps you create unforgettable experiences with our comprehensive event management tools.</h2>
      <div class="cards-grid"></div>
    </div>
  </section>

  <!-- ORIGINAL FOOTER -->
  <footer class="site-footer">
    <div class="footer-content container">
      <div class="footer-column">
        <h4>ConnectSphere</h4>
        <p>The ultimate platform for planning, promoting, and attending successful events. Join our community!</p>
      </div>
      <div class="footer-column">
        <h4>Quick Links</h4>
        <ul>
          <li><a href="{{ path('app_home') }}">Home</a></li>
          <li><a href="{{ path('app_events') }}">Events</a></li>
          <li><a href="#">About Us</a></li>
          <li><a href="#">Blog</a></li>
          <li><a href="#">Contact</a></li>
          <li><a href="#">Terms of Service</a></li>
        </ul>
      </div>
      <div class="footer-column footer-contact">
        <h4>Contact Us</h4>
        <p><i class="fas fa-phone"></i><a href="tel:+21692160411">+216 92 160 411</a></p>
        <p><i class="fas fa-envelope"></i><a href="mailto:ConnecSphere@gmail.com">ConnecSphere@gmail.com</a></p>
      </div>
      <div class="footer-column">
        <h4>Follow Us</h4>
        <div class="footer-social-icons">
          <a href="#" aria-label="Facebook"><i class="fab fa-facebook-square"></i></a>
          <a href="#" aria-label="Instagram"><i class="fab fa-instagram-square"></i></a>
          <a href="#" aria-label="LinkedIn"><i class="fab fa-linkedin"></i></a>
          <a href="#" aria-label="Twitter"><i class="fab fa-twitter-square"></i></a>
        </div>
      </div>
    </div>
    <div class="footer-bottom">© {{ "now"|date("Y") }} ConnectSphere. All rights reserved.</div>
  </footer>

  <!-- Leaflet JS -->
  <script src="https://unpkg.com/leaflet@1.9.4/dist/leaflet.js"
          integrity="sha256-20nQCchB9co0qIjJZRGuk2/Z9VM+kNiyxNV1lvTlZBo="
          crossorigin=""></script>
  <script>
    document.addEventListener('DOMContentLoaded', function() {
      // Display current date
      const dateEl = document.getElementById('current-date');
      if (dateEl) {
        const today = new Date();
        dateEl.textContent = today.toLocaleDateString('en-US', { year:'numeric', month:'long', day:'numeric' });
      }

      // Initialize map
      const map = L.map('standalone-event-map').setView([34.5, 9.5], 7);
      L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
        maxZoom: 18,
        attribution: '© <a href="https://osm.org/copyright">OSM</a>'
      }).addTo(map);

      // Remove loading message
      document.querySelector('.map-feedback-message')?.remove();

      // Dummy events array (16 markers)
      const events = [
        { id:1,  name:'Patisserie Flora',      description:'Traditional sweets workshop', imageUrl:'{{ asset("images/event1.jpeg") }}', lat:35.8256, lng:10.6345, phone:'29.862.414', address:'Monastir' },
        { id:2,  name:'Café Montplaisir',      description:'Live acoustic night',          imageUrl:'{{ asset("images/event3.jpeg") }}', lat:36.8065, lng:10.1815, phone:'71.123.456', address:'Tunis'    },
        { id:3,  name:'Dev Tech Meetup',       description:'JS frameworks deep‑dive',      imageUrl:'{{ asset("images/event2.png") }}',  lat:34.7406, lng:10.7603, phone:'74.321.987', address:'Sfax'     },
        { id:4,  name:'Art Workshop',          description:'Painting & sculpture demo',     imageUrl:'{{ asset("images/gaming.png") }}',  lat:36.8061, lng:10.1795, phone:'71.555.123', address:'Tunis'    },
        { id:5,  name:'Food Festival',         description:'Street food & cook‑offs',      imageUrl:'{{ asset("images/ev1.jpg") }}',    lat:35.8850, lng:10.6059, phone:'73.777.888', address:'Sousse'   },
        { id:6,  name:'Yoga Retreat',          description:'Sunrise beach yoga',           imageUrl:'{{ asset("images/ev2.jpg") }}',    lat:36.8610, lng:10.3176, phone:'71.234.567', address:'La Marsa' },
        { id:7,  name:'Startup Pitch Night',   description:'Pitch ideas to investors',     imageUrl:'{{ asset("images/ev3.jpg") }}',    lat:36.8067, lng:10.1718, phone:'71.345.678', address:'Tunis'    },
        { id:8,  name:'Marathon Challenge',    description:'10K charity run',               imageUrl:'{{ asset("images/ev4.jpg") }}',    lat:34.7395, lng:10.7601, phone:'74.456.789', address:'Sfax'     },
        { id:9,  name:'Carthage Music Nights', description:'Open‑air amphitheatre concert', imageUrl:'{{ asset("images/ev5.jpg") }}',    lat:36.8520, lng:10.3300, phone:'71.678.910', address:'Carthage'},
        { id:10, name:'Kairouan Crafts Fair',  description:'Traditional crafts exhibition', imageUrl:'{{ asset("images/ev6.jpg") }}',    lat:35.6781, lng:10.0963, phone:'77.123.456', address:'Kairouan'},
        { id:11, name:'Tozeur Oasis Festival', description:'Desert oasis cultural fest',    imageUrl:'{{ asset("images/ev7.png") }}',    lat:33.9197, lng:8.1220,  phone:'76.234.567', address:'Tozeur'  },
        { id:12, name:'Bizerte Sailing Cup',   description:'Regatta & boat show',           imageUrl:'{{ asset("images/ev8.png") }}',    lat:37.2746, lng:9.8739,  phone:'72.345.678', address:'Bizerte' },
        { id:13, name:'Gabès Date Festival',   description:'Celebrating the date harvest',  imageUrl:'{{ asset("images/event.jpg") }}',   lat:33.8818, lng:10.0982, phone:'75.123.456', address:'Gabès'   },
        { id:14, name:'El Kef Heritage Tour',  description:'Historic walking tour',         imageUrl:'{{ asset("images/ev10.jpg") }}',   lat:36.1770, lng:8.7120,  phone:'78.234.567', address:'El Kef'  },
        { id:15, name:'Mahdia Sea Fest',       description:'Beachside seafood celebration', imageUrl:'{{ asset("images/ev11.jpg") }}',   lat:35.5047, lng:11.0622, phone:'73.345.678', address:'Mahdia'  },
        { id:16, name:'Djerba Cultural Week',  description:'Island music, dance & crafts',  imageUrl:'{{ asset("images/ev12.jpg") }}',   lat:33.8074, lng:10.8456, phone:'75.456.789', address:'Djerba'  }
      ];

      const markers = [];
      events.forEach(evt => {
        const m = L.marker([evt.lat, evt.lng]).addTo(map);
        m.bindPopup(`
          <div style="width:260px;border-radius:8px;overflow:hidden;font-family:var(--body-font);">
            <img src="${evt.imageUrl}" alt="${evt.name}" style="width:100%;height:150px;object-fit:cover;">
            <div style="padding:10px;background:#fff;">
              <h3 style="margin:0;font-size:1.1rem;color:var(--theme-text-dark);">
                <i class="fas fa-map-marker-alt" style="color:var(--theme-primary-pink);margin-right:5px;"></i>${evt.name}
              </h3>
              <p style="margin:5px 0;font-size:0.9rem;color:#555;"><i class="fas fa-info-circle" style="margin-right:6px;"></i>${evt.description}</p>
              <p style="margin:5px 0;font-size:0.9rem;color:#555;"><i class="fas fa-map-marker-alt" style="margin-right:6px;"></i>${evt.address}</p>
              <p style="margin:5px 0;font-size:0.9rem;color:#555;"><i class="fas fa-phone" style="margin-right:6px;"></i>${evt.phone}</p>
            </div>
          </div>`, { maxWidth:270 });
        markers.push(m);
      });

      // Surprise Me
      document.getElementById('surprise-btn').addEventListener('click', () => {
        const i = Math.floor(Math.random()*markers.length);
        const e = events[i];
        map.setView([e.lat,e.lng],12,{animate:true});
        markers[i].openPopup();
      });
    });
  </script>
</body>
</html>
</file>

<file path=".gitignore">
###> symfony/framework-bundle ###
/.env.local
/.env.local.php
/.env.*.local
/config/secrets/prod/prod.decrypt.private.php
/public/bundles/
/var/
/vendor/
/.env
###< symfony/framework-bundle ###

###> phpunit/phpunit ###
/phpunit.xml
.phpunit.result.cache
###< phpunit/phpunit ###

###> symfony/phpunit-bridge ###
.phpunit.result.cache
/phpunit.xml
###< symfony/phpunit-bridge ###
</file>

<file path="bin/console">
#!/usr/bin/env php
<?php

use App\Kernel;
use Symfony\Bundle\FrameworkBundle\Console\Application;

if (!is_dir(dirname(__DIR__).'/vendor')) {
    throw new LogicException('Dependencies are missing. Try running "composer install".');
}

if (!is_file(dirname(__DIR__).'/vendor/autoload_runtime.php')) {
    throw new LogicException('Symfony Runtime is missing. Try running "composer require symfony/runtime".');
}

require_once dirname(__DIR__).'/vendor/autoload_runtime.php';

return function (array $context) {
    $kernel = new Kernel($context['APP_ENV'], (bool) $context['APP_DEBUG']);

    return new Application($kernel);
};
</file>

<file path="bin/phpunit">
#!/usr/bin/env php
<?php

if (!ini_get('date.timezone')) {
    ini_set('date.timezone', 'UTC');
}

if (is_file(dirname(__DIR__).'/vendor/phpunit/phpunit/phpunit')) {
    if (PHP_VERSION_ID >= 80000) {
        require dirname(__DIR__).'/vendor/phpunit/phpunit/phpunit';
    } else {
        define('PHPUNIT_COMPOSER_INSTALL', dirname(__DIR__).'/vendor/autoload.php');
        require PHPUNIT_COMPOSER_INSTALL;
        PHPUnit\TextUI\Command::main();
    }
} else {
    if (!is_file(dirname(__DIR__).'/vendor/symfony/phpunit-bridge/bin/simple-phpunit.php')) {
        echo "Unable to find the `simple-phpunit.php` script in `vendor/symfony/phpunit-bridge/bin/`.\n";
        exit(1);
    }

    require dirname(__DIR__).'/vendor/symfony/phpunit-bridge/bin/simple-phpunit.php';
}
</file>

<file path="compose.override.yaml">
services:
###> doctrine/doctrine-bundle ###
  database:
    ports:
      - "5432"
###< doctrine/doctrine-bundle ###

###> symfony/mailer ###
  mailer:
    image: axllent/mailpit
    ports:
      - "1025"
      - "8025"
    environment:
      MP_SMTP_AUTH_ACCEPT_ANY: 1
      MP_SMTP_AUTH_ALLOW_INSECURE: 1
###< symfony/mailer ###
</file>

<file path="compose.yaml">
services:
###> doctrine/doctrine-bundle ###
  database:
    image: postgres:${POSTGRES_VERSION:-16}-alpine
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-app}
      # You should definitely change the password in production
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-!ChangeMe!}
      POSTGRES_USER: ${POSTGRES_USER:-app}
    volumes:
      - database_data:/var/lib/postgresql/data:rw
      # You may use a bind-mounted host directory instead, so that it is harder to accidentally remove the volume and lose all your data!
      # - ./docker/db/data:/var/lib/postgresql/data:rw
###< doctrine/doctrine-bundle ###

volumes:
###> doctrine/doctrine-bundle ###
  database_data:
###< doctrine/doctrine-bundle ###
</file>

<file path="composer.json">
{
    "name": "symfony/website-skeleton",
    "type": "project",
    "license": "MIT",
    "description": "A skeleton to start a new Symfony website",
    "minimum-stability": "stable",
    "prefer-stable": true,
    "require": {
        "php": ">=8.1",
        "ext-ctype": "*",
        "ext-iconv": "*",
        "doctrine/annotations": "^2.0",
        "doctrine/dbal": "^3",
        "doctrine/doctrine-bundle": "^2.13",
        "doctrine/doctrine-migrations-bundle": "^3.4",
        "doctrine/orm": "^3.3",
        "league/commonmark": "^2.6",
        "phpdocumentor/reflection-docblock": "^5.6",
        "phpstan/phpdoc-parser": "1.22",
        "symfony/asset": "6.1.*",
        "symfony/console": "6.1.*",
        "symfony/doctrine-messenger": "6.1.*",
        "symfony/dotenv": "6.1.*",
        "symfony/expression-language": "6.1.*",
        "symfony/flex": "^2",
        "symfony/form": "6.1.*",
        "symfony/framework-bundle": "6.1.*",
        "symfony/http-client": "6.1.*",
        "symfony/intl": "6.1.*",
        "symfony/mailer": "6.1.*",
        "symfony/mime": "6.1.*",
        "symfony/monolog-bundle": "^3.0",
        "symfony/notifier": "6.1.*",
        "symfony/process": "6.1.*",
        "symfony/property-access": "6.1.*",
        "symfony/property-info": "6.1.*",
        "symfony/runtime": "6.1.*",
        "symfony/security-bundle": "6.1.*",
        "symfony/serializer": "6.1.*",
        "symfony/string": "6.1.*",
        "symfony/translation": "6.1.*",
        "symfony/twig-bundle": "6.1.*",
        "symfony/validator": "6.1.*",
        "symfony/web-link": "6.1.*",
        "symfony/yaml": "6.1.*",
        "twig/extra-bundle": "^2.12|^3.0",
        "twig/twig": "^2.12|^3.0"
    },
    "require-dev": {
        "phpunit/phpunit": "^9.5",
        "symfony/browser-kit": "6.1.*",
        "symfony/css-selector": "6.1.*",
        "symfony/debug-bundle": "6.1.*",
        "symfony/maker-bundle": "^1.50",
        "symfony/phpunit-bridge": "^7.2",
        "symfony/stopwatch": "6.1.*",
        "symfony/web-profiler-bundle": "6.1.*"
    },
    "config": {
        "allow-plugins": {
            "composer/package-versions-deprecated": true,
            "symfony/flex": true,
            "symfony/runtime": true
        },
        "optimize-autoloader": true,
        "preferred-install": {
            "*": "dist"
        },
        "sort-packages": true
    },
    "autoload": {
        "psr-4": {
            "App\\": "src/"
        }
    },
    "autoload-dev": {
        "psr-4": {
            "App\\Tests\\": "tests/"
        }
    },
    "replace": {
        "symfony/polyfill-ctype": "*",
        "symfony/polyfill-iconv": "*",
        "symfony/polyfill-php72": "*",
        "symfony/polyfill-php73": "*",
        "symfony/polyfill-php74": "*",
        "symfony/polyfill-php80": "*",
        "symfony/polyfill-php81": "*"
    },
    "scripts": {
        "auto-scripts": {
            "cache:clear": "symfony-cmd",
            "assets:install %PUBLIC_DIR%": "symfony-cmd"
        },
        "post-install-cmd": [
            "@auto-scripts"
        ],
        "post-update-cmd": [
            "@auto-scripts"
        ]
    },
    "conflict": {
        "symfony/symfony": "*"
    },
    "extra": {
        "symfony": {
            "allow-contrib": false,
            "require": "6.1.*"
        }
    }
}
</file>

<file path="config/bundles.php">
<?php

return [
    Symfony\Bundle\FrameworkBundle\FrameworkBundle::class => ['all' => true],
    Doctrine\Bundle\DoctrineBundle\DoctrineBundle::class => ['all' => true],
    Doctrine\Bundle\MigrationsBundle\DoctrineMigrationsBundle::class => ['all' => true],
    Symfony\Bundle\DebugBundle\DebugBundle::class => ['dev' => true],
    Symfony\Bundle\TwigBundle\TwigBundle::class => ['all' => true],
    Symfony\Bundle\WebProfilerBundle\WebProfilerBundle::class => ['dev' => true, 'test' => true],
    Twig\Extra\TwigExtraBundle\TwigExtraBundle::class => ['all' => true],
    Symfony\Bundle\SecurityBundle\SecurityBundle::class => ['all' => true],
    Symfony\Bundle\MonologBundle\MonologBundle::class => ['all' => true],
    Symfony\Bundle\MakerBundle\MakerBundle::class => ['dev' => true],
];
</file>

<file path="config/packages/cache.yaml">
framework:
    cache:
        # Unique name of your app: used to compute stable namespaces for cache keys.
        #prefix_seed: your_vendor_name/app_name

        # The "app" cache stores to the filesystem by default.
        # The data in this cache should persist between deploys.
        # Other options include:

        # Redis
        #app: cache.adapter.redis
        #default_redis_provider: redis://localhost

        # APCu (not recommended with heavy random-write workloads as memory fragmentation can cause perf issues)
        #app: cache.adapter.apcu

        # Namespaced pools use the above "app" backend by default
        #pools:
            #my.dedicated.cache: null
</file>

<file path="config/packages/debug.yaml">
when@dev:
    debug:
        # Forwards VarDumper Data clones to a centralized server allowing to inspect dumps on CLI or in your browser.
        # See the "server:dump" command to start a new server.
        dump_destination: "tcp://%env(VAR_DUMPER_SERVER)%"
</file>

<file path="config/packages/doctrine_migrations.yaml">
doctrine_migrations:
    migrations_paths:
        # namespace is arbitrary but should be different from App\Migrations
        # as migrations classes should NOT be autoloaded
        'DoctrineMigrations': '%kernel.project_dir%/migrations'
    enable_profiler: false
</file>

<file path="config/packages/doctrine.yaml">
doctrine:
    dbal:
        url: '%env(resolve:DATABASE_URL)%'

        # IMPORTANT: You MUST configure your server version,
        # either here or in the DATABASE_URL env var (see .env file)
        #server_version: '16'
        use_savepoints: true
    orm:
        auto_generate_proxy_classes: true
        naming_strategy: doctrine.orm.naming_strategy.underscore_number_aware
        auto_mapping: true
        mappings:
            App:
                is_bundle: false
                dir: '%kernel.project_dir%/src/Entity'
                prefix: 'App\Entity'
                alias: App

when@test:
    doctrine:
        dbal:
            # "TEST_TOKEN" is typically set by ParaTest
            dbname_suffix: '_test%env(default::TEST_TOKEN)%'

when@prod:
    doctrine:
        orm:
            auto_generate_proxy_classes: false
            proxy_dir: '%kernel.build_dir%/doctrine/orm/Proxies'
            query_cache_driver:
                type: pool
                pool: doctrine.system_cache_pool
            result_cache_driver:
                type: pool
                pool: doctrine.result_cache_pool

    framework:
        cache:
            pools:
                doctrine.result_cache_pool:
                    adapter: cache.app
                doctrine.system_cache_pool:
                    adapter: cache.system
</file>

<file path="config/packages/framework.yaml">
# see https://symfony.com/doc/current/reference/configuration/framework.html
framework:
    secret: '%env(APP_SECRET)%'
    #csrf_protection: true
    http_method_override: false

    # Enables session support. Note that the session will ONLY be started if you read or write from it.
    # Remove or comment this section to explicitly disable session support.
    session:
        handler_id: null
        cookie_secure: auto
        cookie_samesite: lax
        storage_factory_id: session.storage.factory.native

    #esi: true
    #fragments: true
    php_errors:
        log: true

when@test:
    framework:
        test: true
        session:
            storage_factory_id: session.storage.factory.mock_file
</file>

<file path="config/packages/mailer.yaml">
framework:
    mailer:
        dsn: '%env(MAILER_DSN)%'
</file>

<file path="config/packages/messenger.yaml">
framework:
    messenger:
        failure_transport: failed

        transports:
            # https://symfony.com/doc/current/messenger.html#transport-configuration
            async:
                dsn: '%env(MESSENGER_TRANSPORT_DSN)%'
                options:
                    use_notify: true
                    check_delayed_interval: 60000
                retry_strategy:
                    max_retries: 3
                    multiplier: 2
            failed: 'doctrine://default?queue_name=failed'
            # sync: 'sync://'

        default_bus: messenger.bus.default

        buses:
            messenger.bus.default: []

        routing:
            Symfony\Component\Mailer\Messenger\SendEmailMessage: async
            Symfony\Component\Notifier\Message\ChatMessage: async
            Symfony\Component\Notifier\Message\SmsMessage: async

            # Route your messages to the transports
            # 'App\Message\YourMessage': async
</file>

<file path="config/packages/monolog.yaml">
monolog:
    channels:
        - deprecation # Deprecations are logged in the dedicated "deprecation" channel when it exists

when@dev:
    monolog:
        handlers:
            main:
                type: stream
                path: "%kernel.logs_dir%/%kernel.environment%.log"
                level: debug
                channels: ["!event"]
            # uncomment to get logging in your browser
            # you may have to allow bigger header sizes in your Web server configuration
            #firephp:
            #    type: firephp
            #    level: info
            #chromephp:
            #    type: chromephp
            #    level: info
            console:
                type: console
                process_psr_3_messages: false
                channels: ["!event", "!doctrine", "!console"]

when@test:
    monolog:
        handlers:
            main:
                type: fingers_crossed
                action_level: error
                handler: nested
                excluded_http_codes: [404, 405]
                channels: ["!event"]
            nested:
                type: stream
                path: "%kernel.logs_dir%/%kernel.environment%.log"
                level: debug

when@prod:
    monolog:
        handlers:
            main:
                type: fingers_crossed
                action_level: error
                handler: nested
                excluded_http_codes: [404, 405]
                buffer_size: 50 # How many messages should be saved? Prevent memory leaks
            nested:
                type: stream
                path: php://stderr
                level: debug
                formatter: monolog.formatter.json
            console:
                type: console
                process_psr_3_messages: false
                channels: ["!event", "!doctrine"]
            deprecation:
                type: stream
                channels: [deprecation]
                path: php://stderr
                formatter: monolog.formatter.json
</file>

<file path="config/packages/notifier.yaml">
framework:
    notifier:
        chatter_transports:
        texter_transports:
        channel_policy:
            # use chat/slack, chat/telegram, sms/twilio or sms/nexmo
            urgent: ['email']
            high: ['email']
            medium: ['email']
            low: ['email']
        admin_recipients:
            - { email: admin@example.com }
</file>

<file path="config/packages/routing.yaml">
framework:
    router:
        utf8: true

        # Configure how to generate URLs in non-HTTP contexts, such as CLI commands.
        # See https://symfony.com/doc/current/routing.html#generating-urls-in-commands
        #default_uri: http://localhost

when@prod:
    framework:
        router:
            strict_requirements: null
</file>

<file path="config/packages/translation.yaml">
framework:
    default_locale: en
    translator:
        default_path: '%kernel.project_dir%/translations'
        fallbacks:
            - en
        providers:
</file>

<file path="config/packages/twig.yaml">
twig:
    default_path: '%kernel.project_dir%/templates'

when@test:
    twig:
        strict_variables: true
</file>

<file path="config/packages/validator.yaml">
framework:
    validation:
        email_validation_mode: html5

        # Enables validator auto-mapping support.
        # For instance, basic validation constraints will be inferred from Doctrine's metadata.
        #auto_mapping:
        #    App\Entity\: []

when@test:
    framework:
        validation:
            not_compromised_password: false
</file>

<file path="config/packages/web_profiler.yaml">
when@dev:
    web_profiler:
        toolbar: true

    framework:
        profiler:
            collect_serializer_data: true

when@test:
    framework:
        profiler: { collect: false }
</file>

<file path="config/preload.php">
<?php

if (file_exists(dirname(__DIR__).'/var/cache/prod/App_KernelProdContainer.preload.php')) {
    require dirname(__DIR__).'/var/cache/prod/App_KernelProdContainer.preload.php';
}
</file>

<file path="config/routes.yaml">
controllers:
    resource: ../src/Controller/
    type: attribute
</file>

<file path="config/routes/framework.yaml">
when@dev:
    _errors:
        resource: '@FrameworkBundle/Resources/config/routing/errors.xml'
        prefix: /_error
</file>

<file path="config/routes/web_profiler.yaml">
when@dev:
    web_profiler_wdt:
        resource: '@WebProfilerBundle/Resources/config/routing/wdt.xml'
        prefix: /_wdt

    web_profiler_profiler:
        resource: '@WebProfilerBundle/Resources/config/routing/profiler.xml'
        prefix: /_profiler
</file>

<file path="LICENSE">
Copyright (c) Fabien Potencier

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is furnished
to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.
</file>

<file path="migrations/Version20250416151753.php">
<?php

declare(strict_types=1);

namespace DoctrineMigrations;

use Doctrine\DBAL\Schema\Schema;
use Doctrine\Migrations\AbstractMigration;

/**
 * Auto-generated Migration: Please modify to your needs!
 */
final class Version20250416151753 extends AbstractMigration
{
    public function getDescription(): string
    {
        return '';
    }

    public function up(Schema $schema): void
    {
        // this up() migration is auto-generated, please modify it to your needs
        $this->addSql(<<<'SQL'
            ALTER TABLE events CHANGE points points INT NOT NULL
        SQL);
        $this->addSql(<<<'SQL'
            ALTER TABLE jobs CHANGE user_id_id user_id_id INT DEFAULT NULL
        SQL);
    }

    public function down(Schema $schema): void
    {
        // this down() migration is auto-generated, please modify it to your needs
        $this->addSql(<<<'SQL'
            ALTER TABLE events CHANGE points points INT DEFAULT 0 NOT NULL
        SQL);
        $this->addSql(<<<'SQL'
            ALTER TABLE jobs CHANGE user_id_id user_id_id INT NOT NULL
        SQL);
    }
}
</file>

<file path="migrations/Version20250416213512.php">
<?php

declare(strict_types=1);

namespace DoctrineMigrations;

use Doctrine\DBAL\Schema\Schema;
use Doctrine\Migrations\AbstractMigration;

/**
 * Auto-generated Migration: Please modify to your needs!
 */
final class Version20250416213512 extends AbstractMigration
{
    public function getDescription(): string
    {
        return '';
    }

    public function up(Schema $schema): void
    {
        // this up() migration is auto-generated, please modify it to your needs
        $this->addSql(<<<'SQL'
            ALTER TABLE jobs CHANGE created_at created_at DATETIME DEFAULT NULL
        SQL);
    }

    public function down(Schema $schema): void
    {
        // this down() migration is auto-generated, please modify it to your needs
        $this->addSql(<<<'SQL'
            ALTER TABLE jobs CHANGE created_at created_at VARCHAR(255) DEFAULT NULL
        SQL);
    }
}
</file>

<file path="migrations/Version20250419191515.php">
<?php

declare(strict_types=1);

namespace DoctrineMigrations;

use Doctrine\DBAL\Schema\Schema;
use Doctrine\Migrations\AbstractMigration;

/**
 * Auto-generated Migration: Please modify to your needs!
 */
final class Version20250419191515 extends AbstractMigration
{
    public function getDescription(): string
    {
        return '';
    }

    public function up(Schema $schema): void
    {
        // this up() migration is auto-generated, please modify it to your needs
        $this->addSql(<<<'SQL'
            CREATE TABLE applications (id INT AUTO_INCREMENT NOT NULL, user_id_id INT NOT NULL, enevt_id_id INT NOT NULL, job_id_id INT NOT NULL, status VARCHAR(255) NOT NULL, applied_at VARCHAR(255) DEFAULT NULL, rewarded INT DEFAULT NULL, cover_letter VARCHAR(255) NOT NULL, resume_path VARCHAR(255) NOT NULL, cover_rating INT DEFAULT NULL, INDEX IDX_F7C966F09D86650F (user_id_id), INDEX IDX_F7C966F0A578C4F9 (enevt_id_id), INDEX IDX_F7C966F07E182327 (job_id_id), PRIMARY KEY(id)) DEFAULT CHARACTER SET utf8mb4 COLLATE `utf8mb4_unicode_ci` ENGINE = InnoDB
        SQL);
        $this->addSql(<<<'SQL'
            CREATE TABLE category (id INT AUTO_INCREMENT NOT NULL, name VARCHAR(255) NOT NULL, PRIMARY KEY(id)) DEFAULT CHARACTER SET utf8mb4 COLLATE `utf8mb4_unicode_ci` ENGINE = InnoDB
        SQL);
        $this->addSql(<<<'SQL'
            CREATE TABLE comments (id INT AUTO_INCREMENT NOT NULL, post_id_id INT NOT NULL, user_id_id INT NOT NULL, content VARCHAR(255) NOT NULL, time_stamp VARCHAR(255) NOT NULL, is_deleted INT DEFAULT NULL, INDEX IDX_5F9E962AE85F12B8 (post_id_id), INDEX IDX_5F9E962A9D86650F (user_id_id), PRIMARY KEY(id)) DEFAULT CHARACTER SET utf8mb4 COLLATE `utf8mb4_unicode_ci` ENGINE = InnoDB
        SQL);
        $this->addSql(<<<'SQL'
            CREATE TABLE conversion (id INT AUTO_INCREMENT NOT NULL, user_id_id INT NOT NULL, points_convertis INT NOT NULL, montant NUMERIC(10, 2) NOT NULL, devise VARCHAR(255) NOT NULL, date DATETIME NOT NULL, INDEX IDX_BD9127449D86650F (user_id_id), PRIMARY KEY(id)) DEFAULT CHARACTER SET utf8mb4 COLLATE `utf8mb4_unicode_ci` ENGINE = InnoDB
        SQL);
        $this->addSql(<<<'SQL'
            CREATE TABLE events (id INT AUTO_INCREMENT NOT NULL, organizer_id_id INT NOT NULL, category_id_id INT NOT NULL, name VARCHAR(255) NOT NULL, description VARCHAR(255) NOT NULL, start_time VARCHAR(255) NOT NULL, end_time VARCHAR(255) NOT NULL, location VARCHAR(255) NOT NULL, image LONGTEXT NOT NULL, points INT NOT NULL, INDEX IDX_5387574AE78C696A (organizer_id_id), INDEX IDX_5387574A9777D11E (category_id_id), PRIMARY KEY(id)) DEFAULT CHARACTER SET utf8mb4 COLLATE `utf8mb4_unicode_ci` ENGINE = InnoDB
        SQL);
        $this->addSql(<<<'SQL'
            CREATE TABLE feed_posts (id INT AUTO_INCREMENT NOT NULL, user_id_id INT NOT NULL, event_id_id INT NOT NULL, content VARCHAR(255) NOT NULL, time_stamp VARCHAR(255) NOT NULL, is_deleted INT DEFAULT NULL, created_at VARCHAR(255) NOT NULL, updated_at VARCHAR(255) NOT NULL, score_popularite INT DEFAULT NULL, image_path VARCHAR(255) NOT NULL, group_id INT DEFAULT NULL, INDEX IDX_7DD2E9469D86650F (user_id_id), INDEX IDX_7DD2E9463E5F2F7B (event_id_id), PRIMARY KEY(id)) DEFAULT CHARACTER SET utf8mb4 COLLATE `utf8mb4_unicode_ci` ENGINE = InnoDB
        SQL);
        $this->addSql(<<<'SQL'
            CREATE TABLE group_feed_posts (id INT AUTO_INCREMENT NOT NULL, group_id_id INT NOT NULL, user_id_id INT NOT NULL, content VARCHAR(255) NOT NULL, timestamp VARCHAR(255) NOT NULL, media_url VARCHAR(255) NOT NULL, is_deleted INT DEFAULT NULL, INDEX IDX_AA1F88F42F68B530 (group_id_id), INDEX IDX_AA1F88F49D86650F (user_id_id), PRIMARY KEY(id)) DEFAULT CHARACTER SET utf8mb4 COLLATE `utf8mb4_unicode_ci` ENGINE = InnoDB
        SQL);
        $this->addSql(<<<'SQL'
            CREATE TABLE group_members (id INT AUTO_INCREMENT NOT NULL, group_it_id INT NOT NULL, user_id_id INT NOT NULL, role VARCHAR(255) NOT NULL, INDEX IDX_C3A086F37F71E2AF (group_it_id), INDEX IDX_C3A086F39D86650F (user_id_id), PRIMARY KEY(id)) DEFAULT CHARACTER SET utf8mb4 COLLATE `utf8mb4_unicode_ci` ENGINE = InnoDB
        SQL);
        $this->addSql(<<<'SQL'
            CREATE TABLE historique_points (id INT AUTO_INCREMENT NOT NULL, user_id_id INT NOT NULL, type VARCHAR(255) NOT NULL, points INT NOT NULL, raison VARCHAR(255) NOT NULL, date DATETIME NOT NULL, INDEX IDX_EEF82E759D86650F (user_id_id), PRIMARY KEY(id)) DEFAULT CHARACTER SET utf8mb4 COLLATE `utf8mb4_unicode_ci` ENGINE = InnoDB
        SQL);
        $this->addSql(<<<'SQL'
            CREATE TABLE jobs (id INT AUTO_INCREMENT NOT NULL, user_id_id INT DEFAULT NULL, event_id_id INT DEFAULT NULL, job_title VARCHAR(255) NOT NULL, event_title VARCHAR(255) DEFAULT NULL, job_location VARCHAR(255) NOT NULL, employment_type VARCHAR(255) NOT NULL, application_dead_line VARCHAR(255) DEFAULT NULL, min_salary INT NOT NULL, max_salary INT NOT NULL, currency VARCHAR(255) NOT NULL, job_descreption VARCHAR(255) NOT NULL, recruiter_name VARCHAR(255) NOT NULL, recruiter_email VARCHAR(255) NOT NULL, created_at VARCHAR(255) DEFAULT NULL, INDEX IDX_A8936DC59D86650F (user_id_id), INDEX IDX_A8936DC53E5F2F7B (event_id_id), PRIMARY KEY(id)) DEFAULT CHARACTER SET utf8mb4 COLLATE `utf8mb4_unicode_ci` ENGINE = InnoDB
        SQL);
        $this->addSql(<<<'SQL'
            CREATE TABLE likes (id INT AUTO_INCREMENT NOT NULL, post_id_id INT NOT NULL, user_id_id INT NOT NULL, time_stamp VARCHAR(255) NOT NULL, INDEX IDX_49CA4E7DE85F12B8 (post_id_id), INDEX IDX_49CA4E7D9D86650F (user_id_id), PRIMARY KEY(id)) DEFAULT CHARACTER SET utf8mb4 COLLATE `utf8mb4_unicode_ci` ENGINE = InnoDB
        SQL);
        $this->addSql(<<<'SQL'
            CREATE TABLE messages (id INT AUTO_INCREMENT NOT NULL, sender_id INT NOT NULL, recipient_id INT NOT NULL, content VARCHAR(255) NOT NULL, timestamp DATETIME NOT NULL, type VARCHAR(255) NOT NULL, read_status INT NOT NULL, PRIMARY KEY(id)) DEFAULT CHARACTER SET utf8mb4 COLLATE `utf8mb4_unicode_ci` ENGINE = InnoDB
        SQL);
        $this->addSql(<<<'SQL'
            CREATE TABLE participation (id INT AUTO_INCREMENT NOT NULL, PRIMARY KEY(id)) DEFAULT CHARACTER SET utf8mb4 COLLATE `utf8mb4_unicode_ci` ENGINE = InnoDB
        SQL);
        $this->addSql(<<<'SQL'
            CREATE TABLE participation_events (participation_id INT NOT NULL, events_id INT NOT NULL, INDEX IDX_29E2D16F6ACE3B73 (participation_id), INDEX IDX_29E2D16F9D6A1065 (events_id), PRIMARY KEY(participation_id, events_id)) DEFAULT CHARACTER SET utf8mb4 COLLATE `utf8mb4_unicode_ci` ENGINE = InnoDB
        SQL);
        $this->addSql(<<<'SQL'
            CREATE TABLE participation_users (participation_id INT NOT NULL, users_id INT NOT NULL, INDEX IDX_1B5F28626ACE3B73 (participation_id), INDEX IDX_1B5F286267B3B43D (users_id), PRIMARY KEY(participation_id, users_id)) DEFAULT CHARACTER SET utf8mb4 COLLATE `utf8mb4_unicode_ci` ENGINE = InnoDB
        SQL);
        $this->addSql(<<<'SQL'
            CREATE TABLE reviews (id INT AUTO_INCREMENT NOT NULL, user_id_id INT NOT NULL, event_id_id INT NOT NULL, rating INT NOT NULL, comment VARCHAR(255) NOT NULL, creatid_at VARCHAR(255) DEFAULT NULL, INDEX IDX_6970EB0F9D86650F (user_id_id), INDEX IDX_6970EB0F3E5F2F7B (event_id_id), PRIMARY KEY(id)) DEFAULT CHARACTER SET utf8mb4 COLLATE `utf8mb4_unicode_ci` ENGINE = InnoDB
        SQL);
        $this->addSql(<<<'SQL'
            CREATE TABLE rewards (id INT AUTO_INCREMENT NOT NULL, action_type VARCHAR(255) NOT NULL, points INT NOT NULL, description VARCHAR(255) NOT NULL, PRIMARY KEY(id)) DEFAULT CHARACTER SET utf8mb4 COLLATE `utf8mb4_unicode_ci` ENGINE = InnoDB
        SQL);
        $this->addSql(<<<'SQL'
            CREATE TABLE roulette (id INT AUTO_INCREMENT NOT NULL, user_id_id INT DEFAULT NULL, points_gagnes INT NOT NULL, date DATETIME NOT NULL, INDEX IDX_D80F9D2E9D86650F (user_id_id), PRIMARY KEY(id)) DEFAULT CHARACTER SET utf8mb4 COLLATE `utf8mb4_unicode_ci` ENGINE = InnoDB
        SQL);
        $this->addSql(<<<'SQL'
            CREATE TABLE shares (id INT AUTO_INCREMENT NOT NULL, post_id_id INT DEFAULT NULL, user_id_id INT DEFAULT NULL, created_at DATETIME DEFAULT NULL, INDEX IDX_905F717CE85F12B8 (post_id_id), INDEX IDX_905F717C9D86650F (user_id_id), PRIMARY KEY(id)) DEFAULT CHARACTER SET utf8mb4 COLLATE `utf8mb4_unicode_ci` ENGINE = InnoDB
        SQL);
        $this->addSql(<<<'SQL'
            CREATE TABLE transaction_argent (id INT AUTO_INCREMENT NOT NULL, PRIMARY KEY(id)) DEFAULT CHARACTER SET utf8mb4 COLLATE `utf8mb4_unicode_ci` ENGINE = InnoDB
        SQL);
        $this->addSql(<<<'SQL'
            CREATE TABLE user_groups (id INT AUTO_INCREMENT NOT NULL, creator_id_id INT NOT NULL, name VARCHAR(255) NOT NULL, description VARCHAR(255) NOT NULL, profile_picture LONGTEXT NOT NULL, rules VARCHAR(255) NOT NULL, created_at VARCHAR(255) NOT NULL, INDEX IDX_953F224DF05788E9 (creator_id_id), PRIMARY KEY(id)) DEFAULT CHARACTER SET utf8mb4 COLLATE `utf8mb4_unicode_ci` ENGINE = InnoDB
        SQL);
        $this->addSql(<<<'SQL'
            CREATE TABLE user_intrests (id INT AUTO_INCREMENT NOT NULL, user_id_id INT DEFAULT NULL, category_id_id INT DEFAULT NULL, INDEX IDX_5A3306759D86650F (user_id_id), INDEX IDX_5A3306759777D11E (category_id_id), PRIMARY KEY(id)) DEFAULT CHARACTER SET utf8mb4 COLLATE `utf8mb4_unicode_ci` ENGINE = InnoDB
        SQL);
        $this->addSql(<<<'SQL'
            CREATE TABLE user_messages (id INT AUTO_INCREMENT NOT NULL, user_id_id INT DEFAULT NULL, sent_at DATETIME DEFAULT NULL, last_message VARCHAR(255) DEFAULT NULL, username VARCHAR(255) NOT NULL, INDEX IDX_3B8FFA969D86650F (user_id_id), PRIMARY KEY(id)) DEFAULT CHARACTER SET utf8mb4 COLLATE `utf8mb4_unicode_ci` ENGINE = InnoDB
        SQL);
        $this->addSql(<<<'SQL'
            CREATE TABLE user_profile (id INT AUTO_INCREMENT NOT NULL, user_id INT NOT NULL, bio VARCHAR(255) NOT NULL, profile_picture VARCHAR(255) NOT NULL, intrests VARCHAR(255) NOT NULL, PRIMARY KEY(id)) DEFAULT CHARACTER SET utf8mb4 COLLATE `utf8mb4_unicode_ci` ENGINE = InnoDB
        SQL);
        $this->addSql(<<<'SQL'
            CREATE TABLE user_rewards (id INT AUTO_INCREMENT NOT NULL, user_id INT NOT NULL, reward_id INT NOT NULL, event_id INT NOT NULL, points_earned INT NOT NULL, erned_at VARCHAR(255) NOT NULL, PRIMARY KEY(id)) DEFAULT CHARACTER SET utf8mb4 COLLATE `utf8mb4_unicode_ci` ENGINE = InnoDB
        SQL);
        $this->addSql(<<<'SQL'
            CREATE TABLE users (id INT AUTO_INCREMENT NOT NULL, username VARCHAR(255) NOT NULL, password VARCHAR(255) NOT NULL, email VARCHAR(255) NOT NULL, created_at VARCHAR(255) DEFAULT NULL, updated_at VARCHAR(255) DEFAULT NULL, points INT DEFAULT NULL, age INT NOT NULL, gender VARCHAR(255) NOT NULL, argent NUMERIC(10, 2) DEFAULT NULL, PRIMARY KEY(id)) DEFAULT CHARACTER SET utf8mb4 COLLATE `utf8mb4_unicode_ci` ENGINE = InnoDB
        SQL);
        $this->addSql(<<<'SQL'
            CREATE TABLE visite_utilisateur (id INT AUTO_INCREMENT NOT NULL, dernier_visite DATE NOT NULL, serie INT NOT NULL, user_id INT NOT NULL, PRIMARY KEY(id)) DEFAULT CHARACTER SET utf8mb4 COLLATE `utf8mb4_unicode_ci` ENGINE = InnoDB
        SQL);
        $this->addSql(<<<'SQL'
            CREATE TABLE worker_raitings (id INT AUTO_INCREMENT NOT NULL, user_id INT NOT NULL, rater_id INT NOT NULL, job_id INT NOT NULL, raiting INT NOT NULL, comment LONGTEXT NOT NULL, created_at DATETIME DEFAULT NULL, PRIMARY KEY(id)) DEFAULT CHARACTER SET utf8mb4 COLLATE `utf8mb4_unicode_ci` ENGINE = InnoDB
        SQL);
        $this->addSql(<<<'SQL'
            CREATE TABLE messenger_messages (id BIGINT AUTO_INCREMENT NOT NULL, body LONGTEXT NOT NULL, headers LONGTEXT NOT NULL, queue_name VARCHAR(190) NOT NULL, created_at DATETIME NOT NULL, available_at DATETIME NOT NULL, delivered_at DATETIME DEFAULT NULL, INDEX IDX_75EA56E0FB7336F0 (queue_name), INDEX IDX_75EA56E0E3BD61CE (available_at), INDEX IDX_75EA56E016BA31DB (delivered_at), PRIMARY KEY(id)) DEFAULT CHARACTER SET utf8mb4 COLLATE `utf8mb4_unicode_ci` ENGINE = InnoDB
        SQL);
        $this->addSql(<<<'SQL'
            ALTER TABLE applications ADD CONSTRAINT FK_F7C966F09D86650F FOREIGN KEY (user_id_id) REFERENCES users (id)
        SQL);
        $this->addSql(<<<'SQL'
            ALTER TABLE applications ADD CONSTRAINT FK_F7C966F0A578C4F9 FOREIGN KEY (enevt_id_id) REFERENCES events (id)
        SQL);
        $this->addSql(<<<'SQL'
            ALTER TABLE applications ADD CONSTRAINT FK_F7C966F07E182327 FOREIGN KEY (job_id_id) REFERENCES jobs (id)
        SQL);
        $this->addSql(<<<'SQL'
            ALTER TABLE comments ADD CONSTRAINT FK_5F9E962AE85F12B8 FOREIGN KEY (post_id_id) REFERENCES feed_posts (id)
        SQL);
        $this->addSql(<<<'SQL'
            ALTER TABLE comments ADD CONSTRAINT FK_5F9E962A9D86650F FOREIGN KEY (user_id_id) REFERENCES users (id)
        SQL);
        $this->addSql(<<<'SQL'
            ALTER TABLE conversion ADD CONSTRAINT FK_BD9127449D86650F FOREIGN KEY (user_id_id) REFERENCES users (id)
        SQL);
        $this->addSql(<<<'SQL'
            ALTER TABLE events ADD CONSTRAINT FK_5387574AE78C696A FOREIGN KEY (organizer_id_id) REFERENCES users (id)
        SQL);
        $this->addSql(<<<'SQL'
            ALTER TABLE events ADD CONSTRAINT FK_5387574A9777D11E FOREIGN KEY (category_id_id) REFERENCES category (id)
        SQL);
        $this->addSql(<<<'SQL'
            ALTER TABLE feed_posts ADD CONSTRAINT FK_7DD2E9469D86650F FOREIGN KEY (user_id_id) REFERENCES users (id)
        SQL);
        $this->addSql(<<<'SQL'
            ALTER TABLE feed_posts ADD CONSTRAINT FK_7DD2E9463E5F2F7B FOREIGN KEY (event_id_id) REFERENCES users (id)
        SQL);
        $this->addSql(<<<'SQL'
            ALTER TABLE group_feed_posts ADD CONSTRAINT FK_AA1F88F42F68B530 FOREIGN KEY (group_id_id) REFERENCES user_groups (id)
        SQL);
        $this->addSql(<<<'SQL'
            ALTER TABLE group_feed_posts ADD CONSTRAINT FK_AA1F88F49D86650F FOREIGN KEY (user_id_id) REFERENCES users (id)
        SQL);
        $this->addSql(<<<'SQL'
            ALTER TABLE group_members ADD CONSTRAINT FK_C3A086F37F71E2AF FOREIGN KEY (group_it_id) REFERENCES user_groups (id)
        SQL);
        $this->addSql(<<<'SQL'
            ALTER TABLE group_members ADD CONSTRAINT FK_C3A086F39D86650F FOREIGN KEY (user_id_id) REFERENCES users (id)
        SQL);
        $this->addSql(<<<'SQL'
            ALTER TABLE historique_points ADD CONSTRAINT FK_EEF82E759D86650F FOREIGN KEY (user_id_id) REFERENCES users (id)
        SQL);
        $this->addSql(<<<'SQL'
            ALTER TABLE jobs ADD CONSTRAINT FK_A8936DC59D86650F FOREIGN KEY (user_id_id) REFERENCES users (id)
        SQL);
        $this->addSql(<<<'SQL'
            ALTER TABLE jobs ADD CONSTRAINT FK_A8936DC53E5F2F7B FOREIGN KEY (event_id_id) REFERENCES events (id)
        SQL);
        $this->addSql(<<<'SQL'
            ALTER TABLE likes ADD CONSTRAINT FK_49CA4E7DE85F12B8 FOREIGN KEY (post_id_id) REFERENCES feed_posts (id)
        SQL);
        $this->addSql(<<<'SQL'
            ALTER TABLE likes ADD CONSTRAINT FK_49CA4E7D9D86650F FOREIGN KEY (user_id_id) REFERENCES users (id)
        SQL);
        $this->addSql(<<<'SQL'
            ALTER TABLE participation_events ADD CONSTRAINT FK_29E2D16F6ACE3B73 FOREIGN KEY (participation_id) REFERENCES participation (id) ON DELETE CASCADE
        SQL);
        $this->addSql(<<<'SQL'
            ALTER TABLE participation_events ADD CONSTRAINT FK_29E2D16F9D6A1065 FOREIGN KEY (events_id) REFERENCES events (id) ON DELETE CASCADE
        SQL);
        $this->addSql(<<<'SQL'
            ALTER TABLE participation_users ADD CONSTRAINT FK_1B5F28626ACE3B73 FOREIGN KEY (participation_id) REFERENCES participation (id) ON DELETE CASCADE
        SQL);
        $this->addSql(<<<'SQL'
            ALTER TABLE participation_users ADD CONSTRAINT FK_1B5F286267B3B43D FOREIGN KEY (users_id) REFERENCES users (id) ON DELETE CASCADE
        SQL);
        $this->addSql(<<<'SQL'
            ALTER TABLE reviews ADD CONSTRAINT FK_6970EB0F9D86650F FOREIGN KEY (user_id_id) REFERENCES users (id)
        SQL);
        $this->addSql(<<<'SQL'
            ALTER TABLE reviews ADD CONSTRAINT FK_6970EB0F3E5F2F7B FOREIGN KEY (event_id_id) REFERENCES events (id)
        SQL);
        $this->addSql(<<<'SQL'
            ALTER TABLE roulette ADD CONSTRAINT FK_D80F9D2E9D86650F FOREIGN KEY (user_id_id) REFERENCES users (id)
        SQL);
        $this->addSql(<<<'SQL'
            ALTER TABLE shares ADD CONSTRAINT FK_905F717CE85F12B8 FOREIGN KEY (post_id_id) REFERENCES feed_posts (id)
        SQL);
        $this->addSql(<<<'SQL'
            ALTER TABLE shares ADD CONSTRAINT FK_905F717C9D86650F FOREIGN KEY (user_id_id) REFERENCES users (id)
        SQL);
        $this->addSql(<<<'SQL'
            ALTER TABLE user_groups ADD CONSTRAINT FK_953F224DF05788E9 FOREIGN KEY (creator_id_id) REFERENCES users (id)
        SQL);
        $this->addSql(<<<'SQL'
            ALTER TABLE user_intrests ADD CONSTRAINT FK_5A3306759D86650F FOREIGN KEY (user_id_id) REFERENCES users (id)
        SQL);
        $this->addSql(<<<'SQL'
            ALTER TABLE user_intrests ADD CONSTRAINT FK_5A3306759777D11E FOREIGN KEY (category_id_id) REFERENCES category (id)
        SQL);
        $this->addSql(<<<'SQL'
            ALTER TABLE user_messages ADD CONSTRAINT FK_3B8FFA969D86650F FOREIGN KEY (user_id_id) REFERENCES users (id)
        SQL);
    }

    public function down(Schema $schema): void
    {
        // this down() migration is auto-generated, please modify it to your needs
        $this->addSql(<<<'SQL'
            ALTER TABLE applications DROP FOREIGN KEY FK_F7C966F09D86650F
        SQL);
        $this->addSql(<<<'SQL'
            ALTER TABLE applications DROP FOREIGN KEY FK_F7C966F0A578C4F9
        SQL);
        $this->addSql(<<<'SQL'
            ALTER TABLE applications DROP FOREIGN KEY FK_F7C966F07E182327
        SQL);
        $this->addSql(<<<'SQL'
            ALTER TABLE comments DROP FOREIGN KEY FK_5F9E962AE85F12B8
        SQL);
        $this->addSql(<<<'SQL'
            ALTER TABLE comments DROP FOREIGN KEY FK_5F9E962A9D86650F
        SQL);
        $this->addSql(<<<'SQL'
            ALTER TABLE conversion DROP FOREIGN KEY FK_BD9127449D86650F
        SQL);
        $this->addSql(<<<'SQL'
            ALTER TABLE events DROP FOREIGN KEY FK_5387574AE78C696A
        SQL);
        $this->addSql(<<<'SQL'
            ALTER TABLE events DROP FOREIGN KEY FK_5387574A9777D11E
        SQL);
        $this->addSql(<<<'SQL'
            ALTER TABLE feed_posts DROP FOREIGN KEY FK_7DD2E9469D86650F
        SQL);
        $this->addSql(<<<'SQL'
            ALTER TABLE feed_posts DROP FOREIGN KEY FK_7DD2E9463E5F2F7B
        SQL);
        $this->addSql(<<<'SQL'
            ALTER TABLE group_feed_posts DROP FOREIGN KEY FK_AA1F88F42F68B530
        SQL);
        $this->addSql(<<<'SQL'
            ALTER TABLE group_feed_posts DROP FOREIGN KEY FK_AA1F88F49D86650F
        SQL);
        $this->addSql(<<<'SQL'
            ALTER TABLE group_members DROP FOREIGN KEY FK_C3A086F37F71E2AF
        SQL);
        $this->addSql(<<<'SQL'
            ALTER TABLE group_members DROP FOREIGN KEY FK_C3A086F39D86650F
        SQL);
        $this->addSql(<<<'SQL'
            ALTER TABLE historique_points DROP FOREIGN KEY FK_EEF82E759D86650F
        SQL);
        $this->addSql(<<<'SQL'
            ALTER TABLE jobs DROP FOREIGN KEY FK_A8936DC59D86650F
        SQL);
        $this->addSql(<<<'SQL'
            ALTER TABLE jobs DROP FOREIGN KEY FK_A8936DC53E5F2F7B
        SQL);
        $this->addSql(<<<'SQL'
            ALTER TABLE likes DROP FOREIGN KEY FK_49CA4E7DE85F12B8
        SQL);
        $this->addSql(<<<'SQL'
            ALTER TABLE likes DROP FOREIGN KEY FK_49CA4E7D9D86650F
        SQL);
        $this->addSql(<<<'SQL'
            ALTER TABLE participation_events DROP FOREIGN KEY FK_29E2D16F6ACE3B73
        SQL);
        $this->addSql(<<<'SQL'
            ALTER TABLE participation_events DROP FOREIGN KEY FK_29E2D16F9D6A1065
        SQL);
        $this->addSql(<<<'SQL'
            ALTER TABLE participation_users DROP FOREIGN KEY FK_1B5F28626ACE3B73
        SQL);
        $this->addSql(<<<'SQL'
            ALTER TABLE participation_users DROP FOREIGN KEY FK_1B5F286267B3B43D
        SQL);
        $this->addSql(<<<'SQL'
            ALTER TABLE reviews DROP FOREIGN KEY FK_6970EB0F9D86650F
        SQL);
        $this->addSql(<<<'SQL'
            ALTER TABLE reviews DROP FOREIGN KEY FK_6970EB0F3E5F2F7B
        SQL);
        $this->addSql(<<<'SQL'
            ALTER TABLE roulette DROP FOREIGN KEY FK_D80F9D2E9D86650F
        SQL);
        $this->addSql(<<<'SQL'
            ALTER TABLE shares DROP FOREIGN KEY FK_905F717CE85F12B8
        SQL);
        $this->addSql(<<<'SQL'
            ALTER TABLE shares DROP FOREIGN KEY FK_905F717C9D86650F
        SQL);
        $this->addSql(<<<'SQL'
            ALTER TABLE user_groups DROP FOREIGN KEY FK_953F224DF05788E9
        SQL);
        $this->addSql(<<<'SQL'
            ALTER TABLE user_intrests DROP FOREIGN KEY FK_5A3306759D86650F
        SQL);
        $this->addSql(<<<'SQL'
            ALTER TABLE user_intrests DROP FOREIGN KEY FK_5A3306759777D11E
        SQL);
        $this->addSql(<<<'SQL'
            ALTER TABLE user_messages DROP FOREIGN KEY FK_3B8FFA969D86650F
        SQL);
        $this->addSql(<<<'SQL'
            DROP TABLE applications
        SQL);
        $this->addSql(<<<'SQL'
            DROP TABLE category
        SQL);
        $this->addSql(<<<'SQL'
            DROP TABLE comments
        SQL);
        $this->addSql(<<<'SQL'
            DROP TABLE conversion
        SQL);
        $this->addSql(<<<'SQL'
            DROP TABLE events
        SQL);
        $this->addSql(<<<'SQL'
            DROP TABLE feed_posts
        SQL);
        $this->addSql(<<<'SQL'
            DROP TABLE group_feed_posts
        SQL);
        $this->addSql(<<<'SQL'
            DROP TABLE group_members
        SQL);
        $this->addSql(<<<'SQL'
            DROP TABLE historique_points
        SQL);
        $this->addSql(<<<'SQL'
            DROP TABLE jobs
        SQL);
        $this->addSql(<<<'SQL'
            DROP TABLE likes
        SQL);
        $this->addSql(<<<'SQL'
            DROP TABLE messages
        SQL);
        $this->addSql(<<<'SQL'
            DROP TABLE participation
        SQL);
        $this->addSql(<<<'SQL'
            DROP TABLE participation_events
        SQL);
        $this->addSql(<<<'SQL'
            DROP TABLE participation_users
        SQL);
        $this->addSql(<<<'SQL'
            DROP TABLE reviews
        SQL);
        $this->addSql(<<<'SQL'
            DROP TABLE rewards
        SQL);
        $this->addSql(<<<'SQL'
            DROP TABLE roulette
        SQL);
        $this->addSql(<<<'SQL'
            DROP TABLE shares
        SQL);
        $this->addSql(<<<'SQL'
            DROP TABLE transaction_argent
        SQL);
        $this->addSql(<<<'SQL'
            DROP TABLE user_groups
        SQL);
        $this->addSql(<<<'SQL'
            DROP TABLE user_intrests
        SQL);
        $this->addSql(<<<'SQL'
            DROP TABLE user_messages
        SQL);
        $this->addSql(<<<'SQL'
            DROP TABLE user_profile
        SQL);
        $this->addSql(<<<'SQL'
            DROP TABLE user_rewards
        SQL);
        $this->addSql(<<<'SQL'
            DROP TABLE users
        SQL);
        $this->addSql(<<<'SQL'
            DROP TABLE visite_utilisateur
        SQL);
        $this->addSql(<<<'SQL'
            DROP TABLE worker_raitings
        SQL);
        $this->addSql(<<<'SQL'
            DROP TABLE messenger_messages
        SQL);
    }
}
</file>

<file path="migrations/Version20250419191746.php">
<?php

declare(strict_types=1);

namespace DoctrineMigrations;

use Doctrine\DBAL\Schema\Schema;
use Doctrine\Migrations\AbstractMigration;

/**
 * Auto-generated Migration: Please modify to your needs!
 */
final class Version20250419191746 extends AbstractMigration
{
    public function getDescription(): string
    {
        return '';
    }

    public function up(Schema $schema): void
    {
        // this up() migration is auto-generated, please modify it to your needs
        $this->addSql(<<<'SQL'
            CREATE TABLE applications (id INT AUTO_INCREMENT NOT NULL, user_id_id INT NOT NULL, enevt_id_id INT NOT NULL, job_id_id INT NOT NULL, status VARCHAR(255) NOT NULL, applied_at VARCHAR(255) DEFAULT NULL, rewarded INT DEFAULT NULL, cover_letter VARCHAR(255) NOT NULL, resume_path VARCHAR(255) NOT NULL, cover_rating INT DEFAULT NULL, INDEX IDX_F7C966F09D86650F (user_id_id), INDEX IDX_F7C966F0A578C4F9 (enevt_id_id), INDEX IDX_F7C966F07E182327 (job_id_id), PRIMARY KEY(id)) DEFAULT CHARACTER SET utf8mb4 COLLATE `utf8mb4_unicode_ci` ENGINE = InnoDB
        SQL);
        $this->addSql(<<<'SQL'
            CREATE TABLE category (id INT AUTO_INCREMENT NOT NULL, name VARCHAR(255) NOT NULL, PRIMARY KEY(id)) DEFAULT CHARACTER SET utf8mb4 COLLATE `utf8mb4_unicode_ci` ENGINE = InnoDB
        SQL);
        $this->addSql(<<<'SQL'
            CREATE TABLE comments (id INT AUTO_INCREMENT NOT NULL, post_id_id INT NOT NULL, user_id_id INT NOT NULL, content VARCHAR(255) NOT NULL, time_stamp VARCHAR(255) NOT NULL, is_deleted INT DEFAULT NULL, INDEX IDX_5F9E962AE85F12B8 (post_id_id), INDEX IDX_5F9E962A9D86650F (user_id_id), PRIMARY KEY(id)) DEFAULT CHARACTER SET utf8mb4 COLLATE `utf8mb4_unicode_ci` ENGINE = InnoDB
        SQL);
        $this->addSql(<<<'SQL'
            CREATE TABLE conversion (id INT AUTO_INCREMENT NOT NULL, user_id_id INT NOT NULL, points_convertis INT NOT NULL, montant NUMERIC(10, 2) NOT NULL, devise VARCHAR(255) NOT NULL, date DATETIME NOT NULL, INDEX IDX_BD9127449D86650F (user_id_id), PRIMARY KEY(id)) DEFAULT CHARACTER SET utf8mb4 COLLATE `utf8mb4_unicode_ci` ENGINE = InnoDB
        SQL);
        $this->addSql(<<<'SQL'
            CREATE TABLE events (id INT AUTO_INCREMENT NOT NULL, organizer_id_id INT NOT NULL, category_id_id INT NOT NULL, name VARCHAR(255) NOT NULL, description VARCHAR(255) NOT NULL, start_time VARCHAR(255) NOT NULL, end_time VARCHAR(255) NOT NULL, location VARCHAR(255) NOT NULL, image LONGTEXT NOT NULL, points INT NOT NULL, INDEX IDX_5387574AE78C696A (organizer_id_id), INDEX IDX_5387574A9777D11E (category_id_id), PRIMARY KEY(id)) DEFAULT CHARACTER SET utf8mb4 COLLATE `utf8mb4_unicode_ci` ENGINE = InnoDB
        SQL);
        $this->addSql(<<<'SQL'
            CREATE TABLE feed_posts (id INT AUTO_INCREMENT NOT NULL, user_id_id INT NOT NULL, event_id_id INT NOT NULL, content VARCHAR(255) NOT NULL, time_stamp VARCHAR(255) NOT NULL, is_deleted INT DEFAULT NULL, created_at VARCHAR(255) NOT NULL, updated_at VARCHAR(255) NOT NULL, score_popularite INT DEFAULT NULL, image_path VARCHAR(255) NOT NULL, group_id INT DEFAULT NULL, INDEX IDX_7DD2E9469D86650F (user_id_id), INDEX IDX_7DD2E9463E5F2F7B (event_id_id), PRIMARY KEY(id)) DEFAULT CHARACTER SET utf8mb4 COLLATE `utf8mb4_unicode_ci` ENGINE = InnoDB
        SQL);
        $this->addSql(<<<'SQL'
            CREATE TABLE group_feed_posts (id INT AUTO_INCREMENT NOT NULL, group_id_id INT NOT NULL, user_id_id INT NOT NULL, content VARCHAR(255) NOT NULL, timestamp VARCHAR(255) NOT NULL, media_url VARCHAR(255) NOT NULL, is_deleted INT DEFAULT NULL, INDEX IDX_AA1F88F42F68B530 (group_id_id), INDEX IDX_AA1F88F49D86650F (user_id_id), PRIMARY KEY(id)) DEFAULT CHARACTER SET utf8mb4 COLLATE `utf8mb4_unicode_ci` ENGINE = InnoDB
        SQL);
        $this->addSql(<<<'SQL'
            CREATE TABLE group_members (id INT AUTO_INCREMENT NOT NULL, group_it_id INT NOT NULL, user_id_id INT NOT NULL, role VARCHAR(255) NOT NULL, INDEX IDX_C3A086F37F71E2AF (group_it_id), INDEX IDX_C3A086F39D86650F (user_id_id), PRIMARY KEY(id)) DEFAULT CHARACTER SET utf8mb4 COLLATE `utf8mb4_unicode_ci` ENGINE = InnoDB
        SQL);
        $this->addSql(<<<'SQL'
            CREATE TABLE historique_points (id INT AUTO_INCREMENT NOT NULL, user_id_id INT NOT NULL, type VARCHAR(255) NOT NULL, points INT NOT NULL, raison VARCHAR(255) NOT NULL, date DATETIME NOT NULL, INDEX IDX_EEF82E759D86650F (user_id_id), PRIMARY KEY(id)) DEFAULT CHARACTER SET utf8mb4 COLLATE `utf8mb4_unicode_ci` ENGINE = InnoDB
        SQL);
        $this->addSql(<<<'SQL'
            CREATE TABLE jobs (id INT AUTO_INCREMENT NOT NULL, user_id_id INT DEFAULT NULL, event_id_id INT DEFAULT NULL, job_title VARCHAR(255) NOT NULL, event_title VARCHAR(255) DEFAULT NULL, job_location VARCHAR(255) NOT NULL, employment_type VARCHAR(255) NOT NULL, application_dead_line VARCHAR(255) DEFAULT NULL, min_salary INT NOT NULL, max_salary INT NOT NULL, currency VARCHAR(255) NOT NULL, job_descreption VARCHAR(255) NOT NULL, recruiter_name VARCHAR(255) NOT NULL, recruiter_email VARCHAR(255) NOT NULL, created_at VARCHAR(255) DEFAULT NULL, INDEX IDX_A8936DC59D86650F (user_id_id), INDEX IDX_A8936DC53E5F2F7B (event_id_id), PRIMARY KEY(id)) DEFAULT CHARACTER SET utf8mb4 COLLATE `utf8mb4_unicode_ci` ENGINE = InnoDB
        SQL);
        $this->addSql(<<<'SQL'
            CREATE TABLE likes (id INT AUTO_INCREMENT NOT NULL, post_id_id INT NOT NULL, user_id_id INT NOT NULL, time_stamp VARCHAR(255) NOT NULL, INDEX IDX_49CA4E7DE85F12B8 (post_id_id), INDEX IDX_49CA4E7D9D86650F (user_id_id), PRIMARY KEY(id)) DEFAULT CHARACTER SET utf8mb4 COLLATE `utf8mb4_unicode_ci` ENGINE = InnoDB
        SQL);
        $this->addSql(<<<'SQL'
            CREATE TABLE messages (id INT AUTO_INCREMENT NOT NULL, sender_id INT NOT NULL, recipient_id INT NOT NULL, content VARCHAR(255) NOT NULL, timestamp DATETIME NOT NULL, type VARCHAR(255) NOT NULL, read_status INT NOT NULL, PRIMARY KEY(id)) DEFAULT CHARACTER SET utf8mb4 COLLATE `utf8mb4_unicode_ci` ENGINE = InnoDB
        SQL);
        $this->addSql(<<<'SQL'
            CREATE TABLE participation (id INT AUTO_INCREMENT NOT NULL, PRIMARY KEY(id)) DEFAULT CHARACTER SET utf8mb4 COLLATE `utf8mb4_unicode_ci` ENGINE = InnoDB
        SQL);
        $this->addSql(<<<'SQL'
            CREATE TABLE participation_events (participation_id INT NOT NULL, events_id INT NOT NULL, INDEX IDX_29E2D16F6ACE3B73 (participation_id), INDEX IDX_29E2D16F9D6A1065 (events_id), PRIMARY KEY(participation_id, events_id)) DEFAULT CHARACTER SET utf8mb4 COLLATE `utf8mb4_unicode_ci` ENGINE = InnoDB
        SQL);
        $this->addSql(<<<'SQL'
            CREATE TABLE participation_users (participation_id INT NOT NULL, users_id INT NOT NULL, INDEX IDX_1B5F28626ACE3B73 (participation_id), INDEX IDX_1B5F286267B3B43D (users_id), PRIMARY KEY(participation_id, users_id)) DEFAULT CHARACTER SET utf8mb4 COLLATE `utf8mb4_unicode_ci` ENGINE = InnoDB
        SQL);
        $this->addSql(<<<'SQL'
            CREATE TABLE reviews (id INT AUTO_INCREMENT NOT NULL, user_id_id INT NOT NULL, event_id_id INT NOT NULL, rating INT NOT NULL, comment VARCHAR(255) NOT NULL, creatid_at VARCHAR(255) DEFAULT NULL, INDEX IDX_6970EB0F9D86650F (user_id_id), INDEX IDX_6970EB0F3E5F2F7B (event_id_id), PRIMARY KEY(id)) DEFAULT CHARACTER SET utf8mb4 COLLATE `utf8mb4_unicode_ci` ENGINE = InnoDB
        SQL);
        $this->addSql(<<<'SQL'
            CREATE TABLE rewards (id INT AUTO_INCREMENT NOT NULL, action_type VARCHAR(255) NOT NULL, points INT NOT NULL, description VARCHAR(255) NOT NULL, PRIMARY KEY(id)) DEFAULT CHARACTER SET utf8mb4 COLLATE `utf8mb4_unicode_ci` ENGINE = InnoDB
        SQL);
        $this->addSql(<<<'SQL'
            CREATE TABLE roulette (id INT AUTO_INCREMENT NOT NULL, user_id_id INT DEFAULT NULL, points_gagnes INT NOT NULL, date DATETIME NOT NULL, INDEX IDX_D80F9D2E9D86650F (user_id_id), PRIMARY KEY(id)) DEFAULT CHARACTER SET utf8mb4 COLLATE `utf8mb4_unicode_ci` ENGINE = InnoDB
        SQL);
        $this->addSql(<<<'SQL'
            CREATE TABLE shares (id INT AUTO_INCREMENT NOT NULL, post_id_id INT DEFAULT NULL, user_id_id INT DEFAULT NULL, created_at DATETIME DEFAULT NULL, INDEX IDX_905F717CE85F12B8 (post_id_id), INDEX IDX_905F717C9D86650F (user_id_id), PRIMARY KEY(id)) DEFAULT CHARACTER SET utf8mb4 COLLATE `utf8mb4_unicode_ci` ENGINE = InnoDB
        SQL);
        $this->addSql(<<<'SQL'
            CREATE TABLE transaction_argent (id INT AUTO_INCREMENT NOT NULL, PRIMARY KEY(id)) DEFAULT CHARACTER SET utf8mb4 COLLATE `utf8mb4_unicode_ci` ENGINE = InnoDB
        SQL);
        $this->addSql(<<<'SQL'
            CREATE TABLE user_groups (id INT AUTO_INCREMENT NOT NULL, creator_id_id INT NOT NULL, name VARCHAR(255) NOT NULL, description VARCHAR(255) NOT NULL, profile_picture LONGTEXT NOT NULL, rules VARCHAR(255) NOT NULL, created_at VARCHAR(255) NOT NULL, INDEX IDX_953F224DF05788E9 (creator_id_id), PRIMARY KEY(id)) DEFAULT CHARACTER SET utf8mb4 COLLATE `utf8mb4_unicode_ci` ENGINE = InnoDB
        SQL);
        $this->addSql(<<<'SQL'
            CREATE TABLE user_intrests (id INT AUTO_INCREMENT NOT NULL, user_id_id INT DEFAULT NULL, category_id_id INT DEFAULT NULL, INDEX IDX_5A3306759D86650F (user_id_id), INDEX IDX_5A3306759777D11E (category_id_id), PRIMARY KEY(id)) DEFAULT CHARACTER SET utf8mb4 COLLATE `utf8mb4_unicode_ci` ENGINE = InnoDB
        SQL);
        $this->addSql(<<<'SQL'
            CREATE TABLE user_messages (id INT AUTO_INCREMENT NOT NULL, user_id_id INT DEFAULT NULL, sent_at DATETIME DEFAULT NULL, last_message VARCHAR(255) DEFAULT NULL, username VARCHAR(255) NOT NULL, INDEX IDX_3B8FFA969D86650F (user_id_id), PRIMARY KEY(id)) DEFAULT CHARACTER SET utf8mb4 COLLATE `utf8mb4_unicode_ci` ENGINE = InnoDB
        SQL);
        $this->addSql(<<<'SQL'
            CREATE TABLE user_profile (id INT AUTO_INCREMENT NOT NULL, user_id INT NOT NULL, bio VARCHAR(255) NOT NULL, profile_picture VARCHAR(255) NOT NULL, intrests VARCHAR(255) NOT NULL, PRIMARY KEY(id)) DEFAULT CHARACTER SET utf8mb4 COLLATE `utf8mb4_unicode_ci` ENGINE = InnoDB
        SQL);
        $this->addSql(<<<'SQL'
            CREATE TABLE user_rewards (id INT AUTO_INCREMENT NOT NULL, user_id INT NOT NULL, reward_id INT NOT NULL, event_id INT NOT NULL, points_earned INT NOT NULL, erned_at VARCHAR(255) NOT NULL, PRIMARY KEY(id)) DEFAULT CHARACTER SET utf8mb4 COLLATE `utf8mb4_unicode_ci` ENGINE = InnoDB
        SQL);
        $this->addSql(<<<'SQL'
            CREATE TABLE users (id INT AUTO_INCREMENT NOT NULL, username VARCHAR(255) NOT NULL, password VARCHAR(255) NOT NULL, email VARCHAR(255) NOT NULL, created_at VARCHAR(255) DEFAULT NULL, updated_at VARCHAR(255) DEFAULT NULL, points INT DEFAULT NULL, age INT NOT NULL, gender VARCHAR(255) NOT NULL, argent NUMERIC(10, 2) DEFAULT NULL, PRIMARY KEY(id)) DEFAULT CHARACTER SET utf8mb4 COLLATE `utf8mb4_unicode_ci` ENGINE = InnoDB
        SQL);
        $this->addSql(<<<'SQL'
            CREATE TABLE visite_utilisateur (id INT AUTO_INCREMENT NOT NULL, dernier_visite DATE NOT NULL, serie INT NOT NULL, user_id INT NOT NULL, PRIMARY KEY(id)) DEFAULT CHARACTER SET utf8mb4 COLLATE `utf8mb4_unicode_ci` ENGINE = InnoDB
        SQL);
        $this->addSql(<<<'SQL'
            CREATE TABLE worker_raitings (id INT AUTO_INCREMENT NOT NULL, user_id INT NOT NULL, rater_id INT NOT NULL, job_id INT NOT NULL, raiting INT NOT NULL, comment LONGTEXT NOT NULL, created_at DATETIME DEFAULT NULL, PRIMARY KEY(id)) DEFAULT CHARACTER SET utf8mb4 COLLATE `utf8mb4_unicode_ci` ENGINE = InnoDB
        SQL);
        $this->addSql(<<<'SQL'
            CREATE TABLE messenger_messages (id BIGINT AUTO_INCREMENT NOT NULL, body LONGTEXT NOT NULL, headers LONGTEXT NOT NULL, queue_name VARCHAR(190) NOT NULL, created_at DATETIME NOT NULL, available_at DATETIME NOT NULL, delivered_at DATETIME DEFAULT NULL, INDEX IDX_75EA56E0FB7336F0 (queue_name), INDEX IDX_75EA56E0E3BD61CE (available_at), INDEX IDX_75EA56E016BA31DB (delivered_at), PRIMARY KEY(id)) DEFAULT CHARACTER SET utf8mb4 COLLATE `utf8mb4_unicode_ci` ENGINE = InnoDB
        SQL);
        $this->addSql(<<<'SQL'
            ALTER TABLE applications ADD CONSTRAINT FK_F7C966F09D86650F FOREIGN KEY (user_id_id) REFERENCES users (id)
        SQL);
        $this->addSql(<<<'SQL'
            ALTER TABLE applications ADD CONSTRAINT FK_F7C966F0A578C4F9 FOREIGN KEY (enevt_id_id) REFERENCES events (id)
        SQL);
        $this->addSql(<<<'SQL'
            ALTER TABLE applications ADD CONSTRAINT FK_F7C966F07E182327 FOREIGN KEY (job_id_id) REFERENCES jobs (id)
        SQL);
        $this->addSql(<<<'SQL'
            ALTER TABLE comments ADD CONSTRAINT FK_5F9E962AE85F12B8 FOREIGN KEY (post_id_id) REFERENCES feed_posts (id)
        SQL);
        $this->addSql(<<<'SQL'
            ALTER TABLE comments ADD CONSTRAINT FK_5F9E962A9D86650F FOREIGN KEY (user_id_id) REFERENCES users (id)
        SQL);
        $this->addSql(<<<'SQL'
            ALTER TABLE conversion ADD CONSTRAINT FK_BD9127449D86650F FOREIGN KEY (user_id_id) REFERENCES users (id)
        SQL);
        $this->addSql(<<<'SQL'
            ALTER TABLE events ADD CONSTRAINT FK_5387574AE78C696A FOREIGN KEY (organizer_id_id) REFERENCES users (id)
        SQL);
        $this->addSql(<<<'SQL'
            ALTER TABLE events ADD CONSTRAINT FK_5387574A9777D11E FOREIGN KEY (category_id_id) REFERENCES category (id)
        SQL);
        $this->addSql(<<<'SQL'
            ALTER TABLE feed_posts ADD CONSTRAINT FK_7DD2E9469D86650F FOREIGN KEY (user_id_id) REFERENCES users (id)
        SQL);
        $this->addSql(<<<'SQL'
            ALTER TABLE feed_posts ADD CONSTRAINT FK_7DD2E9463E5F2F7B FOREIGN KEY (event_id_id) REFERENCES users (id)
        SQL);
        $this->addSql(<<<'SQL'
            ALTER TABLE group_feed_posts ADD CONSTRAINT FK_AA1F88F42F68B530 FOREIGN KEY (group_id_id) REFERENCES user_groups (id)
        SQL);
        $this->addSql(<<<'SQL'
            ALTER TABLE group_feed_posts ADD CONSTRAINT FK_AA1F88F49D86650F FOREIGN KEY (user_id_id) REFERENCES users (id)
        SQL);
        $this->addSql(<<<'SQL'
            ALTER TABLE group_members ADD CONSTRAINT FK_C3A086F37F71E2AF FOREIGN KEY (group_it_id) REFERENCES user_groups (id)
        SQL);
        $this->addSql(<<<'SQL'
            ALTER TABLE group_members ADD CONSTRAINT FK_C3A086F39D86650F FOREIGN KEY (user_id_id) REFERENCES users (id)
        SQL);
        $this->addSql(<<<'SQL'
            ALTER TABLE historique_points ADD CONSTRAINT FK_EEF82E759D86650F FOREIGN KEY (user_id_id) REFERENCES users (id)
        SQL);
        $this->addSql(<<<'SQL'
            ALTER TABLE jobs ADD CONSTRAINT FK_A8936DC59D86650F FOREIGN KEY (user_id_id) REFERENCES users (id)
        SQL);
        $this->addSql(<<<'SQL'
            ALTER TABLE jobs ADD CONSTRAINT FK_A8936DC53E5F2F7B FOREIGN KEY (event_id_id) REFERENCES events (id)
        SQL);
        $this->addSql(<<<'SQL'
            ALTER TABLE likes ADD CONSTRAINT FK_49CA4E7DE85F12B8 FOREIGN KEY (post_id_id) REFERENCES feed_posts (id)
        SQL);
        $this->addSql(<<<'SQL'
            ALTER TABLE likes ADD CONSTRAINT FK_49CA4E7D9D86650F FOREIGN KEY (user_id_id) REFERENCES users (id)
        SQL);
        $this->addSql(<<<'SQL'
            ALTER TABLE participation_events ADD CONSTRAINT FK_29E2D16F6ACE3B73 FOREIGN KEY (participation_id) REFERENCES participation (id) ON DELETE CASCADE
        SQL);
        $this->addSql(<<<'SQL'
            ALTER TABLE participation_events ADD CONSTRAINT FK_29E2D16F9D6A1065 FOREIGN KEY (events_id) REFERENCES events (id) ON DELETE CASCADE
        SQL);
        $this->addSql(<<<'SQL'
            ALTER TABLE participation_users ADD CONSTRAINT FK_1B5F28626ACE3B73 FOREIGN KEY (participation_id) REFERENCES participation (id) ON DELETE CASCADE
        SQL);
        $this->addSql(<<<'SQL'
            ALTER TABLE participation_users ADD CONSTRAINT FK_1B5F286267B3B43D FOREIGN KEY (users_id) REFERENCES users (id) ON DELETE CASCADE
        SQL);
        $this->addSql(<<<'SQL'
            ALTER TABLE reviews ADD CONSTRAINT FK_6970EB0F9D86650F FOREIGN KEY (user_id_id) REFERENCES users (id)
        SQL);
        $this->addSql(<<<'SQL'
            ALTER TABLE reviews ADD CONSTRAINT FK_6970EB0F3E5F2F7B FOREIGN KEY (event_id_id) REFERENCES events (id)
        SQL);
        $this->addSql(<<<'SQL'
            ALTER TABLE roulette ADD CONSTRAINT FK_D80F9D2E9D86650F FOREIGN KEY (user_id_id) REFERENCES users (id)
        SQL);
        $this->addSql(<<<'SQL'
            ALTER TABLE shares ADD CONSTRAINT FK_905F717CE85F12B8 FOREIGN KEY (post_id_id) REFERENCES feed_posts (id)
        SQL);
        $this->addSql(<<<'SQL'
            ALTER TABLE shares ADD CONSTRAINT FK_905F717C9D86650F FOREIGN KEY (user_id_id) REFERENCES users (id)
        SQL);
        $this->addSql(<<<'SQL'
            ALTER TABLE user_groups ADD CONSTRAINT FK_953F224DF05788E9 FOREIGN KEY (creator_id_id) REFERENCES users (id)
        SQL);
        $this->addSql(<<<'SQL'
            ALTER TABLE user_intrests ADD CONSTRAINT FK_5A3306759D86650F FOREIGN KEY (user_id_id) REFERENCES users (id)
        SQL);
        $this->addSql(<<<'SQL'
            ALTER TABLE user_intrests ADD CONSTRAINT FK_5A3306759777D11E FOREIGN KEY (category_id_id) REFERENCES category (id)
        SQL);
        $this->addSql(<<<'SQL'
            ALTER TABLE user_messages ADD CONSTRAINT FK_3B8FFA969D86650F FOREIGN KEY (user_id_id) REFERENCES users (id)
        SQL);
    }

    public function down(Schema $schema): void
    {
        // this down() migration is auto-generated, please modify it to your needs
        $this->addSql(<<<'SQL'
            ALTER TABLE applications DROP FOREIGN KEY FK_F7C966F09D86650F
        SQL);
        $this->addSql(<<<'SQL'
            ALTER TABLE applications DROP FOREIGN KEY FK_F7C966F0A578C4F9
        SQL);
        $this->addSql(<<<'SQL'
            ALTER TABLE applications DROP FOREIGN KEY FK_F7C966F07E182327
        SQL);
        $this->addSql(<<<'SQL'
            ALTER TABLE comments DROP FOREIGN KEY FK_5F9E962AE85F12B8
        SQL);
        $this->addSql(<<<'SQL'
            ALTER TABLE comments DROP FOREIGN KEY FK_5F9E962A9D86650F
        SQL);
        $this->addSql(<<<'SQL'
            ALTER TABLE conversion DROP FOREIGN KEY FK_BD9127449D86650F
        SQL);
        $this->addSql(<<<'SQL'
            ALTER TABLE events DROP FOREIGN KEY FK_5387574AE78C696A
        SQL);
        $this->addSql(<<<'SQL'
            ALTER TABLE events DROP FOREIGN KEY FK_5387574A9777D11E
        SQL);
        $this->addSql(<<<'SQL'
            ALTER TABLE feed_posts DROP FOREIGN KEY FK_7DD2E9469D86650F
        SQL);
        $this->addSql(<<<'SQL'
            ALTER TABLE feed_posts DROP FOREIGN KEY FK_7DD2E9463E5F2F7B
        SQL);
        $this->addSql(<<<'SQL'
            ALTER TABLE group_feed_posts DROP FOREIGN KEY FK_AA1F88F42F68B530
        SQL);
        $this->addSql(<<<'SQL'
            ALTER TABLE group_feed_posts DROP FOREIGN KEY FK_AA1F88F49D86650F
        SQL);
        $this->addSql(<<<'SQL'
            ALTER TABLE group_members DROP FOREIGN KEY FK_C3A086F37F71E2AF
        SQL);
        $this->addSql(<<<'SQL'
            ALTER TABLE group_members DROP FOREIGN KEY FK_C3A086F39D86650F
        SQL);
        $this->addSql(<<<'SQL'
            ALTER TABLE historique_points DROP FOREIGN KEY FK_EEF82E759D86650F
        SQL);
        $this->addSql(<<<'SQL'
            ALTER TABLE jobs DROP FOREIGN KEY FK_A8936DC59D86650F
        SQL);
        $this->addSql(<<<'SQL'
            ALTER TABLE jobs DROP FOREIGN KEY FK_A8936DC53E5F2F7B
        SQL);
        $this->addSql(<<<'SQL'
            ALTER TABLE likes DROP FOREIGN KEY FK_49CA4E7DE85F12B8
        SQL);
        $this->addSql(<<<'SQL'
            ALTER TABLE likes DROP FOREIGN KEY FK_49CA4E7D9D86650F
        SQL);
        $this->addSql(<<<'SQL'
            ALTER TABLE participation_events DROP FOREIGN KEY FK_29E2D16F6ACE3B73
        SQL);
        $this->addSql(<<<'SQL'
            ALTER TABLE participation_events DROP FOREIGN KEY FK_29E2D16F9D6A1065
        SQL);
        $this->addSql(<<<'SQL'
            ALTER TABLE participation_users DROP FOREIGN KEY FK_1B5F28626ACE3B73
        SQL);
        $this->addSql(<<<'SQL'
            ALTER TABLE participation_users DROP FOREIGN KEY FK_1B5F286267B3B43D
        SQL);
        $this->addSql(<<<'SQL'
            ALTER TABLE reviews DROP FOREIGN KEY FK_6970EB0F9D86650F
        SQL);
        $this->addSql(<<<'SQL'
            ALTER TABLE reviews DROP FOREIGN KEY FK_6970EB0F3E5F2F7B
        SQL);
        $this->addSql(<<<'SQL'
            ALTER TABLE roulette DROP FOREIGN KEY FK_D80F9D2E9D86650F
        SQL);
        $this->addSql(<<<'SQL'
            ALTER TABLE shares DROP FOREIGN KEY FK_905F717CE85F12B8
        SQL);
        $this->addSql(<<<'SQL'
            ALTER TABLE shares DROP FOREIGN KEY FK_905F717C9D86650F
        SQL);
        $this->addSql(<<<'SQL'
            ALTER TABLE user_groups DROP FOREIGN KEY FK_953F224DF05788E9
        SQL);
        $this->addSql(<<<'SQL'
            ALTER TABLE user_intrests DROP FOREIGN KEY FK_5A3306759D86650F
        SQL);
        $this->addSql(<<<'SQL'
            ALTER TABLE user_intrests DROP FOREIGN KEY FK_5A3306759777D11E
        SQL);
        $this->addSql(<<<'SQL'
            ALTER TABLE user_messages DROP FOREIGN KEY FK_3B8FFA969D86650F
        SQL);
        $this->addSql(<<<'SQL'
            DROP TABLE applications
        SQL);
        $this->addSql(<<<'SQL'
            DROP TABLE category
        SQL);
        $this->addSql(<<<'SQL'
            DROP TABLE comments
        SQL);
        $this->addSql(<<<'SQL'
            DROP TABLE conversion
        SQL);
        $this->addSql(<<<'SQL'
            DROP TABLE events
        SQL);
        $this->addSql(<<<'SQL'
            DROP TABLE feed_posts
        SQL);
        $this->addSql(<<<'SQL'
            DROP TABLE group_feed_posts
        SQL);
        $this->addSql(<<<'SQL'
            DROP TABLE group_members
        SQL);
        $this->addSql(<<<'SQL'
            DROP TABLE historique_points
        SQL);
        $this->addSql(<<<'SQL'
            DROP TABLE jobs
        SQL);
        $this->addSql(<<<'SQL'
            DROP TABLE likes
        SQL);
        $this->addSql(<<<'SQL'
            DROP TABLE messages
        SQL);
        $this->addSql(<<<'SQL'
            DROP TABLE participation
        SQL);
        $this->addSql(<<<'SQL'
            DROP TABLE participation_events
        SQL);
        $this->addSql(<<<'SQL'
            DROP TABLE participation_users
        SQL);
        $this->addSql(<<<'SQL'
            DROP TABLE reviews
        SQL);
        $this->addSql(<<<'SQL'
            DROP TABLE rewards
        SQL);
        $this->addSql(<<<'SQL'
            DROP TABLE roulette
        SQL);
        $this->addSql(<<<'SQL'
            DROP TABLE shares
        SQL);
        $this->addSql(<<<'SQL'
            DROP TABLE transaction_argent
        SQL);
        $this->addSql(<<<'SQL'
            DROP TABLE user_groups
        SQL);
        $this->addSql(<<<'SQL'
            DROP TABLE user_intrests
        SQL);
        $this->addSql(<<<'SQL'
            DROP TABLE user_messages
        SQL);
        $this->addSql(<<<'SQL'
            DROP TABLE user_profile
        SQL);
        $this->addSql(<<<'SQL'
            DROP TABLE user_rewards
        SQL);
        $this->addSql(<<<'SQL'
            DROP TABLE users
        SQL);
        $this->addSql(<<<'SQL'
            DROP TABLE visite_utilisateur
        SQL);
        $this->addSql(<<<'SQL'
            DROP TABLE worker_raitings
        SQL);
        $this->addSql(<<<'SQL'
            DROP TABLE messenger_messages
        SQL);
    }
}
</file>

<file path="migrations/Version20250419191845.php">
<?php

declare(strict_types=1);

namespace DoctrineMigrations;

use Doctrine\DBAL\Schema\Schema;
use Doctrine\Migrations\AbstractMigration;

/**
 * Auto-generated Migration: Please modify to your needs!
 */
final class Version20250419191845 extends AbstractMigration
{
    public function getDescription(): string
    {
        return '';
    }

    public function up(Schema $schema): void
    {
        // this up() migration is auto-generated, please modify it to your needs
        $this->addSql(<<<'SQL'
            CREATE TABLE applications (id INT AUTO_INCREMENT NOT NULL, user_id_id INT NOT NULL, enevt_id_id INT NOT NULL, job_id_id INT NOT NULL, status VARCHAR(255) NOT NULL, applied_at VARCHAR(255) DEFAULT NULL, rewarded INT DEFAULT NULL, cover_letter VARCHAR(255) NOT NULL, resume_path VARCHAR(255) NOT NULL, cover_rating INT DEFAULT NULL, INDEX IDX_F7C966F09D86650F (user_id_id), INDEX IDX_F7C966F0A578C4F9 (enevt_id_id), INDEX IDX_F7C966F07E182327 (job_id_id), PRIMARY KEY(id)) DEFAULT CHARACTER SET utf8mb4 COLLATE `utf8mb4_unicode_ci` ENGINE = InnoDB
        SQL);
        $this->addSql(<<<'SQL'
            CREATE TABLE category (id INT AUTO_INCREMENT NOT NULL, name VARCHAR(255) NOT NULL, PRIMARY KEY(id)) DEFAULT CHARACTER SET utf8mb4 COLLATE `utf8mb4_unicode_ci` ENGINE = InnoDB
        SQL);
        $this->addSql(<<<'SQL'
            CREATE TABLE comments (id INT AUTO_INCREMENT NOT NULL, post_id_id INT NOT NULL, user_id_id INT NOT NULL, content VARCHAR(255) NOT NULL, time_stamp VARCHAR(255) NOT NULL, is_deleted INT DEFAULT NULL, INDEX IDX_5F9E962AE85F12B8 (post_id_id), INDEX IDX_5F9E962A9D86650F (user_id_id), PRIMARY KEY(id)) DEFAULT CHARACTER SET utf8mb4 COLLATE `utf8mb4_unicode_ci` ENGINE = InnoDB
        SQL);
        $this->addSql(<<<'SQL'
            CREATE TABLE conversion (id INT AUTO_INCREMENT NOT NULL, user_id_id INT NOT NULL, points_convertis INT NOT NULL, montant NUMERIC(10, 2) NOT NULL, devise VARCHAR(255) NOT NULL, date DATETIME NOT NULL, INDEX IDX_BD9127449D86650F (user_id_id), PRIMARY KEY(id)) DEFAULT CHARACTER SET utf8mb4 COLLATE `utf8mb4_unicode_ci` ENGINE = InnoDB
        SQL);
        $this->addSql(<<<'SQL'
            CREATE TABLE events (id INT AUTO_INCREMENT NOT NULL, organizer_id_id INT NOT NULL, category_id_id INT NOT NULL, name VARCHAR(255) NOT NULL, description VARCHAR(255) NOT NULL, start_time VARCHAR(255) NOT NULL, end_time VARCHAR(255) NOT NULL, location VARCHAR(255) NOT NULL, image LONGTEXT NOT NULL, points INT NOT NULL, INDEX IDX_5387574AE78C696A (organizer_id_id), INDEX IDX_5387574A9777D11E (category_id_id), PRIMARY KEY(id)) DEFAULT CHARACTER SET utf8mb4 COLLATE `utf8mb4_unicode_ci` ENGINE = InnoDB
        SQL);
        $this->addSql(<<<'SQL'
            CREATE TABLE feed_posts (id INT AUTO_INCREMENT NOT NULL, user_id_id INT NOT NULL, event_id_id INT NOT NULL, content VARCHAR(255) NOT NULL, time_stamp VARCHAR(255) NOT NULL, is_deleted INT DEFAULT NULL, created_at VARCHAR(255) NOT NULL, updated_at VARCHAR(255) NOT NULL, score_popularite INT DEFAULT NULL, image_path VARCHAR(255) NOT NULL, group_id INT DEFAULT NULL, INDEX IDX_7DD2E9469D86650F (user_id_id), INDEX IDX_7DD2E9463E5F2F7B (event_id_id), PRIMARY KEY(id)) DEFAULT CHARACTER SET utf8mb4 COLLATE `utf8mb4_unicode_ci` ENGINE = InnoDB
        SQL);
        $this->addSql(<<<'SQL'
            CREATE TABLE group_feed_posts (id INT AUTO_INCREMENT NOT NULL, group_id_id INT NOT NULL, user_id_id INT NOT NULL, content VARCHAR(255) NOT NULL, timestamp VARCHAR(255) NOT NULL, media_url VARCHAR(255) NOT NULL, is_deleted INT DEFAULT NULL, INDEX IDX_AA1F88F42F68B530 (group_id_id), INDEX IDX_AA1F88F49D86650F (user_id_id), PRIMARY KEY(id)) DEFAULT CHARACTER SET utf8mb4 COLLATE `utf8mb4_unicode_ci` ENGINE = InnoDB
        SQL);
        $this->addSql(<<<'SQL'
            CREATE TABLE group_members (id INT AUTO_INCREMENT NOT NULL, group_it_id INT NOT NULL, user_id_id INT NOT NULL, role VARCHAR(255) NOT NULL, INDEX IDX_C3A086F37F71E2AF (group_it_id), INDEX IDX_C3A086F39D86650F (user_id_id), PRIMARY KEY(id)) DEFAULT CHARACTER SET utf8mb4 COLLATE `utf8mb4_unicode_ci` ENGINE = InnoDB
        SQL);
        $this->addSql(<<<'SQL'
            CREATE TABLE historique_points (id INT AUTO_INCREMENT NOT NULL, user_id_id INT NOT NULL, type VARCHAR(255) NOT NULL, points INT NOT NULL, raison VARCHAR(255) NOT NULL, date DATETIME NOT NULL, INDEX IDX_EEF82E759D86650F (user_id_id), PRIMARY KEY(id)) DEFAULT CHARACTER SET utf8mb4 COLLATE `utf8mb4_unicode_ci` ENGINE = InnoDB
        SQL);
        $this->addSql(<<<'SQL'
            CREATE TABLE jobs (id INT AUTO_INCREMENT NOT NULL, user_id_id INT DEFAULT NULL, event_id_id INT DEFAULT NULL, job_title VARCHAR(255) NOT NULL, event_title VARCHAR(255) DEFAULT NULL, job_location VARCHAR(255) NOT NULL, employment_type VARCHAR(255) NOT NULL, application_dead_line VARCHAR(255) DEFAULT NULL, min_salary INT NOT NULL, max_salary INT NOT NULL, currency VARCHAR(255) NOT NULL, job_descreption VARCHAR(255) NOT NULL, recruiter_name VARCHAR(255) NOT NULL, recruiter_email VARCHAR(255) NOT NULL, created_at VARCHAR(255) DEFAULT NULL, INDEX IDX_A8936DC59D86650F (user_id_id), INDEX IDX_A8936DC53E5F2F7B (event_id_id), PRIMARY KEY(id)) DEFAULT CHARACTER SET utf8mb4 COLLATE `utf8mb4_unicode_ci` ENGINE = InnoDB
        SQL);
        $this->addSql(<<<'SQL'
            CREATE TABLE likes (id INT AUTO_INCREMENT NOT NULL, post_id_id INT NOT NULL, user_id_id INT NOT NULL, time_stamp VARCHAR(255) NOT NULL, INDEX IDX_49CA4E7DE85F12B8 (post_id_id), INDEX IDX_49CA4E7D9D86650F (user_id_id), PRIMARY KEY(id)) DEFAULT CHARACTER SET utf8mb4 COLLATE `utf8mb4_unicode_ci` ENGINE = InnoDB
        SQL);
        $this->addSql(<<<'SQL'
            CREATE TABLE messages (id INT AUTO_INCREMENT NOT NULL, sender_id INT NOT NULL, recipient_id INT NOT NULL, content VARCHAR(255) NOT NULL, timestamp DATETIME NOT NULL, type VARCHAR(255) NOT NULL, read_status INT NOT NULL, PRIMARY KEY(id)) DEFAULT CHARACTER SET utf8mb4 COLLATE `utf8mb4_unicode_ci` ENGINE = InnoDB
        SQL);
        $this->addSql(<<<'SQL'
            CREATE TABLE participation (id INT AUTO_INCREMENT NOT NULL, PRIMARY KEY(id)) DEFAULT CHARACTER SET utf8mb4 COLLATE `utf8mb4_unicode_ci` ENGINE = InnoDB
        SQL);
        $this->addSql(<<<'SQL'
            CREATE TABLE participation_events (participation_id INT NOT NULL, events_id INT NOT NULL, INDEX IDX_29E2D16F6ACE3B73 (participation_id), INDEX IDX_29E2D16F9D6A1065 (events_id), PRIMARY KEY(participation_id, events_id)) DEFAULT CHARACTER SET utf8mb4 COLLATE `utf8mb4_unicode_ci` ENGINE = InnoDB
        SQL);
        $this->addSql(<<<'SQL'
            CREATE TABLE participation_users (participation_id INT NOT NULL, users_id INT NOT NULL, INDEX IDX_1B5F28626ACE3B73 (participation_id), INDEX IDX_1B5F286267B3B43D (users_id), PRIMARY KEY(participation_id, users_id)) DEFAULT CHARACTER SET utf8mb4 COLLATE `utf8mb4_unicode_ci` ENGINE = InnoDB
        SQL);
        $this->addSql(<<<'SQL'
            CREATE TABLE reviews (id INT AUTO_INCREMENT NOT NULL, user_id_id INT NOT NULL, event_id_id INT NOT NULL, rating INT NOT NULL, comment VARCHAR(255) NOT NULL, creatid_at VARCHAR(255) DEFAULT NULL, INDEX IDX_6970EB0F9D86650F (user_id_id), INDEX IDX_6970EB0F3E5F2F7B (event_id_id), PRIMARY KEY(id)) DEFAULT CHARACTER SET utf8mb4 COLLATE `utf8mb4_unicode_ci` ENGINE = InnoDB
        SQL);
        $this->addSql(<<<'SQL'
            CREATE TABLE rewards (id INT AUTO_INCREMENT NOT NULL, action_type VARCHAR(255) NOT NULL, points INT NOT NULL, description VARCHAR(255) NOT NULL, PRIMARY KEY(id)) DEFAULT CHARACTER SET utf8mb4 COLLATE `utf8mb4_unicode_ci` ENGINE = InnoDB
        SQL);
        $this->addSql(<<<'SQL'
            CREATE TABLE roulette (id INT AUTO_INCREMENT NOT NULL, user_id_id INT DEFAULT NULL, points_gagnes INT NOT NULL, date DATETIME NOT NULL, INDEX IDX_D80F9D2E9D86650F (user_id_id), PRIMARY KEY(id)) DEFAULT CHARACTER SET utf8mb4 COLLATE `utf8mb4_unicode_ci` ENGINE = InnoDB
        SQL);
        $this->addSql(<<<'SQL'
            CREATE TABLE shares (id INT AUTO_INCREMENT NOT NULL, post_id_id INT DEFAULT NULL, user_id_id INT DEFAULT NULL, created_at DATETIME DEFAULT NULL, INDEX IDX_905F717CE85F12B8 (post_id_id), INDEX IDX_905F717C9D86650F (user_id_id), PRIMARY KEY(id)) DEFAULT CHARACTER SET utf8mb4 COLLATE `utf8mb4_unicode_ci` ENGINE = InnoDB
        SQL);
        $this->addSql(<<<'SQL'
            CREATE TABLE transaction_argent (id INT AUTO_INCREMENT NOT NULL, PRIMARY KEY(id)) DEFAULT CHARACTER SET utf8mb4 COLLATE `utf8mb4_unicode_ci` ENGINE = InnoDB
        SQL);
        $this->addSql(<<<'SQL'
            CREATE TABLE user_groups (id INT AUTO_INCREMENT NOT NULL, creator_id_id INT NOT NULL, name VARCHAR(255) NOT NULL, description VARCHAR(255) NOT NULL, profile_picture LONGTEXT NOT NULL, rules VARCHAR(255) NOT NULL, created_at VARCHAR(255) NOT NULL, INDEX IDX_953F224DF05788E9 (creator_id_id), PRIMARY KEY(id)) DEFAULT CHARACTER SET utf8mb4 COLLATE `utf8mb4_unicode_ci` ENGINE = InnoDB
        SQL);
        $this->addSql(<<<'SQL'
            CREATE TABLE user_intrests (id INT AUTO_INCREMENT NOT NULL, user_id_id INT DEFAULT NULL, category_id_id INT DEFAULT NULL, INDEX IDX_5A3306759D86650F (user_id_id), INDEX IDX_5A3306759777D11E (category_id_id), PRIMARY KEY(id)) DEFAULT CHARACTER SET utf8mb4 COLLATE `utf8mb4_unicode_ci` ENGINE = InnoDB
        SQL);
        $this->addSql(<<<'SQL'
            CREATE TABLE user_messages (id INT AUTO_INCREMENT NOT NULL, user_id_id INT DEFAULT NULL, sent_at DATETIME DEFAULT NULL, last_message VARCHAR(255) DEFAULT NULL, username VARCHAR(255) NOT NULL, INDEX IDX_3B8FFA969D86650F (user_id_id), PRIMARY KEY(id)) DEFAULT CHARACTER SET utf8mb4 COLLATE `utf8mb4_unicode_ci` ENGINE = InnoDB
        SQL);
        $this->addSql(<<<'SQL'
            CREATE TABLE user_profile (id INT AUTO_INCREMENT NOT NULL, user_id INT NOT NULL, bio VARCHAR(255) NOT NULL, profile_picture VARCHAR(255) NOT NULL, intrests VARCHAR(255) NOT NULL, PRIMARY KEY(id)) DEFAULT CHARACTER SET utf8mb4 COLLATE `utf8mb4_unicode_ci` ENGINE = InnoDB
        SQL);
        $this->addSql(<<<'SQL'
            CREATE TABLE user_rewards (id INT AUTO_INCREMENT NOT NULL, user_id INT NOT NULL, reward_id INT NOT NULL, event_id INT NOT NULL, points_earned INT NOT NULL, erned_at VARCHAR(255) NOT NULL, PRIMARY KEY(id)) DEFAULT CHARACTER SET utf8mb4 COLLATE `utf8mb4_unicode_ci` ENGINE = InnoDB
        SQL);
        $this->addSql(<<<'SQL'
            CREATE TABLE users (id INT AUTO_INCREMENT NOT NULL, username VARCHAR(255) NOT NULL, password VARCHAR(255) NOT NULL, email VARCHAR(255) NOT NULL, created_at VARCHAR(255) DEFAULT NULL, updated_at VARCHAR(255) DEFAULT NULL, points INT DEFAULT NULL, age INT NOT NULL, gender VARCHAR(255) NOT NULL, argent NUMERIC(10, 2) DEFAULT NULL, PRIMARY KEY(id)) DEFAULT CHARACTER SET utf8mb4 COLLATE `utf8mb4_unicode_ci` ENGINE = InnoDB
        SQL);
        $this->addSql(<<<'SQL'
            CREATE TABLE visite_utilisateur (id INT AUTO_INCREMENT NOT NULL, dernier_visite DATE NOT NULL, serie INT NOT NULL, user_id INT NOT NULL, PRIMARY KEY(id)) DEFAULT CHARACTER SET utf8mb4 COLLATE `utf8mb4_unicode_ci` ENGINE = InnoDB
        SQL);
        $this->addSql(<<<'SQL'
            CREATE TABLE worker_raitings (id INT AUTO_INCREMENT NOT NULL, user_id INT NOT NULL, rater_id INT NOT NULL, job_id INT NOT NULL, raiting INT NOT NULL, comment LONGTEXT NOT NULL, created_at DATETIME DEFAULT NULL, PRIMARY KEY(id)) DEFAULT CHARACTER SET utf8mb4 COLLATE `utf8mb4_unicode_ci` ENGINE = InnoDB
        SQL);
        $this->addSql(<<<'SQL'
            CREATE TABLE messenger_messages (id BIGINT AUTO_INCREMENT NOT NULL, body LONGTEXT NOT NULL, headers LONGTEXT NOT NULL, queue_name VARCHAR(190) NOT NULL, created_at DATETIME NOT NULL, available_at DATETIME NOT NULL, delivered_at DATETIME DEFAULT NULL, INDEX IDX_75EA56E0FB7336F0 (queue_name), INDEX IDX_75EA56E0E3BD61CE (available_at), INDEX IDX_75EA56E016BA31DB (delivered_at), PRIMARY KEY(id)) DEFAULT CHARACTER SET utf8mb4 COLLATE `utf8mb4_unicode_ci` ENGINE = InnoDB
        SQL);
        $this->addSql(<<<'SQL'
            ALTER TABLE applications ADD CONSTRAINT FK_F7C966F09D86650F FOREIGN KEY (user_id_id) REFERENCES users (id)
        SQL);
        $this->addSql(<<<'SQL'
            ALTER TABLE applications ADD CONSTRAINT FK_F7C966F0A578C4F9 FOREIGN KEY (enevt_id_id) REFERENCES events (id)
        SQL);
        $this->addSql(<<<'SQL'
            ALTER TABLE applications ADD CONSTRAINT FK_F7C966F07E182327 FOREIGN KEY (job_id_id) REFERENCES jobs (id)
        SQL);
        $this->addSql(<<<'SQL'
            ALTER TABLE comments ADD CONSTRAINT FK_5F9E962AE85F12B8 FOREIGN KEY (post_id_id) REFERENCES feed_posts (id)
        SQL);
        $this->addSql(<<<'SQL'
            ALTER TABLE comments ADD CONSTRAINT FK_5F9E962A9D86650F FOREIGN KEY (user_id_id) REFERENCES users (id)
        SQL);
        $this->addSql(<<<'SQL'
            ALTER TABLE conversion ADD CONSTRAINT FK_BD9127449D86650F FOREIGN KEY (user_id_id) REFERENCES users (id)
        SQL);
        $this->addSql(<<<'SQL'
            ALTER TABLE events ADD CONSTRAINT FK_5387574AE78C696A FOREIGN KEY (organizer_id_id) REFERENCES users (id)
        SQL);
        $this->addSql(<<<'SQL'
            ALTER TABLE events ADD CONSTRAINT FK_5387574A9777D11E FOREIGN KEY (category_id_id) REFERENCES category (id)
        SQL);
        $this->addSql(<<<'SQL'
            ALTER TABLE feed_posts ADD CONSTRAINT FK_7DD2E9469D86650F FOREIGN KEY (user_id_id) REFERENCES users (id)
        SQL);
        $this->addSql(<<<'SQL'
            ALTER TABLE feed_posts ADD CONSTRAINT FK_7DD2E9463E5F2F7B FOREIGN KEY (event_id_id) REFERENCES users (id)
        SQL);
        $this->addSql(<<<'SQL'
            ALTER TABLE group_feed_posts ADD CONSTRAINT FK_AA1F88F42F68B530 FOREIGN KEY (group_id_id) REFERENCES user_groups (id)
        SQL);
        $this->addSql(<<<'SQL'
            ALTER TABLE group_feed_posts ADD CONSTRAINT FK_AA1F88F49D86650F FOREIGN KEY (user_id_id) REFERENCES users (id)
        SQL);
        $this->addSql(<<<'SQL'
            ALTER TABLE group_members ADD CONSTRAINT FK_C3A086F37F71E2AF FOREIGN KEY (group_it_id) REFERENCES user_groups (id)
        SQL);
        $this->addSql(<<<'SQL'
            ALTER TABLE group_members ADD CONSTRAINT FK_C3A086F39D86650F FOREIGN KEY (user_id_id) REFERENCES users (id)
        SQL);
        $this->addSql(<<<'SQL'
            ALTER TABLE historique_points ADD CONSTRAINT FK_EEF82E759D86650F FOREIGN KEY (user_id_id) REFERENCES users (id)
        SQL);
        $this->addSql(<<<'SQL'
            ALTER TABLE jobs ADD CONSTRAINT FK_A8936DC59D86650F FOREIGN KEY (user_id_id) REFERENCES users (id)
        SQL);
        $this->addSql(<<<'SQL'
            ALTER TABLE jobs ADD CONSTRAINT FK_A8936DC53E5F2F7B FOREIGN KEY (event_id_id) REFERENCES events (id)
        SQL);
        $this->addSql(<<<'SQL'
            ALTER TABLE likes ADD CONSTRAINT FK_49CA4E7DE85F12B8 FOREIGN KEY (post_id_id) REFERENCES feed_posts (id)
        SQL);
        $this->addSql(<<<'SQL'
            ALTER TABLE likes ADD CONSTRAINT FK_49CA4E7D9D86650F FOREIGN KEY (user_id_id) REFERENCES users (id)
        SQL);
        $this->addSql(<<<'SQL'
            ALTER TABLE participation_events ADD CONSTRAINT FK_29E2D16F6ACE3B73 FOREIGN KEY (participation_id) REFERENCES participation (id) ON DELETE CASCADE
        SQL);
        $this->addSql(<<<'SQL'
            ALTER TABLE participation_events ADD CONSTRAINT FK_29E2D16F9D6A1065 FOREIGN KEY (events_id) REFERENCES events (id) ON DELETE CASCADE
        SQL);
        $this->addSql(<<<'SQL'
            ALTER TABLE participation_users ADD CONSTRAINT FK_1B5F28626ACE3B73 FOREIGN KEY (participation_id) REFERENCES participation (id) ON DELETE CASCADE
        SQL);
        $this->addSql(<<<'SQL'
            ALTER TABLE participation_users ADD CONSTRAINT FK_1B5F286267B3B43D FOREIGN KEY (users_id) REFERENCES users (id) ON DELETE CASCADE
        SQL);
        $this->addSql(<<<'SQL'
            ALTER TABLE reviews ADD CONSTRAINT FK_6970EB0F9D86650F FOREIGN KEY (user_id_id) REFERENCES users (id)
        SQL);
        $this->addSql(<<<'SQL'
            ALTER TABLE reviews ADD CONSTRAINT FK_6970EB0F3E5F2F7B FOREIGN KEY (event_id_id) REFERENCES events (id)
        SQL);
        $this->addSql(<<<'SQL'
            ALTER TABLE roulette ADD CONSTRAINT FK_D80F9D2E9D86650F FOREIGN KEY (user_id_id) REFERENCES users (id)
        SQL);
        $this->addSql(<<<'SQL'
            ALTER TABLE shares ADD CONSTRAINT FK_905F717CE85F12B8 FOREIGN KEY (post_id_id) REFERENCES feed_posts (id)
        SQL);
        $this->addSql(<<<'SQL'
            ALTER TABLE shares ADD CONSTRAINT FK_905F717C9D86650F FOREIGN KEY (user_id_id) REFERENCES users (id)
        SQL);
        $this->addSql(<<<'SQL'
            ALTER TABLE user_groups ADD CONSTRAINT FK_953F224DF05788E9 FOREIGN KEY (creator_id_id) REFERENCES users (id)
        SQL);
        $this->addSql(<<<'SQL'
            ALTER TABLE user_intrests ADD CONSTRAINT FK_5A3306759D86650F FOREIGN KEY (user_id_id) REFERENCES users (id)
        SQL);
        $this->addSql(<<<'SQL'
            ALTER TABLE user_intrests ADD CONSTRAINT FK_5A3306759777D11E FOREIGN KEY (category_id_id) REFERENCES category (id)
        SQL);
        $this->addSql(<<<'SQL'
            ALTER TABLE user_messages ADD CONSTRAINT FK_3B8FFA969D86650F FOREIGN KEY (user_id_id) REFERENCES users (id)
        SQL);
    }

    public function down(Schema $schema): void
    {
        // this down() migration is auto-generated, please modify it to your needs
        $this->addSql(<<<'SQL'
            ALTER TABLE applications DROP FOREIGN KEY FK_F7C966F09D86650F
        SQL);
        $this->addSql(<<<'SQL'
            ALTER TABLE applications DROP FOREIGN KEY FK_F7C966F0A578C4F9
        SQL);
        $this->addSql(<<<'SQL'
            ALTER TABLE applications DROP FOREIGN KEY FK_F7C966F07E182327
        SQL);
        $this->addSql(<<<'SQL'
            ALTER TABLE comments DROP FOREIGN KEY FK_5F9E962AE85F12B8
        SQL);
        $this->addSql(<<<'SQL'
            ALTER TABLE comments DROP FOREIGN KEY FK_5F9E962A9D86650F
        SQL);
        $this->addSql(<<<'SQL'
            ALTER TABLE conversion DROP FOREIGN KEY FK_BD9127449D86650F
        SQL);
        $this->addSql(<<<'SQL'
            ALTER TABLE events DROP FOREIGN KEY FK_5387574AE78C696A
        SQL);
        $this->addSql(<<<'SQL'
            ALTER TABLE events DROP FOREIGN KEY FK_5387574A9777D11E
        SQL);
        $this->addSql(<<<'SQL'
            ALTER TABLE feed_posts DROP FOREIGN KEY FK_7DD2E9469D86650F
        SQL);
        $this->addSql(<<<'SQL'
            ALTER TABLE feed_posts DROP FOREIGN KEY FK_7DD2E9463E5F2F7B
        SQL);
        $this->addSql(<<<'SQL'
            ALTER TABLE group_feed_posts DROP FOREIGN KEY FK_AA1F88F42F68B530
        SQL);
        $this->addSql(<<<'SQL'
            ALTER TABLE group_feed_posts DROP FOREIGN KEY FK_AA1F88F49D86650F
        SQL);
        $this->addSql(<<<'SQL'
            ALTER TABLE group_members DROP FOREIGN KEY FK_C3A086F37F71E2AF
        SQL);
        $this->addSql(<<<'SQL'
            ALTER TABLE group_members DROP FOREIGN KEY FK_C3A086F39D86650F
        SQL);
        $this->addSql(<<<'SQL'
            ALTER TABLE historique_points DROP FOREIGN KEY FK_EEF82E759D86650F
        SQL);
        $this->addSql(<<<'SQL'
            ALTER TABLE jobs DROP FOREIGN KEY FK_A8936DC59D86650F
        SQL);
        $this->addSql(<<<'SQL'
            ALTER TABLE jobs DROP FOREIGN KEY FK_A8936DC53E5F2F7B
        SQL);
        $this->addSql(<<<'SQL'
            ALTER TABLE likes DROP FOREIGN KEY FK_49CA4E7DE85F12B8
        SQL);
        $this->addSql(<<<'SQL'
            ALTER TABLE likes DROP FOREIGN KEY FK_49CA4E7D9D86650F
        SQL);
        $this->addSql(<<<'SQL'
            ALTER TABLE participation_events DROP FOREIGN KEY FK_29E2D16F6ACE3B73
        SQL);
        $this->addSql(<<<'SQL'
            ALTER TABLE participation_events DROP FOREIGN KEY FK_29E2D16F9D6A1065
        SQL);
        $this->addSql(<<<'SQL'
            ALTER TABLE participation_users DROP FOREIGN KEY FK_1B5F28626ACE3B73
        SQL);
        $this->addSql(<<<'SQL'
            ALTER TABLE participation_users DROP FOREIGN KEY FK_1B5F286267B3B43D
        SQL);
        $this->addSql(<<<'SQL'
            ALTER TABLE reviews DROP FOREIGN KEY FK_6970EB0F9D86650F
        SQL);
        $this->addSql(<<<'SQL'
            ALTER TABLE reviews DROP FOREIGN KEY FK_6970EB0F3E5F2F7B
        SQL);
        $this->addSql(<<<'SQL'
            ALTER TABLE roulette DROP FOREIGN KEY FK_D80F9D2E9D86650F
        SQL);
        $this->addSql(<<<'SQL'
            ALTER TABLE shares DROP FOREIGN KEY FK_905F717CE85F12B8
        SQL);
        $this->addSql(<<<'SQL'
            ALTER TABLE shares DROP FOREIGN KEY FK_905F717C9D86650F
        SQL);
        $this->addSql(<<<'SQL'
            ALTER TABLE user_groups DROP FOREIGN KEY FK_953F224DF05788E9
        SQL);
        $this->addSql(<<<'SQL'
            ALTER TABLE user_intrests DROP FOREIGN KEY FK_5A3306759D86650F
        SQL);
        $this->addSql(<<<'SQL'
            ALTER TABLE user_intrests DROP FOREIGN KEY FK_5A3306759777D11E
        SQL);
        $this->addSql(<<<'SQL'
            ALTER TABLE user_messages DROP FOREIGN KEY FK_3B8FFA969D86650F
        SQL);
        $this->addSql(<<<'SQL'
            DROP TABLE applications
        SQL);
        $this->addSql(<<<'SQL'
            DROP TABLE category
        SQL);
        $this->addSql(<<<'SQL'
            DROP TABLE comments
        SQL);
        $this->addSql(<<<'SQL'
            DROP TABLE conversion
        SQL);
        $this->addSql(<<<'SQL'
            DROP TABLE events
        SQL);
        $this->addSql(<<<'SQL'
            DROP TABLE feed_posts
        SQL);
        $this->addSql(<<<'SQL'
            DROP TABLE group_feed_posts
        SQL);
        $this->addSql(<<<'SQL'
            DROP TABLE group_members
        SQL);
        $this->addSql(<<<'SQL'
            DROP TABLE historique_points
        SQL);
        $this->addSql(<<<'SQL'
            DROP TABLE jobs
        SQL);
        $this->addSql(<<<'SQL'
            DROP TABLE likes
        SQL);
        $this->addSql(<<<'SQL'
            DROP TABLE messages
        SQL);
        $this->addSql(<<<'SQL'
            DROP TABLE participation
        SQL);
        $this->addSql(<<<'SQL'
            DROP TABLE participation_events
        SQL);
        $this->addSql(<<<'SQL'
            DROP TABLE participation_users
        SQL);
        $this->addSql(<<<'SQL'
            DROP TABLE reviews
        SQL);
        $this->addSql(<<<'SQL'
            DROP TABLE rewards
        SQL);
        $this->addSql(<<<'SQL'
            DROP TABLE roulette
        SQL);
        $this->addSql(<<<'SQL'
            DROP TABLE shares
        SQL);
        $this->addSql(<<<'SQL'
            DROP TABLE transaction_argent
        SQL);
        $this->addSql(<<<'SQL'
            DROP TABLE user_groups
        SQL);
        $this->addSql(<<<'SQL'
            DROP TABLE user_intrests
        SQL);
        $this->addSql(<<<'SQL'
            DROP TABLE user_messages
        SQL);
        $this->addSql(<<<'SQL'
            DROP TABLE user_profile
        SQL);
        $this->addSql(<<<'SQL'
            DROP TABLE user_rewards
        SQL);
        $this->addSql(<<<'SQL'
            DROP TABLE users
        SQL);
        $this->addSql(<<<'SQL'
            DROP TABLE visite_utilisateur
        SQL);
        $this->addSql(<<<'SQL'
            DROP TABLE worker_raitings
        SQL);
        $this->addSql(<<<'SQL'
            DROP TABLE messenger_messages
        SQL);
    }
}
</file>

<file path="public/css/auth.css">
.auth-container {
    display: flex;
    min-height: 100vh;
    background-color: #f8f9fa;
}

.auth-form {
    flex: 1;
    padding: 4rem;
    max-width: 500px;
    margin: auto;
}

.auth-illustration {
    flex: 1;
    background-color: #fff;
    display: flex;
    align-items: center;
    justify-content: center;
}

.auth-illustration img {
    max-width: 80%;
    height: 600px;
}

.auth-form h2 {
    font-size: 2rem;
    margin-bottom: 0.5rem;
    color: #333;
}

.auth-subtitle {
    color: #666;
    margin-bottom: 2rem;
}

.form-group {
    margin-bottom: 1.5rem;
}

.form-group label {
    display: block;
    margin-bottom: 0.5rem;
    color: #555;
    font-weight: 500;
}

.form-group input {
    width: 100%;
    padding: 0.75rem;
    border: 1px solid #ddd;
    border-radius: 16px;
    font-size: 1rem;
}

.form-options {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 1.5rem;
}

.remember-me {
    display: flex;
    align-items: center;
}

.remember-me input {
    margin-right: 0.5rem;
}

.forgot-password {
    color: #4e54c8;
    text-decoration: none;
}

.auth-btn {
    width: 100%;
    padding: 0.75rem;
    background-color: #4e54c8;
    color: white;
    border: none;
    border-radius: 50px;
    font-size: 1rem;
    cursor: pointer;
    margin-bottom: 1.5rem;
}

.auth-btn:hover {
    background-color: #4348a8;
}

.auth-redirect {
    text-align: center;
    color: #666;
}

.auth-redirect a {
    color: #4e54c8;
    text-decoration: none;
}

/* Error messages */
.alert-danger {
    color: #721c24;
    background-color: #f8d7da;
    border-color: #f5c6cb;
    padding: 0.75rem 1.25rem;
    margin-bottom: 1rem;
    border-radius: 4px;
}

/* Responsive */
@media (max-width: 768px) {
    .auth-container {
        flex-direction: column;
    }
    
    .auth-illustration {
        background-color:#fff;
        display: none;
    }
    
    .auth-form {
        padding: 2rem;
    }
}
.auth-container .auth-form .form-group{
    margin-bottom: 0.75rem;

}

.auth-container .auth-form .form-group select {
    width: 100%;
    padding: 0.75rem;
    border: 1px solid #ddd;
    border-radius: 16px;
    font-size: 1rem;
    background-color: white;
    appearance: none;
    -webkit-appearance: none;
    -moz-appearance: none; 
    background-image: url("data:image/svg+xml;charset=UTF-8,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2' stroke-linecap='round' stroke-linejoin='round'%3e%3cpolyline points='6 9 12 15 18 9'%3e%3c/polyline%3e%3c/svg%3e");
    background-repeat: no-repeat;
    background-position: right 0.75rem center;
    background-size: 1rem;
    cursor: pointer;
    transition: border-color 0.3s ease;
}

.auth-container .auth-form .form-group select:hover {
    border-color: #a1a1a1;
}

.auth-container .auth-form .form-group select:focus {
    outline: none;
    border-color: #4e54c8;
    box-shadow: 0 0 0 2px rgba(78, 84, 200, 0.2);
}

.auth-container .auth-form .form-group select option {
    padding: 0.5rem;
    background-color: white;
    color: #333;
}

.auth-container .auth-form .form-group select:disabled {
    background-color: #f5f5f5;
    cursor: not-allowed;
}
</file>

<file path="public/css/create_job_form.css">
/* Page background */
body {
    background-color: var(--primary-bg);
    color: var(--text-white);
    font-family: var(--body-font);
    line-height: 1.5;
    overflow-x: hidden;
  }
  
  /* Form container background */
  .create-job-wrapper {
    background-color: var(--secondary-bg); /* Dark background */
    padding: 2rem;
    max-width: 800px;
    margin: 3rem auto;
    border-radius: 12px;
    box-shadow: 0 8px 24px rgba(0, 0, 0, 0.3);
  }
  
  /* Heading */
  .create-job-wrapper h1 {
    font-family: var(--heading-font);
    font-size: 2rem;
    color: var(--text-white);
    margin-bottom: 1.5rem;
    text-align: center;
  }
  
  /* Labels */
  form label {
    display: block;
    font-weight: 600;
    margin-bottom: 0.5rem;
    color: var(--text-white);
  }
  
  /* White input fields */
  form input[type="text"],
  form input[type="email"],
  form input[type="number"],
  form input[type="datetime-local"],
  form textarea,
  form select {
    width: 100%;
    padding: 0.75rem;
    border-radius: 6px;
    border: 1px solid #ccc;
    background-color: #ffffff; /* White input background */
    color: #1a202c;             /* Dark text */
    font-size: 1rem;
    margin-bottom: 1.25rem;
    font-family: var(--body-font);
    transition: border-color 0.3s ease, box-shadow 0.3s ease;
  }
  
  /* Input focus effect */
  form input:focus,
  form textarea:focus,
  form select:focus {
    outline: none;
    border-color: var(--accent);
    box-shadow: 0 0 0 2px rgba(249, 99, 88, 0.2);
  }
  
  /* Textarea specific styles */
  form textarea {
    resize: vertical;
    min-height: 100px;
  }
  
  /* Submit button */
  button.submit-btn {
    display: inline-block;
    background: var(--accent);
    color: var(--text-white);
    padding: 0.8rem 1.6rem;
    border: none;
    border-radius: 6px;
    font-size: 1rem;
    font-weight: 600;
    cursor: pointer;
    transition: background 0.3s ease, transform 0.2s ease;
  }
  
  button.submit-btn:hover {
    background: #e74f49;
    transform: translateY(-2px);
  }
</file>

<file path="public/css/job_feed.css">
/* Job Feed specific styles with sidebar and cards matching screenshots */

/* App Container structure */
.app-container {
  display: flex;
  min-height: 100vh;
  width: 100%;
}

/* Sidebar - styled to match screenshot */
.sidebar {
  width: var(--sidebar-width, 204px);
  background-color: var(--sidebar-bg, #2C3E50);
  position: fixed;
  left: 0;
  top: 0;
  bottom: 0;
  z-index: 999;
  display: flex;
  flex-direction: column;
}

.sidebar-header {
  padding: 1.25rem;
  border-bottom: 1px solid rgba(255, 255, 255, 0.1);
}

.sidebar-logo {
  font-size: 1.35rem;
  font-weight: 700;
  color: white;
  text-decoration: none;
  display: flex;
  align-items: center;
  gap: 10px;
}

.sidebar-logo i {
  color: var(--secondary, #3AAFA9);
  font-size: 1.5rem;
}

.sidebar-nav {
  list-style: none;
  padding: 0;
  margin: 0;
  flex: 1;
}

.sidebar-nav li {
  margin: 0;
}

.sidebar-nav a {
  display: flex;
  align-items: center;
  padding: 0.85rem 1.25rem;
  color: rgba(255, 255, 255, 0.85);
  text-decoration: none;
  transition: all 0.2s ease;
  border-left: 3px solid transparent;
  gap: 12px;
}

.sidebar-nav a:hover {
  background-color: rgba(255, 255, 255, 0.1);
}

.sidebar-nav a.active {
  background-color: rgba(255, 255, 255, 0.07);
  border-left: 3px solid var(--secondary, #3AAFA9);
}

.sidebar-nav a i {
  width: 20px;
  text-align: center;
  font-size: 1.1rem;
  opacity: 0.9;
}

.sidebar-footer {
  padding: 0.75rem 1.25rem;
  border-top: 1px solid rgba(255, 255, 255, 0.1);
  font-size: 0.75rem;
  color: rgba(255, 255, 255, 0.5);
}

/* Main content */
.main-content {
  flex: 1;
  margin-left: var(--sidebar-width, 204px);
  width: calc(100% - var(--sidebar-width, 204px));
  padding: 2rem;
  background-color: #f5f7f9;
}

/* Page Title */
.page-title {
  font-size: 1.75rem;
  margin-bottom: 1.5rem;
  color: var(--primary, #2A5C82);
  font-weight: 600;
}

/* Jobs List */
.jobs-list {
  display: grid;
  grid-template-columns: 1fr;
  gap: 1.5rem;
  margin-top: 1.5rem;
  width: 100%;
}

/* Job Card Styling - updated to match screenshot */
.job-card {
  background-color: white;
  border-radius: 12px;
  box-shadow: 0 1px 8px rgba(0, 0, 0, 0.05);
  overflow: hidden;
  width: 100%;
  padding: 1.5rem;
}

/* Job Title Styling */
.job-title {
  font-size: 1.4rem;
  font-weight: 600;
  color: var(--dark, #2C3E50);
  margin-bottom: 0.3rem;
}

.job-subtitle {
  color: #6c757d;
  margin-bottom: 1.5rem;
  font-size: 0.95rem;
  display: flex;
  align-items: center;
}

.job-subtitle i {
  color: #4a6da7;
  margin-right: 0.5rem;
}

/* Card Content Layout */
.job-card-body {
  display: flex;
  border-top: 1px solid #ebeef2;
  padding-top: 1.5rem;
  margin-top: 0.5rem;
}

.job-left-column {
  flex: 1;
  padding-right: 1.5rem;
  border-right: 1px solid #ebeef2;
}

.job-right-column {
  width: 320px;
  padding-left: 1.5rem;
}

/* Section Headings */
.section-title {
  color: #4a6da7;
  font-size: 1.1rem;
  font-weight: 600;
  margin-bottom: 1.2rem;
  padding-bottom: 0.5rem;
  border-bottom: 2px solid #4a6da7;
}

/* Job Details Styling */
.job-detail-item {
  display: flex;
  margin-bottom: 1rem;
  align-items: flex-start;
}

.job-detail-icon {
  width: 22px;
  height: 22px;
  display: flex;
  align-items: center;
  justify-content: center;
  color: #6c757d;
  margin-right: 0.75rem;
  flex-shrink: 0;
}

.job-detail-label {
  font-weight: 600;
  color: #495057;
  margin-right: 0.5rem;
}

.job-detail-value {
  color: #6c757d;
}

/* Job Description */
.job-description {
  margin-top: 1.5rem; 
}

.job-description-title {
  color: #4a6da7;
  font-size: 1.1rem;
  font-weight: 600;
  margin-bottom: 1rem;
  padding-bottom: 0.5rem;
  border-bottom: 2px solid #4a6da7;
}

.job-description-text {
  color: #6c757d;
  line-height: 1.6;
}

/* Key Information */
.key-info {
  display: flex;
  flex-direction: column;
}

.deadline-info {
  display: flex;
  align-items: flex-start;
  margin-bottom: 1.5rem;
}

.deadline-icon {
  width: 22px;
  height: 22px;
  display: flex;
  align-items: center;
  justify-content: center;
  color: #dc3545;
  margin-right: 0.75rem;
  flex-shrink: 0;
}

.deadline-details {
  display: flex;
  flex-direction: column;
}

.deadline-label {
  font-weight: 600;
  color: #495057;
  margin-bottom: 0.25rem;
}

.deadline-value {
  color: #dc3545;
  font-weight: 600;
}

/* Action Buttons */
.apply-button {
  background-color: #4a6da7;
  color: white;
  border: none;
  border-radius: 6px;
  padding: 0.9rem;
  width: 100%;
  font-weight: 600;
  font-size: 1rem;
  cursor: pointer;
  margin-bottom: 1rem;
  transition: background-color 0.2s ease;
}

.apply-button:hover {
  background-color: #3d5a8e;
}

.share-button {
  background-color: white;
  color: #4a6da7;
  border: 1px solid #dfe3e9;
  border-radius: 6px;
  padding: 0.9rem;
  width: 100%;
  font-weight: 600;
  font-size: 1rem;
  cursor: pointer;
  display: flex;
  align-items: center;
  justify-content: center;
  transition: background-color 0.2s ease;
}

.share-button:hover {
  background-color: #f8f9fa;
}

.share-button i {
  margin-right: 0.5rem;
}

/* Empty state */
.no-jobs {
  width: 100%;  
  text-align: center;
  padding: 3rem;
  background-color: rgba(255, 245, 245, 0.7);
  color: var(--accent, #FF6B6B);
  border-radius: 8px;
  border: 1px solid #ffe3e3;
  font-size: 1.1rem;
}

/* Modal Styling */
.modal {
  position: fixed;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  background-color: rgba(44, 62, 80, 0.7);
  display: flex;
  align-items: center;
  justify-content: center;
  z-index: 1000;
  opacity: 0;
  visibility: hidden;
  transition: all 0.3s ease;
}

.modal.active {
  opacity: 1;
  visibility: visible;
}

.modal-dialog {
  width: 90%;
  max-width: 600px;
  background-color: white;
  border-radius: 8px;
  overflow: hidden;
  box-shadow: 0 10px 30px rgba(0, 0, 0, 0.2);
  transform: translateY(20px);
  transition: transform 0.3s ease;
}

.modal.active .modal-dialog {
  transform: translateY(0);
}

.modal-header {
  padding: 1.25rem;
  background-color: var(--primary, #2A5C82);
  color: white;
  display: flex;
  justify-content: space-between;
  align-items: center;
}

.modal-header h2 {
  font-size: 1.4rem;
  font-weight: 600;
  margin: 0;
}

.close-button {
  background: none;
  border: none;
  color: white;
  font-size: 1.8rem;
  cursor: pointer;
  line-height: 1;
}

.modal-body {
  padding: 2rem 1.5rem;
}

.modal-body label {
  display: block;
  margin-bottom: 0.5rem;
  color: var(--dark, #2C3E50);
  font-weight: 500;
}

.modal-body input[type="file"],
.modal-body textarea {
  width: 100%;
  margin-bottom: 1.5rem;
  padding: 0.8rem;
  border: 1px solid #e2e8f0;
  border-radius: 6px;
  font-family: inherit;
}

.modal-body textarea {
  resize: vertical;
  min-height: 120px;
}

.modal-footer {
  padding: 1rem 1.5rem;
  background-color: #f8f9fa;
  border-top: 1px solid #e2e8f0;
  display: flex;
  justify-content: flex-end;
  gap: 1rem;
}

/* Responsive adjustments */
@media (max-width: 992px) {
  .sidebar {
    transform: translateX(-100%);
  }
  
  .sidebar.active {
    transform: translateX(0);
  }
  
  .main-content {
    margin-left: 0;
    width: 100%;
    padding: 1rem;
  }
  
  .sidebar-toggle {
    display: block;
  }
  
  .job-card-body {
    flex-direction: column;
  }
  
  .job-left-column {
    border-right: none;
    border-bottom: 1px solid #ebeef2;
    padding-right: 0;
    padding-bottom: 1.5rem;
    margin-bottom: 1.5rem;
  }
  
  .job-right-column {
    width: 100%;
    padding-left: 0;
  }
}

@media (max-width: 768px) {
  .job-title {
    font-size: 1.25rem;
  }
  
  .page-title {
    font-size: 1.5rem;
  }
  
  .modal-dialog {
    width: 95%;
  }
}
</file>

<file path="public/css/organizer.css">
/* Modern Color Scheme */
:root {
    --primary: #2A5C82;    /* Deep navy blue */
    --secondary: #3AAFA9;  /* Teal */
    --accent: #FF6B6B;     /* Coral */
    --light: #F8F9FA;      /* Off-white */
    --dark: #2C3E50;       /* Dark slate */
    --text: #4A4A4A;       /* Dark gray */
    --bg-light: #f5f7f9;   /* Very light background */
    --table-header: rgba(42, 92, 130, 0.85); /* Semi-transparent primary */
    --sidebar-width: 250px;
    --sidebar-bg: #2C3E50;
    --sidebar-hover: #34495E;
    --sidebar-active: #1ABC9C;
}

/* Reset and base styles */
* {
    box-sizing: border-box;
    margin: 0;
    padding: 0;
}

html, body {
    height: 100%;
    margin: 0;
    padding: 0;
    font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
    background-color: var(--bg-light);
    color: var(--text);
}

body {
    overflow-x: hidden;
}

/* App container - make sure it wraps the entire layout */
.app-container {
    display: flex;
    min-height: 100vh;
    width: 100%;
}

/* Sidebar */
.sidebar {
    width: var(--sidebar-width);
    background-color: var(--sidebar-bg);
    position: fixed;
    left: 0;
    top: 0;
    bottom: 0;
    z-index: 999;
    box-shadow: 0 0 15px rgba(0, 0, 0, 0.1);
    display: flex;
    flex-direction: column;
}

.sidebar-header {
    padding: 1.5rem;
    border-bottom: 1px solid rgba(255, 255, 255, 0.1);
}

.sidebar-logo {
    font-size: 1.5rem;
    font-weight: 700;
    color: white;
    text-decoration: none;
    display: flex;
    align-items: center;
}

.sidebar-logo i {
    margin-right: 0.75rem;
    color: var(--secondary);
}

.sidebar-nav {
    list-style: none;
    padding: 1rem 0;
    flex: 1;
    overflow-y: auto;
}

.sidebar-nav li {
    margin-bottom: 0.25rem;
}

.sidebar-nav a {
    display: flex;
    align-items: center;
    padding: 0.75rem 1.5rem;
    color: rgba(255, 255, 255, 0.8);
    text-decoration: none;
    transition: all 0.2s ease;
    border-left: 3px solid transparent;
}

.sidebar-nav a:hover {
    background-color: var(--sidebar-hover);
    color: white;
    border-left: 3px solid var(--secondary);
}

.sidebar-nav a.active {
    background-color: rgba(26, 188, 156, 0.15);
    color: white;
    border-left: 3px solid var(--sidebar-active);
}

.sidebar-nav a i {
    width: 20px;
    margin-right: 0.75rem;
    text-align: center;
}

.sidebar-footer {
    padding: 1rem 1.5rem;
    border-top: 1px solid rgba(255, 255, 255, 0.1);
    font-size: 0.8rem;
    color: rgba(255, 255, 255, 0.6);
}

/* Main content */
.main-content {
    flex: 1;
    margin-left: var(--sidebar-width);
    width: calc(100% - var(--sidebar-width));
    transition: margin-left 0.3s ease;
    padding: 2rem;
}

/* Dashboard container */
.dashboard-container {
    max-width: 1200px;
    margin: 0 auto;
    background: rgba(255, 255, 255, 0.9);
    border-radius: 12px;
    box-shadow: 0 4px 20px rgba(0, 0, 0, 0.07);
    padding: 2rem;
    color: var(--dark);
}

h1 {
    color: var(--primary);
    margin-bottom: 1.5rem;
    font-weight: 600;
    border-bottom: 2px solid var(--secondary);
    padding-bottom: 0.75rem;
}

.section-header {
    font-size: 1.6rem;
    color: var(--dark);
    margin: 3rem 0 1.5rem;
    padding-bottom: 0.75rem;
    border-bottom: 3px solid var(--secondary);
    font-weight: 600;
}

.section-header:first-of-type {
    margin-top: 2rem;
}

.table-container {
    margin-bottom: 3.5rem;
    border-radius: 8px;
    overflow: hidden;
    box-shadow: 0 0 20px rgba(0, 0, 0, 0.05);
    background-color: rgba(255, 255, 255, 0.7);
}

.data-table {
    width: 100%;
    border-collapse: collapse;
    background-color: transparent;
}

.data-table th {
    background-color: var(--table-header);
    color: white;
    padding: 1.2rem 1rem;
    font-weight: 500;
    text-transform: uppercase;
    letter-spacing: 0.5px;
    font-size: 0.9rem;
}

.data-table td {
    padding: 1rem;
    color: var(--text);
    background-color: transparent;
    border-bottom: 1px solid rgba(224, 224, 224, 0.5);
}

.data-table tr:nth-child(even) td {
    background-color: rgba(248, 249, 250, 0.5);
}

.data-table tr:hover td {
    background-color: rgba(240, 244, 248, 0.8);
    transition: background-color 0.2s ease;
}

.data-table tr:last-child td {
    border-bottom: none;
}

.no-data {
    text-align: center;
    padding: 2rem;
    background-color: rgba(255, 245, 245, 0.7);
    color: var(--accent);
    border-radius: 8px;
    margin: 1rem 0 3rem;
    border: 1px solid #ffe3e3;
}

.data-table a {
    color: var(--secondary);
    text-decoration: none;
    transition: color 0.2s ease;
}

.data-table a:hover {
    color: var(--primary);
    text-decoration: underline;
}

/* Mobile sidebar toggle */
.sidebar-toggle {
    display: none;
    position: fixed;
    top: 1rem;
    left: 1rem;
    z-index: 1000;
    background-color: var(--primary);
    color: white;
    border: none;
    border-radius: 4px;
    padding: 0.5rem;
    cursor: pointer;
    box-shadow: 0 2px 5px rgba(0, 0, 0, 0.2);
}

/* Responsive adjustments */
@media (max-width: 992px) {
    .sidebar {
        transform: translateX(-100%);
    }
    
    .sidebar.active {
        transform: translateX(0);
    }
    
    .main-content {
        margin-left: 0;
        width: 100%;
        padding: 1rem;
    }
    
    .sidebar-toggle {
        display: block;
    }
}

@media (max-width: 768px) {
    .dashboard-container {
        padding: 1rem;
    }
    
    .data-table th, .data-table td {
        padding: 0.75rem 0.5rem;
        font-size: 0.9rem;
    }
    
    .sidebar {
        width: 75%;
        max-width: 280px;
    }
    
    h1 {
        font-size: 1.5rem;
    }
    
    .section-header {
        font-size: 1.3rem;
    }
}
</file>

<file path="public/index.php">
<?php

use App\Kernel;

require_once dirname(__DIR__).'/vendor/autoload_runtime.php';

return function (array $context) {
    return new Kernel($context['APP_ENV'], (bool) $context['APP_DEBUG']);
};
</file>

<file path="repomix-output.txt">
This file is a merged representation of the entire codebase, combined into a single document by Repomix.

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Files are sorted by Git change count (files with more changes are at the bottom)

Additional Info:
----------------

================================================================
Directory Structure
================================================================
.env.test
.gitignore
bin/console
bin/phpunit
compose.override.yaml
compose.yaml
composer.json
config/bundles.php
config/packages/cache.yaml
config/packages/debug.yaml
config/packages/doctrine_migrations.yaml
config/packages/doctrine.yaml
config/packages/framework.yaml
config/packages/mailer.yaml
config/packages/messenger.yaml
config/packages/monolog.yaml
config/packages/notifier.yaml
config/packages/routing.yaml
config/packages/security.yaml
config/packages/translation.yaml
config/packages/twig.yaml
config/packages/validator.yaml
config/packages/web_profiler.yaml
config/preload.php
config/routes.yaml
config/routes/framework.yaml
config/routes/web_profiler.yaml
config/services.yaml
LICENSE
migrations/Version20250416151753.php
migrations/Version20250416213512.php
phpunit.xml.dist
public/css/create_job_form.css
public/css/root.css
public/index.php
src/Controller/auth/AuthController.php
src/Controller/chatbot/ChatbotController.php
src/Controller/create_job/CreateJobController.php
src/Controller/events/EventsController.php
src/Controller/explore/ExploreController.php
src/Controller/group/GroupController.php
src/Controller/jobapplications/JobApplicationsController.php
src/Controller/jobfeed/JobFeedController.php
src/Controller/organizer/OrganizerController.php
src/Controller/profile/ProfileController.php
src/Controller/RootController.php
src/Controller/social/SocialController.php
src/Entity/Applications.php
src/Entity/Category.php
src/Entity/Comments.php
src/Entity/Conversion.php
src/Entity/Events.php
src/Entity/FeedPosts.php
src/Entity/GroupFeedPosts.php
src/Entity/GroupMembers.php
src/Entity/HistoriquePoints.php
src/Entity/Jobs.php
src/Entity/Likes.php
src/Entity/Messages.php
src/Entity/Participation.php
src/Entity/Reviews.php
src/Entity/Rewards.php
src/Entity/Roulette.php
src/Entity/Shares.php
src/Entity/TransactionArgent.php
src/Entity/UserGroups.php
src/Entity/UserIntrests.php
src/Entity/UserMessages.php
src/Entity/UserProfile.php
src/Entity/UserRewards.php
src/Entity/Users.php
src/Entity/VisiteUtilisateur.php
src/Entity/WorkerRaitings.php
src/Form/CreateJobFormType.php
src/Kernel.php
src/Repository/ApplicationsRepository.php
src/Repository/CategoryRepository.php
src/Repository/CommentsRepository.php
src/Repository/ConversionRepository.php
src/Repository/EventsRepository.php
src/Repository/FeedPostsRepository.php
src/Repository/GroupFeedPostsRepository.php
src/Repository/GroupMembersRepository.php
src/Repository/HistoriquePointsRepository.php
src/Repository/JobsRepository.php
src/Repository/LikesRepository.php
src/Repository/MessagesRepository.php
src/Repository/ParticipationRepository.php
src/Repository/ReviewsRepository.php
src/Repository/RewardsRepository.php
src/Repository/RouletteRepository.php
src/Repository/SharesRepository.php
src/Repository/TransactionArgentRepository.php
src/Repository/UserGroupsRepository.php
src/Repository/UserIntrestsRepository.php
src/Repository/UserMessagesRepository.php
src/Repository/UserProfileRepository.php
src/Repository/UserRewardsRepository.php
src/Repository/UsersRepository.php
src/Repository/VisiteUtilisateurRepository.php
src/Repository/WorkerRaitingsRepository.php
symfony.lock
templates/auth/auth.html.twig
templates/base.html.twig
templates/chatbot/chatbot.html.twig
templates/create_job/createjob.html.twig
templates/events/events.html.twig
templates/explore/explore.html.twig
templates/group/group.html.twig
templates/jobapplications/jobapplications.html.twig
templates/jobfeed/jobfeed.html.twig
templates/organizer/organizer.html.twig
templates/profile/profile.html.twig
templates/social/social.html.twig
tests/bootstrap.php

================================================================
Files
================================================================

================
File: .env.test
================
# define your env variables for the test env here
KERNEL_CLASS='App\Kernel'
APP_SECRET='$ecretf0rt3st'
SYMFONY_DEPRECATIONS_HELPER=999999
PANTHER_APP_ENV=panther
PANTHER_ERROR_SCREENSHOT_DIR=./var/error-screenshots

================
File: .gitignore
================
###> symfony/framework-bundle ###
/.env.local
/.env.local.php
/.env.*.local
/config/secrets/prod/prod.decrypt.private.php
/public/bundles/
/var/
/vendor/
/.env
###< symfony/framework-bundle ###

###> phpunit/phpunit ###
/phpunit.xml
.phpunit.result.cache
###< phpunit/phpunit ###

###> symfony/phpunit-bridge ###
.phpunit.result.cache
/phpunit.xml
###< symfony/phpunit-bridge ###

================
File: bin/console
================
#!/usr/bin/env php
<?php

use App\Kernel;
use Symfony\Bundle\FrameworkBundle\Console\Application;

if (!is_dir(dirname(__DIR__).'/vendor')) {
    throw new LogicException('Dependencies are missing. Try running "composer install".');
}

if (!is_file(dirname(__DIR__).'/vendor/autoload_runtime.php')) {
    throw new LogicException('Symfony Runtime is missing. Try running "composer require symfony/runtime".');
}

require_once dirname(__DIR__).'/vendor/autoload_runtime.php';

return function (array $context) {
    $kernel = new Kernel($context['APP_ENV'], (bool) $context['APP_DEBUG']);

    return new Application($kernel);
};

================
File: bin/phpunit
================
#!/usr/bin/env php
<?php

if (!ini_get('date.timezone')) {
    ini_set('date.timezone', 'UTC');
}

if (is_file(dirname(__DIR__).'/vendor/phpunit/phpunit/phpunit')) {
    if (PHP_VERSION_ID >= 80000) {
        require dirname(__DIR__).'/vendor/phpunit/phpunit/phpunit';
    } else {
        define('PHPUNIT_COMPOSER_INSTALL', dirname(__DIR__).'/vendor/autoload.php');
        require PHPUNIT_COMPOSER_INSTALL;
        PHPUnit\TextUI\Command::main();
    }
} else {
    if (!is_file(dirname(__DIR__).'/vendor/symfony/phpunit-bridge/bin/simple-phpunit.php')) {
        echo "Unable to find the `simple-phpunit.php` script in `vendor/symfony/phpunit-bridge/bin/`.\n";
        exit(1);
    }

    require dirname(__DIR__).'/vendor/symfony/phpunit-bridge/bin/simple-phpunit.php';
}

================
File: compose.override.yaml
================
services:
###> doctrine/doctrine-bundle ###
  database:
    ports:
      - "5432"
###< doctrine/doctrine-bundle ###

###> symfony/mailer ###
  mailer:
    image: axllent/mailpit
    ports:
      - "1025"
      - "8025"
    environment:
      MP_SMTP_AUTH_ACCEPT_ANY: 1
      MP_SMTP_AUTH_ALLOW_INSECURE: 1
###< symfony/mailer ###

================
File: compose.yaml
================
services:
###> doctrine/doctrine-bundle ###
  database:
    image: postgres:${POSTGRES_VERSION:-16}-alpine
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-app}
      # You should definitely change the password in production
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-!ChangeMe!}
      POSTGRES_USER: ${POSTGRES_USER:-app}
    volumes:
      - database_data:/var/lib/postgresql/data:rw
      # You may use a bind-mounted host directory instead, so that it is harder to accidentally remove the volume and lose all your data!
      # - ./docker/db/data:/var/lib/postgresql/data:rw
###< doctrine/doctrine-bundle ###

volumes:
###> doctrine/doctrine-bundle ###
  database_data:
###< doctrine/doctrine-bundle ###

================
File: composer.json
================
{
    "name": "symfony/website-skeleton",
    "type": "project",
    "license": "MIT",
    "description": "A skeleton to start a new Symfony website",
    "minimum-stability": "stable",
    "prefer-stable": true,
    "require": {
        "php": ">=8.1",
        "ext-ctype": "*",
        "ext-iconv": "*",
        "doctrine/dbal": "^3",
        "doctrine/doctrine-bundle": "^2.13",
        "doctrine/doctrine-migrations-bundle": "^3.4",
        "doctrine/orm": "^3.3",
        "phpdocumentor/reflection-docblock": "^5.6",
        "phpstan/phpdoc-parser": "1.22",
        "symfony/asset": "6.1.*",
        "symfony/console": "6.1.*",
        "symfony/doctrine-messenger": "6.1.*",
        "symfony/dotenv": "6.1.*",
        "symfony/expression-language": "6.1.*",
        "symfony/flex": "^2",
        "symfony/form": "6.1.*",
        "symfony/framework-bundle": "6.1.*",
        "symfony/http-client": "6.1.*",
        "symfony/intl": "6.1.*",
        "symfony/mailer": "6.1.*",
        "symfony/mime": "6.1.*",
        "symfony/monolog-bundle": "^3.0",
        "symfony/notifier": "6.1.*",
        "symfony/process": "6.1.*",
        "symfony/property-access": "6.1.*",
        "symfony/property-info": "6.1.*",
        "symfony/runtime": "6.1.*",
        "symfony/security-bundle": "6.1.*",
        "symfony/serializer": "6.1.*",
        "symfony/string": "6.1.*",
        "symfony/translation": "6.1.*",
        "symfony/twig-bundle": "6.1.*",
        "symfony/validator": "6.1.*",
        "symfony/web-link": "6.1.*",
        "symfony/yaml": "6.1.*",
        "twig/extra-bundle": "^2.12|^3.0",
        "twig/twig": "^2.12|^3.0"
    },
    "require-dev": {
        "phpunit/phpunit": "^9.5",
        "symfony/browser-kit": "6.1.*",
        "symfony/css-selector": "6.1.*",
        "symfony/debug-bundle": "6.1.*",
        "symfony/maker-bundle": "^1.50",
        "symfony/phpunit-bridge": "^7.2",
        "symfony/stopwatch": "6.1.*",
        "symfony/web-profiler-bundle": "6.1.*"
    },
    "config": {
        "allow-plugins": {
            "composer/package-versions-deprecated": true,
            "symfony/flex": true,
            "symfony/runtime": true
        },
        "optimize-autoloader": true,
        "preferred-install": {
            "*": "dist"
        },
        "sort-packages": true
    },
    "autoload": {
        "psr-4": {
            "App\\": "src/"
        }
    },
    "autoload-dev": {
        "psr-4": {
            "App\\Tests\\": "tests/"
        }
    },
    "replace": {
        "symfony/polyfill-ctype": "*",
        "symfony/polyfill-iconv": "*",
        "symfony/polyfill-php72": "*",
        "symfony/polyfill-php73": "*",
        "symfony/polyfill-php74": "*",
        "symfony/polyfill-php80": "*",
        "symfony/polyfill-php81": "*"
    },
    "scripts": {
        "auto-scripts": {
            "cache:clear": "symfony-cmd",
            "assets:install %PUBLIC_DIR%": "symfony-cmd"
        },
        "post-install-cmd": [
            "@auto-scripts"
        ],
        "post-update-cmd": [
            "@auto-scripts"
        ]
    },
    "conflict": {
        "symfony/symfony": "*"
    },
    "extra": {
        "symfony": {
            "allow-contrib": false,
            "require": "6.1.*"
        }
    }
}

================
File: config/bundles.php
================
<?php

return [
    Symfony\Bundle\FrameworkBundle\FrameworkBundle::class => ['all' => true],
    Doctrine\Bundle\DoctrineBundle\DoctrineBundle::class => ['all' => true],
    Doctrine\Bundle\MigrationsBundle\DoctrineMigrationsBundle::class => ['all' => true],
    Symfony\Bundle\DebugBundle\DebugBundle::class => ['dev' => true],
    Symfony\Bundle\TwigBundle\TwigBundle::class => ['all' => true],
    Symfony\Bundle\WebProfilerBundle\WebProfilerBundle::class => ['dev' => true, 'test' => true],
    Twig\Extra\TwigExtraBundle\TwigExtraBundle::class => ['all' => true],
    Symfony\Bundle\SecurityBundle\SecurityBundle::class => ['all' => true],
    Symfony\Bundle\MonologBundle\MonologBundle::class => ['all' => true],
    Symfony\Bundle\MakerBundle\MakerBundle::class => ['dev' => true],
];

================
File: config/packages/cache.yaml
================
framework:
    cache:
        # Unique name of your app: used to compute stable namespaces for cache keys.
        #prefix_seed: your_vendor_name/app_name

        # The "app" cache stores to the filesystem by default.
        # The data in this cache should persist between deploys.
        # Other options include:

        # Redis
        #app: cache.adapter.redis
        #default_redis_provider: redis://localhost

        # APCu (not recommended with heavy random-write workloads as memory fragmentation can cause perf issues)
        #app: cache.adapter.apcu

        # Namespaced pools use the above "app" backend by default
        #pools:
            #my.dedicated.cache: null

================
File: config/packages/debug.yaml
================
when@dev:
    debug:
        # Forwards VarDumper Data clones to a centralized server allowing to inspect dumps on CLI or in your browser.
        # See the "server:dump" command to start a new server.
        dump_destination: "tcp://%env(VAR_DUMPER_SERVER)%"

================
File: config/packages/doctrine_migrations.yaml
================
doctrine_migrations:
    migrations_paths:
        # namespace is arbitrary but should be different from App\Migrations
        # as migrations classes should NOT be autoloaded
        'DoctrineMigrations': '%kernel.project_dir%/migrations'
    enable_profiler: false

================
File: config/packages/doctrine.yaml
================
doctrine:
    dbal:
        url: '%env(resolve:DATABASE_URL)%'

        # IMPORTANT: You MUST configure your server version,
        # either here or in the DATABASE_URL env var (see .env file)
        #server_version: '16'
        use_savepoints: true
    orm:
        auto_generate_proxy_classes: true
        naming_strategy: doctrine.orm.naming_strategy.underscore_number_aware
        auto_mapping: true
        mappings:
            App:
                is_bundle: false
                dir: '%kernel.project_dir%/src/Entity'
                prefix: 'App\Entity'
                alias: App

when@test:
    doctrine:
        dbal:
            # "TEST_TOKEN" is typically set by ParaTest
            dbname_suffix: '_test%env(default::TEST_TOKEN)%'

when@prod:
    doctrine:
        orm:
            auto_generate_proxy_classes: false
            proxy_dir: '%kernel.build_dir%/doctrine/orm/Proxies'
            query_cache_driver:
                type: pool
                pool: doctrine.system_cache_pool
            result_cache_driver:
                type: pool
                pool: doctrine.result_cache_pool

    framework:
        cache:
            pools:
                doctrine.result_cache_pool:
                    adapter: cache.app
                doctrine.system_cache_pool:
                    adapter: cache.system

================
File: config/packages/framework.yaml
================
# see https://symfony.com/doc/current/reference/configuration/framework.html
framework:
    secret: '%env(APP_SECRET)%'
    #csrf_protection: true
    http_method_override: false

    # Enables session support. Note that the session will ONLY be started if you read or write from it.
    # Remove or comment this section to explicitly disable session support.
    session:
        handler_id: null
        cookie_secure: auto
        cookie_samesite: lax
        storage_factory_id: session.storage.factory.native

    #esi: true
    #fragments: true
    php_errors:
        log: true

when@test:
    framework:
        test: true
        session:
            storage_factory_id: session.storage.factory.mock_file

================
File: config/packages/mailer.yaml
================
framework:
    mailer:
        dsn: '%env(MAILER_DSN)%'

================
File: config/packages/messenger.yaml
================
framework:
    messenger:
        failure_transport: failed

        transports:
            # https://symfony.com/doc/current/messenger.html#transport-configuration
            async:
                dsn: '%env(MESSENGER_TRANSPORT_DSN)%'
                options:
                    use_notify: true
                    check_delayed_interval: 60000
                retry_strategy:
                    max_retries: 3
                    multiplier: 2
            failed: 'doctrine://default?queue_name=failed'
            # sync: 'sync://'

        default_bus: messenger.bus.default

        buses:
            messenger.bus.default: []

        routing:
            Symfony\Component\Mailer\Messenger\SendEmailMessage: async
            Symfony\Component\Notifier\Message\ChatMessage: async
            Symfony\Component\Notifier\Message\SmsMessage: async

            # Route your messages to the transports
            # 'App\Message\YourMessage': async

================
File: config/packages/monolog.yaml
================
monolog:
    channels:
        - deprecation # Deprecations are logged in the dedicated "deprecation" channel when it exists

when@dev:
    monolog:
        handlers:
            main:
                type: stream
                path: "%kernel.logs_dir%/%kernel.environment%.log"
                level: debug
                channels: ["!event"]
            # uncomment to get logging in your browser
            # you may have to allow bigger header sizes in your Web server configuration
            #firephp:
            #    type: firephp
            #    level: info
            #chromephp:
            #    type: chromephp
            #    level: info
            console:
                type: console
                process_psr_3_messages: false
                channels: ["!event", "!doctrine", "!console"]

when@test:
    monolog:
        handlers:
            main:
                type: fingers_crossed
                action_level: error
                handler: nested
                excluded_http_codes: [404, 405]
                channels: ["!event"]
            nested:
                type: stream
                path: "%kernel.logs_dir%/%kernel.environment%.log"
                level: debug

when@prod:
    monolog:
        handlers:
            main:
                type: fingers_crossed
                action_level: error
                handler: nested
                excluded_http_codes: [404, 405]
                buffer_size: 50 # How many messages should be saved? Prevent memory leaks
            nested:
                type: stream
                path: php://stderr
                level: debug
                formatter: monolog.formatter.json
            console:
                type: console
                process_psr_3_messages: false
                channels: ["!event", "!doctrine"]
            deprecation:
                type: stream
                channels: [deprecation]
                path: php://stderr
                formatter: monolog.formatter.json

================
File: config/packages/notifier.yaml
================
framework:
    notifier:
        chatter_transports:
        texter_transports:
        channel_policy:
            # use chat/slack, chat/telegram, sms/twilio or sms/nexmo
            urgent: ['email']
            high: ['email']
            medium: ['email']
            low: ['email']
        admin_recipients:
            - { email: admin@example.com }

================
File: config/packages/routing.yaml
================
framework:
    router:
        utf8: true

        # Configure how to generate URLs in non-HTTP contexts, such as CLI commands.
        # See https://symfony.com/doc/current/routing.html#generating-urls-in-commands
        #default_uri: http://localhost

when@prod:
    framework:
        router:
            strict_requirements: null

================
File: config/packages/security.yaml
================
security:
    # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords
    password_hashers:
        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'
    # https://symfony.com/doc/current/security.html#loading-the-user-the-user-provider
    providers:
        users_in_memory: { memory: null }
    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        main:
            lazy: true
            provider: users_in_memory
        #anonymous: true
        #security: false # 👈 Allows anonymous access for routes under this firewall

            # activate different ways to authenticate
            # https://symfony.com/doc/current/security.html#the-firewall

            # https://symfony.com/doc/current/security/impersonating_user.html
            # switch_user: true

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
        # - { path: ^/admin, roles: ROLE_ADMIN }
        # - { path: ^/profile, roles: ROLE_USER }
         #- { path: ^/create/job, roles: PUBLIC_ACCESS }

when@test:
    security:
        password_hashers:
            # By default, password hashers are resource intensive and take time. This is
            # important to generate secure password hashes. In tests however, secure hashes
            # are not important, waste resources and increase test times. The following
            # reduces the work factor to the lowest possible values.
            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
                algorithm: auto
                cost: 4 # Lowest possible value for bcrypt
                time_cost: 3 # Lowest possible value for argon
                memory_cost: 10 # Lowest possible value for argon

================
File: config/packages/translation.yaml
================
framework:
    default_locale: en
    translator:
        default_path: '%kernel.project_dir%/translations'
        fallbacks:
            - en
        providers:

================
File: config/packages/twig.yaml
================
twig:
    default_path: '%kernel.project_dir%/templates'

when@test:
    twig:
        strict_variables: true

================
File: config/packages/validator.yaml
================
framework:
    validation:
        email_validation_mode: html5

        # Enables validator auto-mapping support.
        # For instance, basic validation constraints will be inferred from Doctrine's metadata.
        #auto_mapping:
        #    App\Entity\: []

when@test:
    framework:
        validation:
            not_compromised_password: false

================
File: config/packages/web_profiler.yaml
================
when@dev:
    web_profiler:
        toolbar: true

    framework:
        profiler:
            collect_serializer_data: true

when@test:
    framework:
        profiler: { collect: false }

================
File: config/preload.php
================
<?php

if (file_exists(dirname(__DIR__).'/var/cache/prod/App_KernelProdContainer.preload.php')) {
    require dirname(__DIR__).'/var/cache/prod/App_KernelProdContainer.preload.php';
}

================
File: config/routes.yaml
================
controllers:
    resource: ../src/Controller/
    type: attribute

================
File: config/routes/framework.yaml
================
when@dev:
    _errors:
        resource: '@FrameworkBundle/Resources/config/routing/errors.xml'
        prefix: /_error

================
File: config/routes/web_profiler.yaml
================
when@dev:
    web_profiler_wdt:
        resource: '@WebProfilerBundle/Resources/config/routing/wdt.xml'
        prefix: /_wdt

    web_profiler_profiler:
        resource: '@WebProfilerBundle/Resources/config/routing/profiler.xml'
        prefix: /_profiler

================
File: config/services.yaml
================
# This file is the entry point to configure your own services.
# Files in the packages/ subdirectory configure your dependencies.

# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices.html#use-parameters-for-application-configuration
parameters:

services:
    # default configuration for services in *this* file
    _defaults:
        autowire: true      # Automatically injects dependencies in your services.
        autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.

    # makes classes in src/ available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    App\:
        resource: '../src/'
        exclude:
            - '../src/DependencyInjection/'
            - '../src/Entity/'
            - '../src/Kernel.php'

    # add more service definitions when explicit configuration is needed
    # please note that last definitions always *replace* previous ones

================
File: LICENSE
================
Copyright (c) Fabien Potencier

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is furnished
to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.

================
File: migrations/Version20250416151753.php
================
<?php

declare(strict_types=1);

namespace DoctrineMigrations;

use Doctrine\DBAL\Schema\Schema;
use Doctrine\Migrations\AbstractMigration;

/**
 * Auto-generated Migration: Please modify to your needs!
 */
final class Version20250416151753 extends AbstractMigration
{
    public function getDescription(): string
    {
        return '';
    }

    public function up(Schema $schema): void
    {
        // this up() migration is auto-generated, please modify it to your needs
        $this->addSql(<<<'SQL'
            ALTER TABLE events CHANGE points points INT NOT NULL
        SQL);
        $this->addSql(<<<'SQL'
            ALTER TABLE jobs CHANGE user_id_id user_id_id INT DEFAULT NULL
        SQL);
    }

    public function down(Schema $schema): void
    {
        // this down() migration is auto-generated, please modify it to your needs
        $this->addSql(<<<'SQL'
            ALTER TABLE events CHANGE points points INT DEFAULT 0 NOT NULL
        SQL);
        $this->addSql(<<<'SQL'
            ALTER TABLE jobs CHANGE user_id_id user_id_id INT NOT NULL
        SQL);
    }
}

================
File: migrations/Version20250416213512.php
================
<?php

declare(strict_types=1);

namespace DoctrineMigrations;

use Doctrine\DBAL\Schema\Schema;
use Doctrine\Migrations\AbstractMigration;

/**
 * Auto-generated Migration: Please modify to your needs!
 */
final class Version20250416213512 extends AbstractMigration
{
    public function getDescription(): string
    {
        return '';
    }

    public function up(Schema $schema): void
    {
        // this up() migration is auto-generated, please modify it to your needs
        $this->addSql(<<<'SQL'
            ALTER TABLE jobs CHANGE created_at created_at DATETIME DEFAULT NULL
        SQL);
    }

    public function down(Schema $schema): void
    {
        // this down() migration is auto-generated, please modify it to your needs
        $this->addSql(<<<'SQL'
            ALTER TABLE jobs CHANGE created_at created_at VARCHAR(255) DEFAULT NULL
        SQL);
    }
}

================
File: phpunit.xml.dist
================
<?xml version="1.0" encoding="UTF-8"?>

<!-- https://phpunit.readthedocs.io/en/latest/configuration.html -->
<phpunit xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:noNamespaceSchemaLocation="vendor/phpunit/phpunit/phpunit.xsd"
         backupGlobals="false"
         colors="true"
         bootstrap="tests/bootstrap.php"
         convertDeprecationsToExceptions="false"
>
    <php>
        <ini name="display_errors" value="1" />
        <ini name="error_reporting" value="-1" />
        <server name="APP_ENV" value="test" force="true" />
        <server name="SHELL_VERBOSITY" value="-1" />
        <server name="SYMFONY_PHPUNIT_REMOVE" value="" />
        <server name="SYMFONY_PHPUNIT_VERSION" value="9.5" />
    </php>

    <testsuites>
        <testsuite name="Project Test Suite">
            <directory>tests</directory>
        </testsuite>
    </testsuites>

    <coverage processUncoveredFiles="true">
        <include>
            <directory suffix=".php">src</directory>
        </include>
    </coverage>

    <listeners>
        <listener class="Symfony\Bridge\PhpUnit\SymfonyTestsListener" />
    </listeners>

    <extensions>
    </extensions>
</phpunit>

================
File: public/css/create_job_form.css
================
/* Page background */
body {
    background-color: var(--primary-bg);
    color: var(--text-white);
    font-family: var(--body-font);
    line-height: 1.5;
    overflow-x: hidden;
  }
  
  /* Form container background */
  .create-job-wrapper {
    background-color: var(--secondary-bg); /* Dark background */
    padding: 2rem;
    max-width: 800px;
    margin: 3rem auto;
    border-radius: 12px;
    box-shadow: 0 8px 24px rgba(0, 0, 0, 0.3);
  }
  
  /* Heading */
  .create-job-wrapper h1 {
    font-family: var(--heading-font);
    font-size: 2rem;
    color: var(--text-white);
    margin-bottom: 1.5rem;
    text-align: center;
  }
  
  /* Labels */
  form label {
    display: block;
    font-weight: 600;
    margin-bottom: 0.5rem;
    color: var(--text-white);
  }
  
  /* White input fields */
  form input[type="text"],
  form input[type="email"],
  form input[type="number"],
  form input[type="datetime-local"],
  form textarea,
  form select {
    width: 100%;
    padding: 0.75rem;
    border-radius: 6px;
    border: 1px solid #ccc;
    background-color: #ffffff; /* White input background */
    color: #1a202c;             /* Dark text */
    font-size: 1rem;
    margin-bottom: 1.25rem;
    font-family: var(--body-font);
    transition: border-color 0.3s ease, box-shadow 0.3s ease;
  }
  
  /* Input focus effect */
  form input:focus,
  form textarea:focus,
  form select:focus {
    outline: none;
    border-color: var(--accent);
    box-shadow: 0 0 0 2px rgba(249, 99, 88, 0.2);
  }
  
  /* Textarea specific styles */
  form textarea {
    resize: vertical;
    min-height: 100px;
  }
  
  /* Submit button */
  button.submit-btn {
    display: inline-block;
    background: var(--accent);
    color: var(--text-white);
    padding: 0.8rem 1.6rem;
    border: none;
    border-radius: 6px;
    font-size: 1rem;
    font-weight: 600;
    cursor: pointer;
    transition: background 0.3s ease, transform 0.2s ease;
  }
  
  button.submit-btn:hover {
    background: #e74f49;
    transform: translateY(-2px);
  }

================
File: public/css/root.css
================
:root {
    /* Dark Modern Palette */
    --primary-bg: #0A0F1C; /* Very dark navy */
    --secondary-bg: #1B2232; /* Slightly lighter dark background */
    --accent: #F96358;       /* Vibrant orange-red for calls to action */
    --text-white: #FFFFFF;
    --text-muted: #A0AEC0;   /* Soft gray for muted text */
    --heading-font: 'Poppins', sans-serif; /* or your preferred heading font */
    --body-font: 'Poppins', sans-serif;    /* or your preferred body font */
    
    --container-max-width: 1200px;
  }
  
  /* Reset & Base */
  * {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
  }
  
  body {
    background-color: var(--primary-bg);
    color: var(--text-white);
    font-family: var(--body-font);
    line-height: 1.5;
    overflow-x: hidden;
  }
  
  /* Header */
  .header {
    background-color: var(--secondary-bg);
    padding: 1rem 2rem;
  }
  
  .nav-container {
    display: flex;
    justify-content: space-between;
    align-items: center;
    max-width: var(--container-max-width);
    margin: 0 auto;
  }
  
  .logo-img {
    height: 40px;
    width: auto;
    transition: transform 0.3s ease;
  }
  
  .logo-img:hover {
    transform: scale(1.05);
  }
  
  .nav-links {
    display: flex;
    align-items: center;
    gap: 1.5rem;
  }
  
  .nav-link {
    color: var(--text-white);
    text-decoration: none;
    font-weight: 500;
    transition: color 0.3s ease;
  }
  
  .nav-link:hover {
    color: var(--accent);
  }
  
  .contact-btn {
    background: var(--accent);
    color: var(--text-white);
    padding: 0.7rem 1.2rem;
    border-radius: 4px;
    font-weight: 600;
    transition: all 0.3s ease;
  }
  
  .contact-btn:hover {
    background: #e74f49; /* slightly darker shade for hover */
    transform: translateY(-2px);
  }
  
  /* Hero Section
     -----------------------------------------
     Suggested HTML structure for your hero:
     <section class="hero">
       <div class="hero-content">
         <div class="hero-text">
           <h1>...</h1>
           <p>...</p>
           <a href="#" class="cta-btn">Get Started</a>
         </div>
         <div class="hero-illustration">
           <img src="path-to-hero-image.png" alt="Hero Illustration">
         </div>
       </div>
     </section>
  */
  .hero {
    padding: 4rem 2rem;
    position: relative;
    background-color: var(--primary-bg);
  }
  
  .hero-content {
    max-width: var(--container-max-width);
    margin: 0 auto;
    display: grid;
    grid-template-columns: 1fr 1fr; /* text on left, image on right */
    align-items: center;
    gap: 2rem;
  }
  
  .hero-text h1 {
    font-family: var(--heading-font);
    font-size: 2.5rem;
    margin-bottom: 1rem;
    line-height: 1.2;
  }
  
  .hero-text p {
    color: var(--text-muted);
    margin-bottom: 2rem;
    font-size: 1.1rem;
  }
  
  .cta-btn {
    display: inline-block;
    background: var(--accent);
    color: var(--text-white);
    padding: 0.8rem 1.6rem;
    border-radius: 4px;
    font-weight: 600;
    transition: all 0.3s ease;
    text-decoration: none;
  }
  
  .cta-btn:hover {
    background: #e74f49;
    transform: translateY(-2px);
  }
  
  .hero-illustration img {
    width: 100%;
    height: auto;
    display: block;
  }
  
  /* Example sub-section
     -----------------------------------------
     This could be for “How It Works” or “What Happens Next” 
     with large headings, big icons/illustrations, etc.
  */
  .section {
    padding: 4rem 2rem;
    max-width: var(--container-max-width);
    margin: 0 auto;
  }
  
  .section-title {
    font-size: 2rem;
    margin-bottom: 1.5rem;
    text-align: center;
  }
  
  .section-subtitle {
    text-align: center;
    color: var(--text-muted);
    margin-bottom: 3rem;
    max-width: 700px;
    margin-left: auto;
    margin-right: auto;
  }
  
  /* Example content layout (cards, steps, etc.) */
  .cards-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));
    gap: 2rem;
  }
  
  .card {
    background-color: var(--secondary-bg);
    border-radius: 8px;
    padding: 2rem;
    transition: transform 0.3s ease;
  }
  
  .card:hover {
    transform: translateY(-5px);
  }
  
  .card h3 {
    font-size: 1.25rem;
    margin-bottom: 0.75rem;
  }
  
  .card p {
    color: var(--text-muted);
  }
  
  /* Footer */
  .footer {
    background-color: var(--secondary-bg);
    padding: 2rem;
    text-align: center;
    margin-top: 4rem;
  }
  
  /* Responsive Adjustments */
  @media (max-width: 768px) {
    .hero-content {
      grid-template-columns: 1fr;
      text-align: center;
    }
    
    .hero-illustration {
      margin-top: 2rem;
    }
  
    .nav-links {
      display: none; /* For a hamburger menu, you'd handle it separately */
    }
  }

================
File: public/index.php
================
<?php

use App\Kernel;

require_once dirname(__DIR__).'/vendor/autoload_runtime.php';

return function (array $context) {
    return new Kernel($context['APP_ENV'], (bool) $context['APP_DEBUG']);
};

================
File: src/Controller/auth/AuthController.php
================
<?php

namespace App\Controller\auth;

use Symfony\Bundle\FrameworkBundle\Controller\AbstractController;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\Routing\Annotation\Route;

class AuthController extends AbstractController
{
    #[Route('/auth', name: 'app_auth')]
    public function index(): Response
    {
        return $this->render('auth/auth.html.twig', [
            'controller_name' => 'AuthController',
        ]);
    }
}

================
File: src/Controller/chatbot/ChatbotController.php
================
<?php

namespace App\Controller\chatbot;

use Symfony\Bundle\FrameworkBundle\Controller\AbstractController;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\Routing\Annotation\Route;

class ChatbotController extends AbstractController
{
    #[Route('/chatbot', name: 'app_chatbot')]
    public function index(): Response
    {
        return $this->render('chatbot/chatbot.html.twig', [
            'controller_name' => 'ChatbotController',
        ]);
    }
}

================
File: src/Controller/create_job/CreateJobController.php
================
<?php

namespace App\Controller\create_job;

use App\Entity\Jobs;
use App\Form\CreateJobFormType;
use Doctrine\ORM\EntityManagerInterface;
use Symfony\Bundle\FrameworkBundle\Controller\AbstractController;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\Routing\Annotation\Route;

// class CreateJobController extends AbstractController
// {
//     #[Route('/create/job', name: 'app_create_job')]
//     public function index(Request $request, EntityManagerInterface $entityManager): Response
//     {
//         $job = new Jobs();
//         $form = $this->createForm(CreateJobFormType::class, $job);

//         $form->handleRequest($request);

//         if ($form->isSubmitted() && $form->isValid()) {
//             $user = $this->getUser(); // currently authenticated user
//             if (!$user) {
//                 throw $this->createAccessDeniedException('You must be logged in.');
//             }
//             $job->setUserId($user instanceof \App\Entity\Users ? $user : null); // set the user who created the job
            
//             $entityManager->persist($job);
//             $entityManager->flush();

//             // You can redirect to a success page or back to the form
//             return $this->redirectToRoute('app-root');
//         }

//         return $this->render('create_job/root.html.twig', [
//             'form' => $form->createView(),
//         ]);
//     }
// }

namespace App\Controller\create_job;

use App\Entity\Jobs;
use App\Form\CreateJobFormType;
use Doctrine\ORM\EntityManagerInterface;
use Symfony\Bundle\FrameworkBundle\Controller\AbstractController;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\Routing\Annotation\Route;

class CreateJobController extends AbstractController
{
    #[Route('/create/job', name: 'app_create_job')]
    public function index(Request $request, EntityManagerInterface $entityManager): Response
    {
        $job = new Jobs();
        $form = $this->createForm(CreateJobFormType::class, $job);

        $form->handleRequest($request);

        if ($form->isSubmitted() && $form->isValid()) {
            $entityManager->persist($job);
            $entityManager->flush();

            // You can redirect to a success page or back to the form
            return $this->redirectToRoute('app_create_job');
        }

        return $this->render('create_job/createjob.html.twig', [
            'form' => $form->createView(),
        ]);
    }
}

================
File: src/Controller/events/EventsController.php
================
<?php

namespace App\Controller\events;

use Symfony\Bundle\FrameworkBundle\Controller\AbstractController;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\Routing\Annotation\Route;

class EventsController extends AbstractController
{
    #[Route('/events', name: 'app_events')]
    public function index(): Response
    {
        return $this->render('events/events.html.twig', [
            'controller_name' => 'EventsController',
        ]);
    }
}

================
File: src/Controller/explore/ExploreController.php
================
<?php

namespace App\Controller\explore;

use Symfony\Bundle\FrameworkBundle\Controller\AbstractController;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\Routing\Annotation\Route;

class ExploreController extends AbstractController
{
    #[Route('/explore', name: 'app_explore')]
    public function index(): Response
    {
        return $this->render('explore/explore.html.twig', [
            'controller_name' => 'ExploreController',
        ]);
    }
}

================
File: src/Controller/group/GroupController.php
================
<?php

namespace App\Controller\group;

use Symfony\Bundle\FrameworkBundle\Controller\AbstractController;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\Routing\Annotation\Route;

class GroupController extends AbstractController
{
    #[Route('/group', name: 'app_group')]
    public function index(): Response
    {
        return $this->render('group/group.html.twig', [
            'controller_name' => 'GroupController',
        ]);
    }
}

================
File: src/Controller/jobapplications/JobApplicationsController.php
================
<?php

namespace App\Controller\jobapplications;

use Symfony\Bundle\FrameworkBundle\Controller\AbstractController;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\Routing\Annotation\Route;

class JobApplicationsController extends AbstractController
{
    #[Route('/job/applications', name: 'app_job_applications')]
    public function index(): Response
    {
        return $this->render('jobapplications/jobapplications.html.twig', [
            'controller_name' => 'JobApplicationsController',
        ]);
    }
}

================
File: src/Controller/jobfeed/JobFeedController.php
================
<?php

namespace App\Controller\jobfeed;

use App\Repository\JobsRepository;
use Symfony\Bundle\FrameworkBundle\Controller\AbstractController;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\Routing\Annotation\Route;

class JobFeedController extends AbstractController
{
    #[Route('/job/feed', name: 'app_job_feed')]
    public function index(JobsRepository $jobsRepository): Response
    {
        // Using the specific sorting method
        $jobs = $jobsRepository->findAllSortedByTitle();

        // Or using the generic sorting method:
        // $jobs = $jobsRepository->findAllWithSorting('jobTitle', 'ASC');
       

        return $this->render('jobfeed/jobFeed.html.twig', [
            'jobs' => $jobs,
        ]);
    }
}

================
File: src/Controller/organizer/OrganizerController.php
================
<?php

namespace App\Controller\organizer;

use Symfony\Bundle\FrameworkBundle\Controller\AbstractController;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\Routing\Annotation\Route;

class OrganizerController extends AbstractController
{
    #[Route('/organizer', name: 'app_organizer')]
    public function index(): Response
    {
        return $this->render('organizer/organizer.html.twig', [
            'controller_name' => 'OrganizerController',
        ]);
    }
}

================
File: src/Controller/profile/ProfileController.php
================
<?php

namespace App\Controller\profile;

use Symfony\Bundle\FrameworkBundle\Controller\AbstractController;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\Routing\Annotation\Route;

class ProfileController extends AbstractController
{
    #[Route('/profile', name: 'app_profile')]
    public function index(): Response
    {
        return $this->render('profile/profile.html.twig', [
            'controller_name' => 'ProfileController',
        ]);
    }
}

================
File: src/Controller/RootController.php
================
<?php

namespace App\Controller;

use Symfony\Bundle\FrameworkBundle\Controller\AbstractController;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\Routing\Annotation\Route;

class RootController extends AbstractController
{
    #[Route('', name: 'app-root')]
    public function index(): Response
    {
        return $this->render('base.html.twig');
    }
}

================
File: src/Controller/social/SocialController.php
================
<?php

namespace App\Controller\social;

use Symfony\Bundle\FrameworkBundle\Controller\AbstractController;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\Routing\Annotation\Route;

class SocialController extends AbstractController
{
    #[Route('/social', name: 'app_social')]
    public function index(): Response
    {
        return $this->render('social/social.html.twig', [
            'controller_name' => 'SocialController',
        ]);
    }
}

================
File: src/Entity/Applications.php
================
<?php

namespace App\Entity;

use App\Repository\ApplicationsRepository;
use Doctrine\ORM\Mapping as ORM;

#[ORM\Entity(repositoryClass: ApplicationsRepository::class)]
class Applications
{
    #[ORM\Id]
    #[ORM\GeneratedValue]
    #[ORM\Column]
    private ?int $id = null;

    #[ORM\ManyToOne]
    #[ORM\JoinColumn(nullable: false)]
    private ?Users $user_id = null;

    #[ORM\ManyToOne]
    #[ORM\JoinColumn(nullable: false)]
    private ?Events $enevt_id = null;

    #[ORM\ManyToOne]
    #[ORM\JoinColumn(nullable: false)]
    private ?Jobs $job_id = null;

    #[ORM\Column(length: 255)]
    private ?string $status = null;

    #[ORM\Column(length: 255, nullable: true)]
    private ?string $appliedAt = null;

    #[ORM\Column(nullable: true)]
    private ?int $rewarded = null;

    #[ORM\Column(length: 255)]
    private ?string $cover_letter = null;

    #[ORM\Column(length: 255)]
    private ?string $resume_path = null;

    #[ORM\Column(nullable: true)]
    private ?int $coverRating = null;

    public function getId(): ?int
    {
        return $this->id;
    }

    public function getUserId(): ?Users
    {
        return $this->user_id;
    }

    public function setUserId(?Users $user_id): static
    {
        $this->user_id = $user_id;

        return $this;
    }

    public function getEnevtId(): ?Events
    {
        return $this->enevt_id;
    }

    public function setEnevtId(?Events $enevt_id): static
    {
        $this->enevt_id = $enevt_id;

        return $this;
    }

    public function getJobId(): ?Jobs
    {
        return $this->job_id;
    }

    public function setJobId(?Jobs $job_id): static
    {
        $this->job_id = $job_id;

        return $this;
    }

    public function getStatus(): ?string
    {
        return $this->status;
    }

    public function setStatus(string $status): static
    {
        $this->status = $status;

        return $this;
    }

    public function getAppliedAt(): ?string
    {
        return $this->appliedAt;
    }

    public function setAppliedAt(?string $appliedAt): static
    {
        $this->appliedAt = $appliedAt;

        return $this;
    }

    public function getRewarded(): ?int
    {
        return $this->rewarded;
    }

    public function setRewarded(?int $rewarded): static
    {
        $this->rewarded = $rewarded;

        return $this;
    }

    public function getCoverLetter(): ?string
    {
        return $this->cover_letter;
    }

    public function setCoverLetter(string $cover_letter): static
    {
        $this->cover_letter = $cover_letter;

        return $this;
    }

    public function getResumePath(): ?string
    {
        return $this->resume_path;
    }

    public function setResumePath(string $resume_path): static
    {
        $this->resume_path = $resume_path;

        return $this;
    }

    public function getCoverRating(): ?int
    {
        return $this->coverRating;
    }

    public function setCoverRating(?int $coverRating): static
    {
        $this->coverRating = $coverRating;

        return $this;
    }
}

================
File: src/Entity/Category.php
================
<?php

namespace App\Entity;

use App\Repository\CategoryRepository;
use Doctrine\ORM\Mapping as ORM;

#[ORM\Entity(repositoryClass: CategoryRepository::class)]
class Category
{
    #[ORM\Id]
    #[ORM\GeneratedValue]
    #[ORM\Column]
    private ?int $id = null;

    #[ORM\Column(length: 255)]
    private ?string $name = null;

    public function getId(): ?int
    {
        return $this->id;
    }

    public function getName(): ?string
    {
        return $this->name;
    }

    public function setName(string $name): static
    {
        $this->name = $name;

        return $this;
    }
}

================
File: src/Entity/Comments.php
================
<?php

namespace App\Entity;

use App\Repository\CommentsRepository;
use Doctrine\ORM\Mapping as ORM;

#[ORM\Entity(repositoryClass: CommentsRepository::class)]
class Comments
{
    #[ORM\Id]
    #[ORM\GeneratedValue]
    #[ORM\Column]
    private ?int $id = null;

    #[ORM\ManyToOne]
    #[ORM\JoinColumn(nullable: false)]
    private ?FeedPosts $postId = null;

    #[ORM\ManyToOne]
    #[ORM\JoinColumn(nullable: false)]
    private ?Users $user_id = null;

    #[ORM\Column(length: 255)]
    private ?string $content = null;

    #[ORM\Column(length: 255)]
    private ?string $timeStamp = null;

    #[ORM\Column(nullable: true)]
    private ?int $isDeleted = null;

    public function getId(): ?int
    {
        return $this->id;
    }

    public function getPostId(): ?FeedPosts
    {
        return $this->postId;
    }

    public function setPostId(?FeedPosts $postId): static
    {
        $this->postId = $postId;

        return $this;
    }

    public function getUserId(): ?Users
    {
        return $this->user_id;
    }

    public function setUserId(?Users $user_id): static
    {
        $this->user_id = $user_id;

        return $this;
    }

    public function getContent(): ?string
    {
        return $this->content;
    }

    public function setContent(string $content): static
    {
        $this->content = $content;

        return $this;
    }

    public function getTimeStamp(): ?string
    {
        return $this->timeStamp;
    }

    public function setTimeStamp(string $timeStamp): static
    {
        $this->timeStamp = $timeStamp;

        return $this;
    }

    public function getIsDeleted(): ?int
    {
        return $this->isDeleted;
    }

    public function setIsDeleted(?int $isDeleted): static
    {
        $this->isDeleted = $isDeleted;

        return $this;
    }
}

================
File: src/Entity/Conversion.php
================
<?php

namespace App\Entity;

use App\Repository\ConversionRepository;
use Doctrine\DBAL\Types\Types;
use Doctrine\ORM\Mapping as ORM;

#[ORM\Entity(repositoryClass: ConversionRepository::class)]
class Conversion
{
    #[ORM\Id]
    #[ORM\GeneratedValue]
    #[ORM\Column]
    private ?int $id = null;

    #[ORM\ManyToOne(inversedBy: 'conversions')]
    #[ORM\JoinColumn(nullable: false)]
    private ?Users $userId = null;

    #[ORM\Column]
    private ?int $pointsConvertis = null;

    #[ORM\Column(type: Types::DECIMAL, precision: 10, scale: 2)]
    private ?string $montant = null;

    #[ORM\Column(length: 255)]
    private ?string $devise = null;

    #[ORM\Column(type: Types::DATETIME_MUTABLE)]
    private ?\DateTimeInterface $date = null;

    public function getId(): ?int
    {
        return $this->id;
    }

    public function getUserId(): ?Users
    {
        return $this->userId;
    }

    public function setUserId(?Users $userId): static
    {
        $this->userId = $userId;

        return $this;
    }

    public function getPointsConvertis(): ?int
    {
        return $this->pointsConvertis;
    }

    public function setPointsConvertis(int $pointsConvertis): static
    {
        $this->pointsConvertis = $pointsConvertis;

        return $this;
    }

    public function getMontant(): ?string
    {
        return $this->montant;
    }

    public function setMontant(string $montant): static
    {
        $this->montant = $montant;

        return $this;
    }

    public function getDevise(): ?string
    {
        return $this->devise;
    }

    public function setDevise(string $devise): static
    {
        $this->devise = $devise;

        return $this;
    }

    public function getDate(): ?\DateTimeInterface
    {
        return $this->date;
    }

    public function setDate(\DateTimeInterface $date): static
    {
        $this->date = $date;

        return $this;
    }
}

================
File: src/Entity/Events.php
================
<?php

namespace App\Entity;

use App\Repository\EventsRepository;
use Doctrine\DBAL\Types\Types;
use Doctrine\ORM\Mapping as ORM;

#[ORM\Entity(repositoryClass: EventsRepository::class)]
class Events
{
    #[ORM\Id]
    #[ORM\GeneratedValue]
    #[ORM\Column]
    private ?int $id = null;

    #[ORM\Column(length: 255)]
    private ?string $name = null;

    #[ORM\Column(length: 255)]
    private ?string $description = null;

    #[ORM\Column(length: 255)]
    private ?string $startTime = null;

    #[ORM\Column(length: 255)]
    private ?string $endTime = null;

    #[ORM\Column(length: 255)]
    private ?string $location = null;

    #[ORM\ManyToOne(inversedBy: 'events')]
    #[ORM\JoinColumn(nullable: false)]
    private ?Users $organizerId = null;

    #[ORM\ManyToOne]
    #[ORM\JoinColumn(nullable: false)]
    private ?Category $categoryId = null;

    #[ORM\Column(type: Types::TEXT)]
    private ?string $image = null;

    #[ORM\Column]
    private ?int $points = null;

    public function getId(): ?int
    {
        return $this->id;
    }

    public function getName(): ?string
    {
        return $this->name;
    }

    public function setName(string $name): static
    {
        $this->name = $name;

        return $this;
    }

    public function getDescription(): ?string
    {
        return $this->description;
    }

    public function setDescription(string $description): static
    {
        $this->description = $description;

        return $this;
    }

    public function getStartTime(): ?string
    {
        return $this->startTime;
    }

    public function setStartTime(string $startTime): static
    {
        $this->startTime = $startTime;

        return $this;
    }

    public function getEndTime(): ?string
    {
        return $this->endTime;
    }

    public function setEndTime(string $endTime): static
    {
        $this->endTime = $endTime;

        return $this;
    }

    public function getLocation(): ?string
    {
        return $this->location;
    }

    public function setLocation(string $location): static
    {
        $this->location = $location;

        return $this;
    }

    public function getOrganizerId(): ?Users
    {
        return $this->organizerId;
    }

    public function setOrganizerId(?Users $organizerId): static
    {
        $this->organizerId = $organizerId;

        return $this;
    }

    public function getCategoryId(): ?Category
    {
        return $this->categoryId;
    }

    public function setCategoryId(?Category $categoryId): static
    {
        $this->categoryId = $categoryId;

        return $this;
    }

    public function getImage(): ?string
    {
        return $this->image;
    }

    public function setImage(string $image): static
    {
        $this->image = $image;

        return $this;
    }

    public function getPoints(): ?int
    {
        return $this->points;
    }

    public function setPoints(int $points): static
    {
        $this->points = $points;

        return $this;
    }
}

================
File: src/Entity/FeedPosts.php
================
<?php

namespace App\Entity;

use App\Repository\FeedPostsRepository;
use Doctrine\ORM\Mapping as ORM;

#[ORM\Entity(repositoryClass: FeedPostsRepository::class)]
class FeedPosts
{
    #[ORM\Id]
    #[ORM\GeneratedValue]
    #[ORM\Column]
    private ?int $id = null;

    #[ORM\ManyToOne]
    #[ORM\JoinColumn(nullable: false)]
    private ?Users $userId = null;

    #[ORM\Column(length: 255)]
    private ?string $content = null;

    #[ORM\Column(length: 255)]
    private ?string $timeStamp = null;

    #[ORM\ManyToOne]
    #[ORM\JoinColumn(nullable: false)]
    private ?Users $eventId = null;

    #[ORM\Column(nullable: true)]
    private ?int $isDeleted = null;

    #[ORM\Column(length: 255)]
    private ?string $createdAt = null;

    #[ORM\Column(length: 255)]
    private ?string $updatedAt = null;

    #[ORM\Column(nullable: true)]
    private ?int $scorePopularite = null;

    #[ORM\Column(length: 255)]
    private ?string $imagePath = null;

    #[ORM\Column(nullable: true)]
    private ?int $groupId = null;

    public function getId(): ?int
    {
        return $this->id;
    }

    public function getUserId(): ?Users
    {
        return $this->userId;
    }

    public function setUserId(?Users $userId): static
    {
        $this->userId = $userId;

        return $this;
    }

    public function getContent(): ?string
    {
        return $this->content;
    }

    public function setContent(string $content): static
    {
        $this->content = $content;

        return $this;
    }

    public function getTimeStamp(): ?string
    {
        return $this->timeStamp;
    }

    public function setTimeStamp(string $timeStamp): static
    {
        $this->timeStamp = $timeStamp;

        return $this;
    }

    public function getEventId(): ?Users
    {
        return $this->eventId;
    }

    public function setEventId(?Users $eventId): static
    {
        $this->eventId = $eventId;

        return $this;
    }

    public function getIsDeleted(): ?int
    {
        return $this->isDeleted;
    }

    public function setIsDeleted(?int $isDeleted): static
    {
        $this->isDeleted = $isDeleted;

        return $this;
    }

    public function getCreatedAt(): ?string
    {
        return $this->createdAt;
    }

    public function setCreatedAt(string $createdAt): static
    {
        $this->createdAt = $createdAt;

        return $this;
    }

    public function getUpdatedAt(): ?string
    {
        return $this->updatedAt;
    }

    public function setUpdatedAt(string $updatedAt): static
    {
        $this->updatedAt = $updatedAt;

        return $this;
    }

    public function getScorePopularite(): ?int
    {
        return $this->scorePopularite;
    }

    public function setScorePopularite(?int $scorePopularite): static
    {
        $this->scorePopularite = $scorePopularite;

        return $this;
    }

    public function getImagePath(): ?string
    {
        return $this->imagePath;
    }

    public function setImagePath(string $imagePath): static
    {
        $this->imagePath = $imagePath;

        return $this;
    }

    public function getGroupId(): ?int
    {
        return $this->groupId;
    }

    public function setGroupId(?int $groupId): static
    {
        $this->groupId = $groupId;

        return $this;
    }
}

================
File: src/Entity/GroupFeedPosts.php
================
<?php

namespace App\Entity;

use App\Repository\GroupFeedPostsRepository;
use Doctrine\ORM\Mapping as ORM;

#[ORM\Entity(repositoryClass: GroupFeedPostsRepository::class)]
class GroupFeedPosts
{
    #[ORM\Id]
    #[ORM\GeneratedValue]
    #[ORM\Column]
    private ?int $id = null;

    #[ORM\ManyToOne]
    #[ORM\JoinColumn(nullable: false)]
    private ?UserGroups $group_id = null;

    #[ORM\ManyToOne]
    #[ORM\JoinColumn(nullable: false)]
    private ?Users $user_id = null;

    #[ORM\Column(length: 255)]
    private ?string $content = null;

    #[ORM\Column(length: 255)]
    private ?string $timestamp = null;

    #[ORM\Column(length: 255)]
    private ?string $media_url = null;

    #[ORM\Column(nullable: true)]
    private ?int $is_deleted = null;

    public function getId(): ?int
    {
        return $this->id;
    }

    public function getGroupId(): ?UserGroups
    {
        return $this->group_id;
    }

    public function setGroupId(?UserGroups $group_id): static
    {
        $this->group_id = $group_id;

        return $this;
    }

    public function getUserId(): ?Users
    {
        return $this->user_id;
    }

    public function setUserId(?Users $user_id): static
    {
        $this->user_id = $user_id;

        return $this;
    }

    public function getContent(): ?string
    {
        return $this->content;
    }

    public function setContent(string $content): static
    {
        $this->content = $content;

        return $this;
    }

    public function getTimestamp(): ?string
    {
        return $this->timestamp;
    }

    public function setTimestamp(string $timestamp): static
    {
        $this->timestamp = $timestamp;

        return $this;
    }

    public function getMediaUrl(): ?string
    {
        return $this->media_url;
    }

    public function setMediaUrl(string $media_url): static
    {
        $this->media_url = $media_url;

        return $this;
    }

    public function getIsDeleted(): ?int
    {
        return $this->is_deleted;
    }

    public function setIsDeleted(?int $is_deleted): static
    {
        $this->is_deleted = $is_deleted;

        return $this;
    }
}

================
File: src/Entity/GroupMembers.php
================
<?php

namespace App\Entity;

use App\Repository\GroupMembersRepository;
use Doctrine\ORM\Mapping as ORM;

#[ORM\Entity(repositoryClass: GroupMembersRepository::class)]
class GroupMembers
{
    #[ORM\Id]
    #[ORM\GeneratedValue]
    #[ORM\Column]
    private ?int $id = null;

    #[ORM\ManyToOne]
    #[ORM\JoinColumn(nullable: false)]
    private ?UserGroups $group_it = null;

    #[ORM\ManyToOne]
    #[ORM\JoinColumn(nullable: false)]
    private ?Users $user_id = null;

    #[ORM\Column(length: 255)]
    private ?string $role = null;

    public function getId(): ?int
    {
        return $this->id;
    }

    public function getGroupIt(): ?UserGroups
    {
        return $this->group_it;
    }

    public function setGroupIt(?UserGroups $group_it): static
    {
        $this->group_it = $group_it;

        return $this;
    }

    public function getUserId(): ?Users
    {
        return $this->user_id;
    }

    public function setUserId(?Users $user_id): static
    {
        $this->user_id = $user_id;

        return $this;
    }

    public function getRole(): ?string
    {
        return $this->role;
    }

    public function setRole(string $role): static
    {
        $this->role = $role;

        return $this;
    }
}

================
File: src/Entity/HistoriquePoints.php
================
<?php

namespace App\Entity;

use App\Repository\HistoriquePointsRepository;
use Doctrine\DBAL\Types\Types;
use Doctrine\ORM\Mapping as ORM;

#[ORM\Entity(repositoryClass: HistoriquePointsRepository::class)]
class HistoriquePoints
{
    #[ORM\Id]
    #[ORM\GeneratedValue]
    #[ORM\Column]
    private ?int $id = null;

    #[ORM\ManyToOne]
    #[ORM\JoinColumn(nullable: false)]
    private ?Users $user_id = null;

    #[ORM\Column(length: 255)]
    private ?string $type = null;

    #[ORM\Column]
    private ?int $points = null;

    #[ORM\Column(length: 255)]
    private ?string $raison = null;

    #[ORM\Column(type: Types::DATETIME_MUTABLE)]
    private ?\DateTimeInterface $date = null;

    public function getId(): ?int
    {
        return $this->id;
    }

    public function getUserId(): ?Users
    {
        return $this->user_id;
    }

    public function setUserId(?Users $user_id): static
    {
        $this->user_id = $user_id;

        return $this;
    }

    public function getType(): ?string
    {
        return $this->type;
    }

    public function setType(string $type): static
    {
        $this->type = $type;

        return $this;
    }

    public function getPoints(): ?int
    {
        return $this->points;
    }

    public function setPoints(int $points): static
    {
        $this->points = $points;

        return $this;
    }

    public function getRaison(): ?string
    {
        return $this->raison;
    }

    public function setRaison(string $raison): static
    {
        $this->raison = $raison;

        return $this;
    }

    public function getDate(): ?\DateTimeInterface
    {
        return $this->date;
    }

    public function setDate(\DateTimeInterface $date): static
    {
        $this->date = $date;

        return $this;
    }
}

================
File: src/Entity/Jobs.php
================
<?php

namespace App\Entity;

use App\Repository\JobsRepository;
use Doctrine\ORM\Mapping as ORM;

#[ORM\Entity(repositoryClass: JobsRepository::class)]
class Jobs
{
    #[ORM\Id]
    #[ORM\GeneratedValue]
    #[ORM\Column]
    private ?int $id = null;

    #[ORM\Column(length: 255)]
    private ?string $jobTitle = null;

    #[ORM\Column(length: 255, nullable: true)]
    private ?string $eventTitle = null;

    #[ORM\Column(length: 255)]
    private ?string $jobLocation = null;

    #[ORM\Column(length: 255)]
    private ?string $employmentType = null;

    #[ORM\Column(length: 255 , nullable: true)]
    private ?string $applicationDeadLine = null;

    #[ORM\Column]
    private ?int $minSalary = null;

    #[ORM\Column]
    private ?int $maxSalary = null;

    #[ORM\Column(length: 255)]
    private ?string $currency = null;

    #[ORM\Column(length: 255)]
    private ?string $jobDescreption = null;

    #[ORM\Column(length: 255)]
    private ?string $recruiterName = null;

    #[ORM\Column(length: 255)]
    private ?string $recruiterEmail = null;

    #[ORM\Column(length: 255, nullable: true)]
    private ?string $createdAt = null;
    
    #[ORM\ManyToOne(inversedBy: 'jobs')]
    #[ORM\JoinColumn(nullable: true)]
    private ?Users $userId = null;

    #[ORM\ManyToOne]
    private ?Events $eventId = null;

    public function getId(): ?int
    {
        return $this->id;
    }

    public function getJobTitle(): ?string
    {
        return $this->jobTitle;
    }

    public function setJobTitle(string $jobTitle): static
    {
        $this->jobTitle = $jobTitle;

        return $this;
    }

    public function getEventTitle(): ?string
    {
        return $this->eventTitle;
    }

    public function setEventTitle(?string $eventTitle): static
    {
        $this->eventTitle = $eventTitle;

        return $this;
    }

    public function getJobLocation(): ?string
    {
        return $this->jobLocation;
    }

    public function setJobLocation(string $jobLocation): static
    {
        $this->jobLocation = $jobLocation;

        return $this;
    }

    public function getEmploymentType(): ?string
    {
        return $this->employmentType;
    }

    public function setEmploymentType(string $employmentType): static
    {
        $this->employmentType = $employmentType;

        return $this;
    }

    public function getApplicationDeadLine(): ?string
    {
        return $this->applicationDeadLine;
    }

    public function setApplicationDeadLine(string $applicationDeadLine): static
    {
        $this->applicationDeadLine = $applicationDeadLine;

        return $this;
    }

    public function getMinSalary(): ?int
    {
        return $this->minSalary;
    }

    public function setMinSalary(int $minSalary): static
    {
        $this->minSalary = $minSalary;

        return $this;
    }

    public function getMaxSalary(): ?int
    {
        return $this->maxSalary;
    }

    public function setMaxSalary(int $maxSalary): static
    {
        $this->maxSalary = $maxSalary;

        return $this;
    }

    public function getCurrency(): ?string
    {
        return $this->currency;
    }

    public function setCurrency(string $currency): static
    {
        $this->currency = $currency;

        return $this;
    }

    public function getJobDescreption(): ?string
    {
        return $this->jobDescreption;
    }

    public function setJobDescreption(string $jobDescreption): static
    {
        $this->jobDescreption = $jobDescreption;

        return $this;
    }

    public function getRecruiterName(): ?string
    {
        return $this->recruiterName;
    }

    public function setRecruiterName(string $recruiterName): static
    {
        $this->recruiterName = $recruiterName;

        return $this;
    }

    public function getRecruiterEmail(): ?string
    {
        return $this->recruiterEmail;
    }

    public function setRecruiterEmail(string $recruiterEmail): static
    {
        $this->recruiterEmail = $recruiterEmail;

        return $this;
    }

    public function getCreatedAt(): ?string
    {
        return $this->createdAt;
    }

    public function setCreatedAt(?string $createdAt): static
    {
        $this->createdAt = $createdAt;

        return $this;
    }

  

    public function getUserId(): ?Users
    {
        return $this->userId;
    }

    public function setUserId(?Users $userId): static
    {
        $this->userId = $userId;

        return $this;
    }

    public function getEventId(): ?Events
    {
        return $this->eventId;
    }

    public function setEventId(?Events $eventId): static
    {
        $this->eventId = $eventId;

        return $this;
    }
}

================
File: src/Entity/Likes.php
================
<?php

namespace App\Entity;

use App\Repository\LikesRepository;
use Doctrine\ORM\Mapping as ORM;

#[ORM\Entity(repositoryClass: LikesRepository::class)]
class Likes
{
    #[ORM\Id]
    #[ORM\GeneratedValue]
    #[ORM\Column]
    private ?int $id = null;

    #[ORM\ManyToOne]
    #[ORM\JoinColumn(nullable: false)]
    private ?FeedPosts $postId = null;

    #[ORM\ManyToOne]
    #[ORM\JoinColumn(nullable: false)]
    private ?Users $user_id = null;

    #[ORM\Column(length: 255)]
    private ?string $timeStamp = null;

    public function getId(): ?int
    {
        return $this->id;
    }

    public function getPostId(): ?FeedPosts
    {
        return $this->postId;
    }

    public function setPostId(?FeedPosts $postId): static
    {
        $this->postId = $postId;

        return $this;
    }

    public function getUserId(): ?Users
    {
        return $this->user_id;
    }

    public function setUserId(?Users $user_id): static
    {
        $this->user_id = $user_id;

        return $this;
    }

    public function getTimeStamp(): ?string
    {
        return $this->timeStamp;
    }

    public function setTimeStamp(string $timeStamp): static
    {
        $this->timeStamp = $timeStamp;

        return $this;
    }
}

================
File: src/Entity/Messages.php
================
<?php

namespace App\Entity;

use App\Repository\MessagesRepository;
use Doctrine\DBAL\Types\Types;
use Doctrine\ORM\Mapping as ORM;

#[ORM\Entity(repositoryClass: MessagesRepository::class)]
class Messages
{
    #[ORM\Id]
    #[ORM\GeneratedValue]
    #[ORM\Column]
    private ?int $id = null;

    #[ORM\Column]
    private ?int $sender_id = null;

    #[ORM\Column]
    private ?int $recipient_id = null;

    #[ORM\Column(length: 255)]
    private ?string $content = null;

    #[ORM\Column(type: Types::DATETIME_MUTABLE)]
    private ?\DateTimeInterface $timestamp = null;

    #[ORM\Column(length: 255)]
    private ?string $type = null;

    #[ORM\Column]
    private ?int $read_status = null;

    public function getId(): ?int
    {
        return $this->id;
    }

    public function getSenderId(): ?int
    {
        return $this->sender_id;
    }

    public function setSenderId(int $sender_id): static
    {
        $this->sender_id = $sender_id;

        return $this;
    }

    public function getRecipientId(): ?int
    {
        return $this->recipient_id;
    }

    public function setRecipientId(int $recipient_id): static
    {
        $this->recipient_id = $recipient_id;

        return $this;
    }

    public function getContent(): ?string
    {
        return $this->content;
    }

    public function setContent(string $content): static
    {
        $this->content = $content;

        return $this;
    }

    public function getTimestamp(): ?\DateTimeInterface
    {
        return $this->timestamp;
    }

    public function setTimestamp(\DateTimeInterface $timestamp): static
    {
        $this->timestamp = $timestamp;

        return $this;
    }

    public function getType(): ?string
    {
        return $this->type;
    }

    public function setType(string $type): static
    {
        $this->type = $type;

        return $this;
    }

    public function getReadStatus(): ?int
    {
        return $this->read_status;
    }

    public function setReadStatus(int $read_status): static
    {
        $this->read_status = $read_status;

        return $this;
    }
}

================
File: src/Entity/Participation.php
================
<?php

namespace App\Entity;

use App\Repository\ParticipationRepository;
use Doctrine\Common\Collections\ArrayCollection;
use Doctrine\Common\Collections\Collection;
use Doctrine\ORM\Mapping as ORM;

#[ORM\Entity(repositoryClass: ParticipationRepository::class)]
class Participation
{
    #[ORM\Id]
    #[ORM\GeneratedValue]
    #[ORM\Column]
    private ?int $id = null;

    #[ORM\ManyToMany(targetEntity: Events::class)]
    private Collection $event_id;

    #[ORM\ManyToMany(targetEntity: Users::class)]
    private Collection $participant_id;

    public function __construct()
    {
        $this->event_id = new ArrayCollection();
        $this->participant_id = new ArrayCollection();
    }

    public function getId(): ?int
    {
        return $this->id;
    }

    /**
     * @return Collection<int, Events>
     */
    public function getEventId(): Collection
    {
        return $this->event_id;
    }

    public function addEventId(Events $eventId): static
    {
        if (!$this->event_id->contains($eventId)) {
            $this->event_id->add($eventId);
        }

        return $this;
    }

    public function removeEventId(Events $eventId): static
    {
        $this->event_id->removeElement($eventId);

        return $this;
    }

    /**
     * @return Collection<int, Users>
     */
    public function getParticipantId(): Collection
    {
        return $this->participant_id;
    }

    public function addParticipantId(Users $participantId): static
    {
        if (!$this->participant_id->contains($participantId)) {
            $this->participant_id->add($participantId);
        }

        return $this;
    }

    public function removeParticipantId(Users $participantId): static
    {
        $this->participant_id->removeElement($participantId);

        return $this;
    }
}

================
File: src/Entity/Reviews.php
================
<?php

namespace App\Entity;

use App\Repository\ReviewsRepository;
use Doctrine\ORM\Mapping as ORM;

#[ORM\Entity(repositoryClass: ReviewsRepository::class)]
class Reviews
{
    #[ORM\Id]
    #[ORM\GeneratedValue]
    #[ORM\Column]
    private ?int $id = null;

    #[ORM\ManyToOne]
    #[ORM\JoinColumn(nullable: false)]
    private ?Users $user_id = null;

    #[ORM\ManyToOne]
    #[ORM\JoinColumn(nullable: false)]
    private ?Events $event_id = null;

    #[ORM\Column]
    private ?int $rating = null;

    #[ORM\Column(length: 255)]
    private ?string $comment = null;

    #[ORM\Column(length: 255, nullable: true)]
    private ?string $creatid_at = null;

    public function getId(): ?int
    {
        return $this->id;
    }

    public function getUserId(): ?Users
    {
        return $this->user_id;
    }

    public function setUserId(?Users $user_id): static
    {
        $this->user_id = $user_id;

        return $this;
    }

    public function getEventId(): ?Events
    {
        return $this->event_id;
    }

    public function setEventId(?Events $event_id): static
    {
        $this->event_id = $event_id;

        return $this;
    }

    public function getRating(): ?int
    {
        return $this->rating;
    }

    public function setRating(int $rating): static
    {
        $this->rating = $rating;

        return $this;
    }

    public function getComment(): ?string
    {
        return $this->comment;
    }

    public function setComment(string $comment): static
    {
        $this->comment = $comment;

        return $this;
    }

    public function getCreatidAt(): ?string
    {
        return $this->creatid_at;
    }

    public function setCreatidAt(?string $creatid_at): static
    {
        $this->creatid_at = $creatid_at;

        return $this;
    }
}

================
File: src/Entity/Rewards.php
================
<?php

namespace App\Entity;

use App\Repository\RewardsRepository;
use Doctrine\ORM\Mapping as ORM;

#[ORM\Entity(repositoryClass: RewardsRepository::class)]
class Rewards
{
    #[ORM\Id]
    #[ORM\GeneratedValue]
    #[ORM\Column]
    private ?int $id = null;

    #[ORM\Column(length: 255)]
    private ?string $action_type = null;

    #[ORM\Column]
    private ?int $points = null;

    #[ORM\Column(length: 255)]
    private ?string $description = null;

    public function getId(): ?int
    {
        return $this->id;
    }

    public function getActionType(): ?string
    {
        return $this->action_type;
    }

    public function setActionType(string $action_type): static
    {
        $this->action_type = $action_type;

        return $this;
    }

    public function getPoints(): ?int
    {
        return $this->points;
    }

    public function setPoints(int $points): static
    {
        $this->points = $points;

        return $this;
    }

    public function getDescription(): ?string
    {
        return $this->description;
    }

    public function setDescription(string $description): static
    {
        $this->description = $description;

        return $this;
    }
}

================
File: src/Entity/Roulette.php
================
<?php

namespace App\Entity;

use App\Repository\RouletteRepository;
use Doctrine\DBAL\Types\Types;
use Doctrine\ORM\Mapping as ORM;

#[ORM\Entity(repositoryClass: RouletteRepository::class)]
class Roulette
{
    #[ORM\Id]
    #[ORM\GeneratedValue]
    #[ORM\Column]
    private ?int $id = null;

    #[ORM\ManyToOne]
    private ?Users $user_id = null;

    #[ORM\Column]
    private ?int $points_gagnes = null;

    #[ORM\Column(type: Types::DATETIME_MUTABLE)]
    private ?\DateTimeInterface $date = null;

    public function getId(): ?int
    {
        return $this->id;
    }

    public function getUserId(): ?Users
    {
        return $this->user_id;
    }

    public function setUserId(?Users $user_id): static
    {
        $this->user_id = $user_id;

        return $this;
    }

    public function getPointsGagnes(): ?int
    {
        return $this->points_gagnes;
    }

    public function setPointsGagnes(int $points_gagnes): static
    {
        $this->points_gagnes = $points_gagnes;

        return $this;
    }

    public function getDate(): ?\DateTimeInterface
    {
        return $this->date;
    }

    public function setDate(\DateTimeInterface $date): static
    {
        $this->date = $date;

        return $this;
    }
}

================
File: src/Entity/Shares.php
================
<?php

namespace App\Entity;

use App\Repository\SharesRepository;
use Doctrine\DBAL\Types\Types;
use Doctrine\ORM\Mapping as ORM;

#[ORM\Entity(repositoryClass: SharesRepository::class)]
class Shares
{
    #[ORM\Id]
    #[ORM\GeneratedValue]
    #[ORM\Column]
    private ?int $id = null;

    #[ORM\ManyToOne]
    private ?FeedPosts $post_id = null;

    #[ORM\ManyToOne]
    private ?Users $user_id = null;

    #[ORM\Column(type: Types::DATETIME_MUTABLE, nullable: true)]
    private ?\DateTimeInterface $created_at = null;

    public function getId(): ?int
    {
        return $this->id;
    }

    public function getPostId(): ?FeedPosts
    {
        return $this->post_id;
    }

    public function setPostId(?FeedPosts $post_id): static
    {
        $this->post_id = $post_id;

        return $this;
    }

    public function getUserId(): ?Users
    {
        return $this->user_id;
    }

    public function setUserId(?Users $user_id): static
    {
        $this->user_id = $user_id;

        return $this;
    }

    public function getCreatedAt(): ?\DateTimeInterface
    {
        return $this->created_at;
    }

    public function setCreatedAt(?\DateTimeInterface $created_at): static
    {
        $this->created_at = $created_at;

        return $this;
    }
}

================
File: src/Entity/TransactionArgent.php
================
<?php

namespace App\Entity;

use App\Repository\TransactionArgentRepository;
use Doctrine\ORM\Mapping as ORM;

#[ORM\Entity(repositoryClass: TransactionArgentRepository::class)]
class TransactionArgent
{
    #[ORM\Id]
    #[ORM\GeneratedValue]
    #[ORM\Column]
    private ?int $id = null;

    public function getId(): ?int
    {
        return $this->id;
    }
}

================
File: src/Entity/UserGroups.php
================
<?php

namespace App\Entity;

use App\Repository\UserGroupsRepository;
use Doctrine\DBAL\Types\Types;
use Doctrine\ORM\Mapping as ORM;

#[ORM\Entity(repositoryClass: UserGroupsRepository::class)]
class UserGroups
{
    #[ORM\Id]
    #[ORM\GeneratedValue]
    #[ORM\Column]
    private ?int $id = null;

    #[ORM\Column(length: 255)]
    private ?string $name = null;

    #[ORM\Column(length: 255)]
    private ?string $description = null;

    #[ORM\Column(type: Types::TEXT)]
    private ?string $profile_picture = null;

    #[ORM\Column(length: 255)]
    private ?string $rules = null;

    #[ORM\Column(length: 255)]
    private ?string $created_at = null;

    #[ORM\ManyToOne]
    #[ORM\JoinColumn(nullable: false)]
    private ?Users $creator_id = null;

    public function getId(): ?int
    {
        return $this->id;
    }

    public function getName(): ?string
    {
        return $this->name;
    }

    public function setName(string $name): static
    {
        $this->name = $name;

        return $this;
    }

    public function getDescription(): ?string
    {
        return $this->description;
    }

    public function setDescription(string $description): static
    {
        $this->description = $description;

        return $this;
    }

    public function getProfilePicture(): ?string
    {
        return $this->profile_picture;
    }

    public function setProfilePicture(string $profile_picture): static
    {
        $this->profile_picture = $profile_picture;

        return $this;
    }

    public function getRules(): ?string
    {
        return $this->rules;
    }

    public function setRules(string $rules): static
    {
        $this->rules = $rules;

        return $this;
    }

    public function getCreatedAt(): ?string
    {
        return $this->created_at;
    }

    public function setCreatedAt(string $created_at): static
    {
        $this->created_at = $created_at;

        return $this;
    }

    public function getCreatorId(): ?Users
    {
        return $this->creator_id;
    }

    public function setCreatorId(?Users $creator_id): static
    {
        $this->creator_id = $creator_id;

        return $this;
    }
}

================
File: src/Entity/UserIntrests.php
================
<?php

namespace App\Entity;

use App\Repository\UserIntrestsRepository;
use Doctrine\ORM\Mapping as ORM;

#[ORM\Entity(repositoryClass: UserIntrestsRepository::class)]
class UserIntrests
{
    #[ORM\Id]
    #[ORM\GeneratedValue]
    #[ORM\Column]
    private ?int $id = null;

    #[ORM\ManyToOne]
    private ?users $user_id = null;

    #[ORM\ManyToOne]
    private ?Category $category_id = null;

    public function getId(): ?int
    {
        return $this->id;
    }

    public function getUserId(): ?users
    {
        return $this->user_id;
    }

    public function setUserId(?users $user_id): static
    {
        $this->user_id = $user_id;

        return $this;
    }

    public function getCategoryId(): ?Category
    {
        return $this->category_id;
    }

    public function setCategoryId(?Category $category_id): static
    {
        $this->category_id = $category_id;

        return $this;
    }
}

================
File: src/Entity/UserMessages.php
================
<?php

namespace App\Entity;

use App\Repository\UserMessagesRepository;
use Doctrine\DBAL\Types\Types;
use Doctrine\ORM\Mapping as ORM;

#[ORM\Entity(repositoryClass: UserMessagesRepository::class)]
class UserMessages
{
    #[ORM\Id]
    #[ORM\GeneratedValue]
    #[ORM\Column]
    private ?int $id = null;

    #[ORM\ManyToOne]
    private ?Users $user_id = null;

    #[ORM\Column(type: Types::DATETIME_MUTABLE, nullable: true)]
    private ?\DateTimeInterface $sent_at = null;

    #[ORM\Column(length: 255, nullable: true)]
    private ?string $lastMessage = null;

    #[ORM\Column(length: 255)]
    private ?string $username = null;

    public function getId(): ?int
    {
        return $this->id;
    }

    public function getUserId(): ?Users
    {
        return $this->user_id;
    }

    public function setUserId(?Users $user_id): static
    {
        $this->user_id = $user_id;

        return $this;
    }

    public function getSentAt(): ?\DateTimeInterface
    {
        return $this->sent_at;
    }

    public function setSentAt(?\DateTimeInterface $sent_at): static
    {
        $this->sent_at = $sent_at;

        return $this;
    }

    public function getLastMessage(): ?string
    {
        return $this->lastMessage;
    }

    public function setLastMessage(?string $lastMessage): static
    {
        $this->lastMessage = $lastMessage;

        return $this;
    }

    public function getUsername(): ?string
    {
        return $this->username;
    }

    public function setUsername(string $username): static
    {
        $this->username = $username;

        return $this;
    }
}

================
File: src/Entity/UserProfile.php
================
<?php

namespace App\Entity;

use App\Repository\UserProfileRepository;
use Doctrine\ORM\Mapping as ORM;

#[ORM\Entity(repositoryClass: UserProfileRepository::class)]
class UserProfile
{
    #[ORM\Id]
    #[ORM\GeneratedValue]
    #[ORM\Column]
    private ?int $id = null;

    #[ORM\Column]
    private ?int $user_id = null;

    #[ORM\Column(length: 255)]
    private ?string $bio = null;

    #[ORM\Column(length: 255)]
    private ?string $profilePicture = null;

    #[ORM\Column(length: 255)]
    private ?string $intrests = null;

    public function getId(): ?int
    {
        return $this->id;
    }

    public function getUserId(): ?int
    {
        return $this->user_id;
    }

    public function setUserId(int $user_id): static
    {
        $this->user_id = $user_id;

        return $this;
    }

    public function getBio(): ?string
    {
        return $this->bio;
    }

    public function setBio(string $bio): static
    {
        $this->bio = $bio;

        return $this;
    }

    public function getProfilePicture(): ?string
    {
        return $this->profilePicture;
    }

    public function setProfilePicture(string $profilePicture): static
    {
        $this->profilePicture = $profilePicture;

        return $this;
    }

    public function getIntrests(): ?string
    {
        return $this->intrests;
    }

    public function setIntrests(string $intrests): static
    {
        $this->intrests = $intrests;

        return $this;
    }
}

================
File: src/Entity/UserRewards.php
================
<?php

namespace App\Entity;

use App\Repository\UserRewardsRepository;
use Doctrine\ORM\Mapping as ORM;

#[ORM\Entity(repositoryClass: UserRewardsRepository::class)]
class UserRewards
{
    #[ORM\Id]
    #[ORM\GeneratedValue]
    #[ORM\Column]
    private ?int $id = null;

    #[ORM\Column]
    private ?int $user_id = null;

    #[ORM\Column]
    private ?int $reward_id = null;

    #[ORM\Column]
    private ?int $event_id = null;

    #[ORM\Column]
    private ?int $points_earned = null;

    #[ORM\Column (length: 255)]
    private ?string $erned_at = null;

    public function getId(): ?int
    {
        return $this->id;
    }

    public function getUserId(): ?int
    {
        return $this->user_id;
    }

    public function setUserId(int $user_id): static
    {
        $this->user_id = $user_id;

        return $this;
    }

    public function getRewardId(): ?int
    {
        return $this->reward_id;
    }

    public function setRewardId(int $reward_id): static
    {
        $this->reward_id = $reward_id;

        return $this;
    }

    public function getEventId(): ?int
    {
        return $this->event_id;
    }

    public function setEventId(int $event_id): static
    {
        $this->event_id = $event_id;

        return $this;
    }

    public function getPointsEarned() : ?int
    {
        return $this->points_earned;
    }

    public function setPointsEarned(int $points_earned): static
    {
        $this->points_earned = $points_earned;

        return $this;
    }

    public function getErnedAt(): ?string
    {
        return $this->erned_at;
    }

    public function setErnedAt(string $erned_at): static
    {
        $this->erned_at = $erned_at;

        return $this;
    }
}

================
File: src/Entity/Users.php
================
<?php

namespace App\Entity;

use App\Repository\UsersRepository;
use Doctrine\Common\Collections\ArrayCollection;
use Doctrine\Common\Collections\Collection;
use Doctrine\DBAL\Types\Types;
use Doctrine\ORM\Mapping as ORM;

#[ORM\Entity(repositoryClass: UsersRepository::class)]
class Users
{
    #[ORM\Id]
    #[ORM\GeneratedValue]
    #[ORM\Column]
    private ?int $id = 1;

    #[ORM\Column(length: 255)]
    private ?string $username = null;

    #[ORM\Column(length: 255)]
    private ?string $password = null;

    #[ORM\Column(length: 255)]
    private ?string $email = null;

    #[ORM\Column(length: 255 , nullable: true)]
    private ?string $createdAt = null;

    #[ORM\Column(length: 255, nullable: true)]
    private ?string $updatedAt = null;

    #[ORM\Column(nullable: true)]
    private ?int $points = null;

    #[ORM\Column]
    private ?int $age = null;

    #[ORM\Column(length: 255)]
    private ?string $gender = null;

    #[ORM\Column(type: Types::DECIMAL, precision: 10, scale: 2, nullable: true)]
    private ?string $argent = null;

    #[ORM\OneToMany(targetEntity: Conversion::class, mappedBy: 'userId')]
    private Collection $conversions;

    #[ORM\OneToMany(targetEntity: Events::class, mappedBy: 'organizerId')]
    private Collection $events;

    #[ORM\OneToMany(targetEntity: Jobs::class, mappedBy: 'userId', orphanRemoval: true)]
    private Collection $jobs;

    public function __construct()
    {
        $this->conversions = new ArrayCollection();
        $this->events = new ArrayCollection();
        $this->jobs = new ArrayCollection();
    }

    

   

    public function getId(): ?int
    {
        return $this->id;
    }

    public function getUsername(): ?string
    {
        return $this->username;
    }

    public function setUsername(string $username): static
    {
        $this->username = $username;

        return $this;
    }

    public function getPassword(): ?string
    {
        return $this->password;
    }

    public function setPassword(string $password): static
    {
        $this->password = $password;

        return $this;
    }

    public function getEmail(): ?string
    {
        return $this->email;
    }

    public function setEmail(string $email): static
    {
        $this->email = $email;

        return $this;
    }

    public function getCreatedAt(): ?string
    {
        return $this->createdAt;
    }

    public function setCreatedAt(string $createdAt): static
    {
        $this->createdAt = $createdAt;

        return $this;
    }

    public function getUpdatedAt(): ?string
    {
        return $this->updatedAt;
    }

    public function setUpdatedAt(?string $updatedAt): static
    {
        $this->updatedAt = $updatedAt;

        return $this;
    }

    public function getPoints(): ?int
    {
        return $this->points;
    }

    public function setPoints(?int $points): static
    {
        $this->points = $points;

        return $this;
    }

    public function getAge(): ?int
    {
        return $this->age;
    }

    public function setAge(int $age): static
    {
        $this->age = $age;

        return $this;
    }

    public function getGender(): ?string
    {
        return $this->gender;
    }

    public function setGender(string $gender): static
    {
        $this->gender = $gender;

        return $this;
    }

    public function getArgent(): ?int
    {
        return $this->argent;
    }

    public function setArgent(?int $argent): static
    {
        $this->argent = $argent;

        return $this;
    }

    /**
     * @return Collection<int, Conversion>
     */
    public function getConversions(): Collection
    {
        return $this->conversions;
    }

    public function addConversion(Conversion $conversion): static
    {
        if (!$this->conversions->contains($conversion)) {
            $this->conversions->add($conversion);
            $conversion->setUserId($this);
        }

        return $this;
    }

    public function removeConversion(Conversion $conversion): static
    {
        if ($this->conversions->removeElement($conversion)) {
            // set the owning side to null (unless already changed)
            if ($conversion->getUserId() === $this) {
                $conversion->setUserId(null);
            }
        }

        return $this;
    }

    /**
     * @return Collection<int, Events>
     */
    public function getEvents(): Collection
    {
        return $this->events;
    }

    public function addEvent(Events $event): static
    {
        if (!$this->events->contains($event)) {
            $this->events->add($event);
            $event->setOrganizerId($this);
        }

        return $this;
    }

    public function removeEvent(Events $event): static
    {
        if ($this->events->removeElement($event)) {
            // set the owning side to null (unless already changed)
            if ($event->getOrganizerId() === $this) {
                $event->setOrganizerId(null);
            }
        }

        return $this;
    }

    /**
     * @return Collection<int, Jobs>
     */
    public function getJobs(): Collection
    {
        return $this->jobs;
    }

    public function addJob(Jobs $job): static
    {
        if (!$this->jobs->contains($job)) {
            $this->jobs->add($job);
            $job->setUserId($this);
        }

        return $this;
    }

    public function removeJob(Jobs $job): static
    {
        if ($this->jobs->removeElement($job)) {
            // set the owning side to null (unless already changed)
            if ($job->getUserId() === $this) {
                $job->setUserId(null);
            }
        }

        return $this;
    }

    

   

}

================
File: src/Entity/VisiteUtilisateur.php
================
<?php

namespace App\Entity;

use App\Repository\VisiteUtilisateurRepository;
use Doctrine\DBAL\Types\Types;
use Doctrine\ORM\Mapping as ORM;

#[ORM\Entity(repositoryClass: VisiteUtilisateurRepository::class)]
class VisiteUtilisateur
{
    #[ORM\Id]
    #[ORM\GeneratedValue]
    #[ORM\Column]
    private ?int $id = null;

    #[ORM\Column(type: Types::DATE_MUTABLE)]
    private ?\DateTimeInterface $dernier_visite = null;

    #[ORM\Column]
    private ?int $serie = null;

    #[ORM\Column]
    private ?int $user_id = null;

    public function getId(): ?int
    {
        return $this->id;
    }

    public function getDernierVisite(): ?\DateTimeInterface
    {
        return $this->dernier_visite;
    }

    public function setDernierVisite(\DateTimeInterface $dernier_visite): static
    {
        $this->dernier_visite = $dernier_visite;

        return $this;
    }

    public function getSerie(): ?int
    {
        return $this->serie;
    }

    public function setSerie(int $serie): static
    {
        $this->serie = $serie;

        return $this;
    }

    public function getUserId(): ?int
    {
        return $this->user_id;
    }

    public function setUserId(int $user_id): static
    {
        $this->user_id = $user_id;

        return $this;
    }
}

================
File: src/Entity/WorkerRaitings.php
================
<?php

namespace App\Entity;

use App\Repository\WorkerRaitingsRepository;
use Doctrine\DBAL\Types\Types;
use Doctrine\ORM\Mapping as ORM;

#[ORM\Entity(repositoryClass: WorkerRaitingsRepository::class)]
class WorkerRaitings
{
    #[ORM\Id]
    #[ORM\GeneratedValue]
    #[ORM\Column]
    private ?int $id = null;

    #[ORM\Column]
    private ?int $user_id = null;

    #[ORM\Column]
    private ?int $rater_id = null;

    #[ORM\Column]
    private ?int $job_id = null;

    #[ORM\Column]
    private ?int $raiting = null;

    #[ORM\Column(type: Types::TEXT)]
    private ?string $comment = null;

    #[ORM\Column(type: Types::DATETIME_MUTABLE, nullable: true)]
    private ?\DateTimeInterface $created_at = null;

    public function getId(): ?int
    {
        return $this->id;
    }

    public function getUserId(): ?int
    {
        return $this->user_id;
    }

    public function setUserId(int $user_id): static
    {
        $this->user_id = $user_id;

        return $this;
    }

    public function getRaterId(): ?int
    {
        return $this->rater_id;
    }

    public function setRaterId(int $rater_id): static
    {
        $this->rater_id = $rater_id;

        return $this;
    }

    public function getJobId(): ?int
    {
        return $this->job_id;
    }

    public function setJobId(int $job_id): static
    {
        $this->job_id = $job_id;

        return $this;
    }

    public function getRaiting(): ?int
    {
        return $this->raiting;
    }

    public function setRaiting(int $raiting): static
    {
        $this->raiting = $raiting;

        return $this;
    }

    public function getComment(): ?string
    {
        return $this->comment;
    }

    public function setComment(string $comment): static
    {
        $this->comment = $comment;

        return $this;
    }

    public function getCreatedAt(): ?\DateTimeInterface
    {
        return $this->created_at;
    }

    public function setCreatedAt(?\DateTimeInterface $created_at): static
    {
        $this->created_at = $created_at;

        return $this;
    }
}

================
File: src/Form/CreateJobFormType.php
================
<?php

namespace App\Form;

use App\Entity\Jobs;
use Symfony\Component\Form\AbstractType;
use Symfony\Component\Form\FormBuilderInterface;
use Symfony\Component\OptionsResolver\OptionsResolver;

class CreateJobFormType extends AbstractType
{
    public function buildForm(FormBuilderInterface $builder, array $options): void
    {
        $builder
            ->add('jobTitle')
            ->add('eventTitle')
            ->add('jobLocation')
            ->add('employmentType')
            ->add('applicationDeadLine')
            ->add('minSalary')
            ->add('maxSalary')
            ->add('currency')
            ->add('jobDescreption')
            ->add('recruiterName')
            ->add('recruiterEmail')
            ->add('createdAt')
            #->add('userId')
            
        ;
    }

    public function configureOptions(OptionsResolver $resolver): void
    {
        $resolver->setDefaults([
            'data_class' => Jobs::class,
        ]);
    }
}

================
File: src/Kernel.php
================
<?php

namespace App;

use Symfony\Bundle\FrameworkBundle\Kernel\MicroKernelTrait;
use Symfony\Component\HttpKernel\Kernel as BaseKernel;

class Kernel extends BaseKernel
{
    use MicroKernelTrait;
}

================
File: src/Repository/ApplicationsRepository.php
================
<?php

namespace App\Repository;

use App\Entity\Applications;
use Doctrine\Bundle\DoctrineBundle\Repository\ServiceEntityRepository;
use Doctrine\Persistence\ManagerRegistry;

/**
 * @extends ServiceEntityRepository<Applications>
 *
 * @method Applications|null find($id, $lockMode = null, $lockVersion = null)
 * @method Applications|null findOneBy(array $criteria, array $orderBy = null)
 * @method Applications[]    findAll()
 * @method Applications[]    findBy(array $criteria, array $orderBy = null, $limit = null, $offset = null)
 */
class ApplicationsRepository extends ServiceEntityRepository
{
    public function __construct(ManagerRegistry $registry)
    {
        parent::__construct($registry, Applications::class);
    }

//    /**
//     * @return Applications[] Returns an array of Applications objects
//     */
//    public function findByExampleField($value): array
//    {
//        return $this->createQueryBuilder('a')
//            ->andWhere('a.exampleField = :val')
//            ->setParameter('val', $value)
//            ->orderBy('a.id', 'ASC')
//            ->setMaxResults(10)
//            ->getQuery()
//            ->getResult()
//        ;
//    }

//    public function findOneBySomeField($value): ?Applications
//    {
//        return $this->createQueryBuilder('a')
//            ->andWhere('a.exampleField = :val')
//            ->setParameter('val', $value)
//            ->getQuery()
//            ->getOneOrNullResult()
//        ;
//    }
}

================
File: src/Repository/CategoryRepository.php
================
<?php

namespace App\Repository;

use App\Entity\Category;
use Doctrine\Bundle\DoctrineBundle\Repository\ServiceEntityRepository;
use Doctrine\Persistence\ManagerRegistry;

/**
 * @extends ServiceEntityRepository<Category>
 *
 * @method Category|null find($id, $lockMode = null, $lockVersion = null)
 * @method Category|null findOneBy(array $criteria, array $orderBy = null)
 * @method Category[]    findAll()
 * @method Category[]    findBy(array $criteria, array $orderBy = null, $limit = null, $offset = null)
 */
class CategoryRepository extends ServiceEntityRepository
{
    public function __construct(ManagerRegistry $registry)
    {
        parent::__construct($registry, Category::class);
    }

//    /**
//     * @return Category[] Returns an array of Category objects
//     */
//    public function findByExampleField($value): array
//    {
//        return $this->createQueryBuilder('c')
//            ->andWhere('c.exampleField = :val')
//            ->setParameter('val', $value)
//            ->orderBy('c.id', 'ASC')
//            ->setMaxResults(10)
//            ->getQuery()
//            ->getResult()
//        ;
//    }

//    public function findOneBySomeField($value): ?Category
//    {
//        return $this->createQueryBuilder('c')
//            ->andWhere('c.exampleField = :val')
//            ->setParameter('val', $value)
//            ->getQuery()
//            ->getOneOrNullResult()
//        ;
//    }
}

================
File: src/Repository/CommentsRepository.php
================
<?php

namespace App\Repository;

use App\Entity\Comments;
use Doctrine\Bundle\DoctrineBundle\Repository\ServiceEntityRepository;
use Doctrine\Persistence\ManagerRegistry;

/**
 * @extends ServiceEntityRepository<Comments>
 *
 * @method Comments|null find($id, $lockMode = null, $lockVersion = null)
 * @method Comments|null findOneBy(array $criteria, array $orderBy = null)
 * @method Comments[]    findAll()
 * @method Comments[]    findBy(array $criteria, array $orderBy = null, $limit = null, $offset = null)
 */
class CommentsRepository extends ServiceEntityRepository
{
    public function __construct(ManagerRegistry $registry)
    {
        parent::__construct($registry, Comments::class);
    }

//    /**
//     * @return Comments[] Returns an array of Comments objects
//     */
//    public function findByExampleField($value): array
//    {
//        return $this->createQueryBuilder('c')
//            ->andWhere('c.exampleField = :val')
//            ->setParameter('val', $value)
//            ->orderBy('c.id', 'ASC')
//            ->setMaxResults(10)
//            ->getQuery()
//            ->getResult()
//        ;
//    }

//    public function findOneBySomeField($value): ?Comments
//    {
//        return $this->createQueryBuilder('c')
//            ->andWhere('c.exampleField = :val')
//            ->setParameter('val', $value)
//            ->getQuery()
//            ->getOneOrNullResult()
//        ;
//    }
}

================
File: src/Repository/ConversionRepository.php
================
<?php

namespace App\Repository;

use App\Entity\Conversion;
use Doctrine\Bundle\DoctrineBundle\Repository\ServiceEntityRepository;
use Doctrine\Persistence\ManagerRegistry;

/**
 * @extends ServiceEntityRepository<Conversion>
 *
 * @method Conversion|null find($id, $lockMode = null, $lockVersion = null)
 * @method Conversion|null findOneBy(array $criteria, array $orderBy = null)
 * @method Conversion[]    findAll()
 * @method Conversion[]    findBy(array $criteria, array $orderBy = null, $limit = null, $offset = null)
 */
class ConversionRepository extends ServiceEntityRepository
{
    public function __construct(ManagerRegistry $registry)
    {
        parent::__construct($registry, Conversion::class);
    }

//    /**
//     * @return Conversion[] Returns an array of Conversion objects
//     */
//    public function findByExampleField($value): array
//    {
//        return $this->createQueryBuilder('c')
//            ->andWhere('c.exampleField = :val')
//            ->setParameter('val', $value)
//            ->orderBy('c.id', 'ASC')
//            ->setMaxResults(10)
//            ->getQuery()
//            ->getResult()
//        ;
//    }

//    public function findOneBySomeField($value): ?Conversion
//    {
//        return $this->createQueryBuilder('c')
//            ->andWhere('c.exampleField = :val')
//            ->setParameter('val', $value)
//            ->getQuery()
//            ->getOneOrNullResult()
//        ;
//    }
}

================
File: src/Repository/EventsRepository.php
================
<?php

namespace App\Repository;

use App\Entity\Events;
use Doctrine\Bundle\DoctrineBundle\Repository\ServiceEntityRepository;
use Doctrine\Persistence\ManagerRegistry;

/**
 * @extends ServiceEntityRepository<Events>
 *
 * @method Events|null find($id, $lockMode = null, $lockVersion = null)
 * @method Events|null findOneBy(array $criteria, array $orderBy = null)
 * @method Events[]    findAll()
 * @method Events[]    findBy(array $criteria, array $orderBy = null, $limit = null, $offset = null)
 */
class EventsRepository extends ServiceEntityRepository
{
    public function __construct(ManagerRegistry $registry)
    {
        parent::__construct($registry, Events::class);
    }

//    /**
//     * @return Events[] Returns an array of Events objects
//     */
//    public function findByExampleField($value): array
//    {
//        return $this->createQueryBuilder('e')
//            ->andWhere('e.exampleField = :val')
//            ->setParameter('val', $value)
//            ->orderBy('e.id', 'ASC')
//            ->setMaxResults(10)
//            ->getQuery()
//            ->getResult()
//        ;
//    }

//    public function findOneBySomeField($value): ?Events
//    {
//        return $this->createQueryBuilder('e')
//            ->andWhere('e.exampleField = :val')
//            ->setParameter('val', $value)
//            ->getQuery()
//            ->getOneOrNullResult()
//        ;
//    }
}

================
File: src/Repository/FeedPostsRepository.php
================
<?php

namespace App\Repository;

use App\Entity\FeedPosts;
use Doctrine\Bundle\DoctrineBundle\Repository\ServiceEntityRepository;
use Doctrine\Persistence\ManagerRegistry;

/**
 * @extends ServiceEntityRepository<FeedPosts>
 *
 * @method FeedPosts|null find($id, $lockMode = null, $lockVersion = null)
 * @method FeedPosts|null findOneBy(array $criteria, array $orderBy = null)
 * @method FeedPosts[]    findAll()
 * @method FeedPosts[]    findBy(array $criteria, array $orderBy = null, $limit = null, $offset = null)
 */
class FeedPostsRepository extends ServiceEntityRepository
{
    public function __construct(ManagerRegistry $registry)
    {
        parent::__construct($registry, FeedPosts::class);
    }

//    /**
//     * @return FeedPosts[] Returns an array of FeedPosts objects
//     */
//    public function findByExampleField($value): array
//    {
//        return $this->createQueryBuilder('f')
//            ->andWhere('f.exampleField = :val')
//            ->setParameter('val', $value)
//            ->orderBy('f.id', 'ASC')
//            ->setMaxResults(10)
//            ->getQuery()
//            ->getResult()
//        ;
//    }

//    public function findOneBySomeField($value): ?FeedPosts
//    {
//        return $this->createQueryBuilder('f')
//            ->andWhere('f.exampleField = :val')
//            ->setParameter('val', $value)
//            ->getQuery()
//            ->getOneOrNullResult()
//        ;
//    }
}

================
File: src/Repository/GroupFeedPostsRepository.php
================
<?php

namespace App\Repository;

use App\Entity\GroupFeedPosts;
use Doctrine\Bundle\DoctrineBundle\Repository\ServiceEntityRepository;
use Doctrine\Persistence\ManagerRegistry;

/**
 * @extends ServiceEntityRepository<GroupFeedPosts>
 *
 * @method GroupFeedPosts|null find($id, $lockMode = null, $lockVersion = null)
 * @method GroupFeedPosts|null findOneBy(array $criteria, array $orderBy = null)
 * @method GroupFeedPosts[]    findAll()
 * @method GroupFeedPosts[]    findBy(array $criteria, array $orderBy = null, $limit = null, $offset = null)
 */
class GroupFeedPostsRepository extends ServiceEntityRepository
{
    public function __construct(ManagerRegistry $registry)
    {
        parent::__construct($registry, GroupFeedPosts::class);
    }

//    /**
//     * @return GroupFeedPosts[] Returns an array of GroupFeedPosts objects
//     */
//    public function findByExampleField($value): array
//    {
//        return $this->createQueryBuilder('g')
//            ->andWhere('g.exampleField = :val')
//            ->setParameter('val', $value)
//            ->orderBy('g.id', 'ASC')
//            ->setMaxResults(10)
//            ->getQuery()
//            ->getResult()
//        ;
//    }

//    public function findOneBySomeField($value): ?GroupFeedPosts
//    {
//        return $this->createQueryBuilder('g')
//            ->andWhere('g.exampleField = :val')
//            ->setParameter('val', $value)
//            ->getQuery()
//            ->getOneOrNullResult()
//        ;
//    }
}

================
File: src/Repository/GroupMembersRepository.php
================
<?php

namespace App\Repository;

use App\Entity\GroupMembers;
use Doctrine\Bundle\DoctrineBundle\Repository\ServiceEntityRepository;
use Doctrine\Persistence\ManagerRegistry;

/**
 * @extends ServiceEntityRepository<GroupMembers>
 *
 * @method GroupMembers|null find($id, $lockMode = null, $lockVersion = null)
 * @method GroupMembers|null findOneBy(array $criteria, array $orderBy = null)
 * @method GroupMembers[]    findAll()
 * @method GroupMembers[]    findBy(array $criteria, array $orderBy = null, $limit = null, $offset = null)
 */
class GroupMembersRepository extends ServiceEntityRepository
{
    public function __construct(ManagerRegistry $registry)
    {
        parent::__construct($registry, GroupMembers::class);
    }

//    /**
//     * @return GroupMembers[] Returns an array of GroupMembers objects
//     */
//    public function findByExampleField($value): array
//    {
//        return $this->createQueryBuilder('g')
//            ->andWhere('g.exampleField = :val')
//            ->setParameter('val', $value)
//            ->orderBy('g.id', 'ASC')
//            ->setMaxResults(10)
//            ->getQuery()
//            ->getResult()
//        ;
//    }

//    public function findOneBySomeField($value): ?GroupMembers
//    {
//        return $this->createQueryBuilder('g')
//            ->andWhere('g.exampleField = :val')
//            ->setParameter('val', $value)
//            ->getQuery()
//            ->getOneOrNullResult()
//        ;
//    }
}

================
File: src/Repository/HistoriquePointsRepository.php
================
<?php

namespace App\Repository;

use App\Entity\HistoriquePoints;
use Doctrine\Bundle\DoctrineBundle\Repository\ServiceEntityRepository;
use Doctrine\Persistence\ManagerRegistry;

/**
 * @extends ServiceEntityRepository<HistoriquePoints>
 *
 * @method HistoriquePoints|null find($id, $lockMode = null, $lockVersion = null)
 * @method HistoriquePoints|null findOneBy(array $criteria, array $orderBy = null)
 * @method HistoriquePoints[]    findAll()
 * @method HistoriquePoints[]    findBy(array $criteria, array $orderBy = null, $limit = null, $offset = null)
 */
class HistoriquePointsRepository extends ServiceEntityRepository
{
    public function __construct(ManagerRegistry $registry)
    {
        parent::__construct($registry, HistoriquePoints::class);
    }

//    /**
//     * @return HistoriquePoints[] Returns an array of HistoriquePoints objects
//     */
//    public function findByExampleField($value): array
//    {
//        return $this->createQueryBuilder('h')
//            ->andWhere('h.exampleField = :val')
//            ->setParameter('val', $value)
//            ->orderBy('h.id', 'ASC')
//            ->setMaxResults(10)
//            ->getQuery()
//            ->getResult()
//        ;
//    }

//    public function findOneBySomeField($value): ?HistoriquePoints
//    {
//        return $this->createQueryBuilder('h')
//            ->andWhere('h.exampleField = :val')
//            ->setParameter('val', $value)
//            ->getQuery()
//            ->getOneOrNullResult()
//        ;
//    }
}

================
File: src/Repository/JobsRepository.php
================
<?php

namespace App\Repository;

use App\Entity\Jobs;
use Doctrine\Bundle\DoctrineBundle\Repository\ServiceEntityRepository;
use Doctrine\Persistence\ManagerRegistry;

/**
 * @extends ServiceEntityRepository<Jobs>
 */
class JobsRepository extends ServiceEntityRepository
{
    public function __construct(ManagerRegistry $registry)
    {
        parent::__construct($registry, Jobs::class);
    }

    /**
 * @return Jobs[] Returns all jobs sorted alphabetically by title
 */
public function findAllSortedByTitle(): array
{
    return $this->createQueryBuilder('j')
        ->orderBy('j.jobTitle', 'ASC')
        ->getQuery()
        ->getResult();
}

    /**
     * @return Jobs[] //Returns all jobs with optional sorting
     */
    public function findAllWithSorting(string $sortField = 'jobTitle', string $sortDirection = 'ASC'): array
    {
        return $this->createQueryBuilder('j')
            ->orderBy('j.'.$sortField, $sortDirection)
            ->getQuery()
            ->getResult();
    } 


// In JobsRepository.php

// // Find jobs by event
// public function findByEvent(Events $event): array
// {
//     return $this->createQueryBuilder('j')
//         ->andWhere('j.eventId = :event')
//         ->setParameter('event', $event)
//         ->orderBy('j.jobTitle', 'ASC')
//         ->getQuery()
//         ->getResult();
// }

// // Find jobs with salary range
// public function findBySalaryRange(int $min, int $max): array
// {
//     return $this->createQueryBuilder('j')
//         ->andWhere('j.minSalary >= :min')
//         ->andWhere('j.maxSalary <= :max')
//         ->setParameter('min', $min)
//         ->setParameter('max', $max)
//         ->orderBy('j.jobTitle', 'ASC')
//         ->getQuery()
//         ->getResult();
// }

// // Search jobs by title or description
// public function searchJobs(string $query): array
// {
//     return $this->createQueryBuilder('j')
//         ->andWhere('j.jobTitle LIKE :query OR j.jobDescreption LIKE :query')
//         ->setParameter('query', '%'.$query.'%')
//         ->orderBy('j.jobTitle', 'ASC')
//         ->getQuery()
//         ->getResult();
// }
//}

// src/Repository/JobsRepository.php
// namespace App\Repository;

// use App\Entity\Jobs;
// use Doctrine\Bundle\DoctrineBundle\Repository\ServiceEntityRepository;
// use Doctrine\Persistence\ManagerRegistry;
// use Psr\Log\LoggerInterface;

// class JobsRepository extends ServiceEntityRepository
// {
//     private $logger;

//     public function __construct(ManagerRegistry $registry, LoggerInterface $logger)
//     {
//         parent::__construct($registry, Jobs::class);
//         $this->logger = $logger;
//     }

//     public function findAllSortedByTitle(): array
//     {
//         $query = $this->createQueryBuilder('j')
//             ->orderBy('j.jobTitle', 'ASC')
//             ->getQuery();

//         // Log the generated SQL
//         $this->logger->debug('Jobs Query: '.$query->getSQL());

//         return $query->getResult();
//     }
 }

================
File: src/Repository/LikesRepository.php
================
<?php

namespace App\Repository;

use App\Entity\Likes;
use Doctrine\Bundle\DoctrineBundle\Repository\ServiceEntityRepository;
use Doctrine\Persistence\ManagerRegistry;

/**
 * @extends ServiceEntityRepository<Likes>
 *
 * @method Likes|null find($id, $lockMode = null, $lockVersion = null)
 * @method Likes|null findOneBy(array $criteria, array $orderBy = null)
 * @method Likes[]    findAll()
 * @method Likes[]    findBy(array $criteria, array $orderBy = null, $limit = null, $offset = null)
 */
class LikesRepository extends ServiceEntityRepository
{
    public function __construct(ManagerRegistry $registry)
    {
        parent::__construct($registry, Likes::class);
    }

//    /**
//     * @return Likes[] Returns an array of Likes objects
//     */
//    public function findByExampleField($value): array
//    {
//        return $this->createQueryBuilder('l')
//            ->andWhere('l.exampleField = :val')
//            ->setParameter('val', $value)
//            ->orderBy('l.id', 'ASC')
//            ->setMaxResults(10)
//            ->getQuery()
//            ->getResult()
//        ;
//    }

//    public function findOneBySomeField($value): ?Likes
//    {
//        return $this->createQueryBuilder('l')
//            ->andWhere('l.exampleField = :val')
//            ->setParameter('val', $value)
//            ->getQuery()
//            ->getOneOrNullResult()
//        ;
//    }
}

================
File: src/Repository/MessagesRepository.php
================
<?php

namespace App\Repository;

use App\Entity\Messages;
use Doctrine\Bundle\DoctrineBundle\Repository\ServiceEntityRepository;
use Doctrine\Persistence\ManagerRegistry;

/**
 * @extends ServiceEntityRepository<Messages>
 *
 * @method Messages|null find($id, $lockMode = null, $lockVersion = null)
 * @method Messages|null findOneBy(array $criteria, array $orderBy = null)
 * @method Messages[]    findAll()
 * @method Messages[]    findBy(array $criteria, array $orderBy = null, $limit = null, $offset = null)
 */
class MessagesRepository extends ServiceEntityRepository
{
    public function __construct(ManagerRegistry $registry)
    {
        parent::__construct($registry, Messages::class);
    }

//    /**
//     * @return Messages[] Returns an array of Messages objects
//     */
//    public function findByExampleField($value): array
//    {
//        return $this->createQueryBuilder('m')
//            ->andWhere('m.exampleField = :val')
//            ->setParameter('val', $value)
//            ->orderBy('m.id', 'ASC')
//            ->setMaxResults(10)
//            ->getQuery()
//            ->getResult()
//        ;
//    }

//    public function findOneBySomeField($value): ?Messages
//    {
//        return $this->createQueryBuilder('m')
//            ->andWhere('m.exampleField = :val')
//            ->setParameter('val', $value)
//            ->getQuery()
//            ->getOneOrNullResult()
//        ;
//    }
}

================
File: src/Repository/ParticipationRepository.php
================
<?php

namespace App\Repository;

use App\Entity\Participation;
use Doctrine\Bundle\DoctrineBundle\Repository\ServiceEntityRepository;
use Doctrine\Persistence\ManagerRegistry;

/**
 * @extends ServiceEntityRepository<Participation>
 *
 * @method Participation|null find($id, $lockMode = null, $lockVersion = null)
 * @method Participation|null findOneBy(array $criteria, array $orderBy = null)
 * @method Participation[]    findAll()
 * @method Participation[]    findBy(array $criteria, array $orderBy = null, $limit = null, $offset = null)
 */
class ParticipationRepository extends ServiceEntityRepository
{
    public function __construct(ManagerRegistry $registry)
    {
        parent::__construct($registry, Participation::class);
    }

//    /**
//     * @return Participation[] Returns an array of Participation objects
//     */
//    public function findByExampleField($value): array
//    {
//        return $this->createQueryBuilder('p')
//            ->andWhere('p.exampleField = :val')
//            ->setParameter('val', $value)
//            ->orderBy('p.id', 'ASC')
//            ->setMaxResults(10)
//            ->getQuery()
//            ->getResult()
//        ;
//    }

//    public function findOneBySomeField($value): ?Participation
//    {
//        return $this->createQueryBuilder('p')
//            ->andWhere('p.exampleField = :val')
//            ->setParameter('val', $value)
//            ->getQuery()
//            ->getOneOrNullResult()
//        ;
//    }
}

================
File: src/Repository/ReviewsRepository.php
================
<?php

namespace App\Repository;

use App\Entity\Reviews;
use Doctrine\Bundle\DoctrineBundle\Repository\ServiceEntityRepository;
use Doctrine\Persistence\ManagerRegistry;

/**
 * @extends ServiceEntityRepository<Reviews>
 *
 * @method Reviews|null find($id, $lockMode = null, $lockVersion = null)
 * @method Reviews|null findOneBy(array $criteria, array $orderBy = null)
 * @method Reviews[]    findAll()
 * @method Reviews[]    findBy(array $criteria, array $orderBy = null, $limit = null, $offset = null)
 */
class ReviewsRepository extends ServiceEntityRepository
{
    public function __construct(ManagerRegistry $registry)
    {
        parent::__construct($registry, Reviews::class);
    }

//    /**
//     * @return Reviews[] Returns an array of Reviews objects
//     */
//    public function findByExampleField($value): array
//    {
//        return $this->createQueryBuilder('r')
//            ->andWhere('r.exampleField = :val')
//            ->setParameter('val', $value)
//            ->orderBy('r.id', 'ASC')
//            ->setMaxResults(10)
//            ->getQuery()
//            ->getResult()
//        ;
//    }

//    public function findOneBySomeField($value): ?Reviews
//    {
//        return $this->createQueryBuilder('r')
//            ->andWhere('r.exampleField = :val')
//            ->setParameter('val', $value)
//            ->getQuery()
//            ->getOneOrNullResult()
//        ;
//    }
}

================
File: src/Repository/RewardsRepository.php
================
<?php

namespace App\Repository;

use App\Entity\Rewards;
use Doctrine\Bundle\DoctrineBundle\Repository\ServiceEntityRepository;
use Doctrine\Persistence\ManagerRegistry;

/**
 * @extends ServiceEntityRepository<Rewards>
 *
 * @method Rewards|null find($id, $lockMode = null, $lockVersion = null)
 * @method Rewards|null findOneBy(array $criteria, array $orderBy = null)
 * @method Rewards[]    findAll()
 * @method Rewards[]    findBy(array $criteria, array $orderBy = null, $limit = null, $offset = null)
 */
class RewardsRepository extends ServiceEntityRepository
{
    public function __construct(ManagerRegistry $registry)
    {
        parent::__construct($registry, Rewards::class);
    }

//    /**
//     * @return Rewards[] Returns an array of Rewards objects
//     */
//    public function findByExampleField($value): array
//    {
//        return $this->createQueryBuilder('r')
//            ->andWhere('r.exampleField = :val')
//            ->setParameter('val', $value)
//            ->orderBy('r.id', 'ASC')
//            ->setMaxResults(10)
//            ->getQuery()
//            ->getResult()
//        ;
//    }

//    public function findOneBySomeField($value): ?Rewards
//    {
//        return $this->createQueryBuilder('r')
//            ->andWhere('r.exampleField = :val')
//            ->setParameter('val', $value)
//            ->getQuery()
//            ->getOneOrNullResult()
//        ;
//    }
}

================
File: src/Repository/RouletteRepository.php
================
<?php

namespace App\Repository;

use App\Entity\Roulette;
use Doctrine\Bundle\DoctrineBundle\Repository\ServiceEntityRepository;
use Doctrine\Persistence\ManagerRegistry;

/**
 * @extends ServiceEntityRepository<Roulette>
 *
 * @method Roulette|null find($id, $lockMode = null, $lockVersion = null)
 * @method Roulette|null findOneBy(array $criteria, array $orderBy = null)
 * @method Roulette[]    findAll()
 * @method Roulette[]    findBy(array $criteria, array $orderBy = null, $limit = null, $offset = null)
 */
class RouletteRepository extends ServiceEntityRepository
{
    public function __construct(ManagerRegistry $registry)
    {
        parent::__construct($registry, Roulette::class);
    }

//    /**
//     * @return Roulette[] Returns an array of Roulette objects
//     */
//    public function findByExampleField($value): array
//    {
//        return $this->createQueryBuilder('r')
//            ->andWhere('r.exampleField = :val')
//            ->setParameter('val', $value)
//            ->orderBy('r.id', 'ASC')
//            ->setMaxResults(10)
//            ->getQuery()
//            ->getResult()
//        ;
//    }

//    public function findOneBySomeField($value): ?Roulette
//    {
//        return $this->createQueryBuilder('r')
//            ->andWhere('r.exampleField = :val')
//            ->setParameter('val', $value)
//            ->getQuery()
//            ->getOneOrNullResult()
//        ;
//    }
}

================
File: src/Repository/SharesRepository.php
================
<?php

namespace App\Repository;

use App\Entity\Shares;
use Doctrine\Bundle\DoctrineBundle\Repository\ServiceEntityRepository;
use Doctrine\Persistence\ManagerRegistry;

/**
 * @extends ServiceEntityRepository<Shares>
 *
 * @method Shares|null find($id, $lockMode = null, $lockVersion = null)
 * @method Shares|null findOneBy(array $criteria, array $orderBy = null)
 * @method Shares[]    findAll()
 * @method Shares[]    findBy(array $criteria, array $orderBy = null, $limit = null, $offset = null)
 */
class SharesRepository extends ServiceEntityRepository
{
    public function __construct(ManagerRegistry $registry)
    {
        parent::__construct($registry, Shares::class);
    }

//    /**
//     * @return Shares[] Returns an array of Shares objects
//     */
//    public function findByExampleField($value): array
//    {
//        return $this->createQueryBuilder('s')
//            ->andWhere('s.exampleField = :val')
//            ->setParameter('val', $value)
//            ->orderBy('s.id', 'ASC')
//            ->setMaxResults(10)
//            ->getQuery()
//            ->getResult()
//        ;
//    }

//    public function findOneBySomeField($value): ?Shares
//    {
//        return $this->createQueryBuilder('s')
//            ->andWhere('s.exampleField = :val')
//            ->setParameter('val', $value)
//            ->getQuery()
//            ->getOneOrNullResult()
//        ;
//    }
}

================
File: src/Repository/TransactionArgentRepository.php
================
<?php

namespace App\Repository;

use App\Entity\TransactionArgent;
use Doctrine\Bundle\DoctrineBundle\Repository\ServiceEntityRepository;
use Doctrine\Persistence\ManagerRegistry;

/**
 * @extends ServiceEntityRepository<TransactionArgent>
 *
 * @method TransactionArgent|null find($id, $lockMode = null, $lockVersion = null)
 * @method TransactionArgent|null findOneBy(array $criteria, array $orderBy = null)
 * @method TransactionArgent[]    findAll()
 * @method TransactionArgent[]    findBy(array $criteria, array $orderBy = null, $limit = null, $offset = null)
 */
class TransactionArgentRepository extends ServiceEntityRepository
{
    public function __construct(ManagerRegistry $registry)
    {
        parent::__construct($registry, TransactionArgent::class);
    }

//    /**
//     * @return TransactionArgent[] Returns an array of TransactionArgent objects
//     */
//    public function findByExampleField($value): array
//    {
//        return $this->createQueryBuilder('t')
//            ->andWhere('t.exampleField = :val')
//            ->setParameter('val', $value)
//            ->orderBy('t.id', 'ASC')
//            ->setMaxResults(10)
//            ->getQuery()
//            ->getResult()
//        ;
//    }

//    public function findOneBySomeField($value): ?TransactionArgent
//    {
//        return $this->createQueryBuilder('t')
//            ->andWhere('t.exampleField = :val')
//            ->setParameter('val', $value)
//            ->getQuery()
//            ->getOneOrNullResult()
//        ;
//    }
}

================
File: src/Repository/UserGroupsRepository.php
================
<?php

namespace App\Repository;

use App\Entity\UserGroups;
use Doctrine\Bundle\DoctrineBundle\Repository\ServiceEntityRepository;
use Doctrine\Persistence\ManagerRegistry;

/**
 * @extends ServiceEntityRepository<UserGroups>
 *
 * @method UserGroups|null find($id, $lockMode = null, $lockVersion = null)
 * @method UserGroups|null findOneBy(array $criteria, array $orderBy = null)
 * @method UserGroups[]    findAll()
 * @method UserGroups[]    findBy(array $criteria, array $orderBy = null, $limit = null, $offset = null)
 */
class UserGroupsRepository extends ServiceEntityRepository
{
    public function __construct(ManagerRegistry $registry)
    {
        parent::__construct($registry, UserGroups::class);
    }

//    /**
//     * @return UserGroups[] Returns an array of UserGroups objects
//     */
//    public function findByExampleField($value): array
//    {
//        return $this->createQueryBuilder('u')
//            ->andWhere('u.exampleField = :val')
//            ->setParameter('val', $value)
//            ->orderBy('u.id', 'ASC')
//            ->setMaxResults(10)
//            ->getQuery()
//            ->getResult()
//        ;
//    }

//    public function findOneBySomeField($value): ?UserGroups
//    {
//        return $this->createQueryBuilder('u')
//            ->andWhere('u.exampleField = :val')
//            ->setParameter('val', $value)
//            ->getQuery()
//            ->getOneOrNullResult()
//        ;
//    }
}

================
File: src/Repository/UserIntrestsRepository.php
================
<?php

namespace App\Repository;

use App\Entity\UserIntrests;
use Doctrine\Bundle\DoctrineBundle\Repository\ServiceEntityRepository;
use Doctrine\Persistence\ManagerRegistry;

/**
 * @extends ServiceEntityRepository<UserIntrests>
 *
 * @method UserIntrests|null find($id, $lockMode = null, $lockVersion = null)
 * @method UserIntrests|null findOneBy(array $criteria, array $orderBy = null)
 * @method UserIntrests[]    findAll()
 * @method UserIntrests[]    findBy(array $criteria, array $orderBy = null, $limit = null, $offset = null)
 */
class UserIntrestsRepository extends ServiceEntityRepository
{
    public function __construct(ManagerRegistry $registry)
    {
        parent::__construct($registry, UserIntrests::class);
    }

//    /**
//     * @return UserIntrests[] Returns an array of UserIntrests objects
//     */
//    public function findByExampleField($value): array
//    {
//        return $this->createQueryBuilder('u')
//            ->andWhere('u.exampleField = :val')
//            ->setParameter('val', $value)
//            ->orderBy('u.id', 'ASC')
//            ->setMaxResults(10)
//            ->getQuery()
//            ->getResult()
//        ;
//    }

//    public function findOneBySomeField($value): ?UserIntrests
//    {
//        return $this->createQueryBuilder('u')
//            ->andWhere('u.exampleField = :val')
//            ->setParameter('val', $value)
//            ->getQuery()
//            ->getOneOrNullResult()
//        ;
//    }
}

================
File: src/Repository/UserMessagesRepository.php
================
<?php

namespace App\Repository;

use App\Entity\UserMessages;
use Doctrine\Bundle\DoctrineBundle\Repository\ServiceEntityRepository;
use Doctrine\Persistence\ManagerRegistry;

/**
 * @extends ServiceEntityRepository<UserMessages>
 *
 * @method UserMessages|null find($id, $lockMode = null, $lockVersion = null)
 * @method UserMessages|null findOneBy(array $criteria, array $orderBy = null)
 * @method UserMessages[]    findAll()
 * @method UserMessages[]    findBy(array $criteria, array $orderBy = null, $limit = null, $offset = null)
 */
class UserMessagesRepository extends ServiceEntityRepository
{
    public function __construct(ManagerRegistry $registry)
    {
        parent::__construct($registry, UserMessages::class);
    }

//    /**
//     * @return UserMessages[] Returns an array of UserMessages objects
//     */
//    public function findByExampleField($value): array
//    {
//        return $this->createQueryBuilder('u')
//            ->andWhere('u.exampleField = :val')
//            ->setParameter('val', $value)
//            ->orderBy('u.id', 'ASC')
//            ->setMaxResults(10)
//            ->getQuery()
//            ->getResult()
//        ;
//    }

//    public function findOneBySomeField($value): ?UserMessages
//    {
//        return $this->createQueryBuilder('u')
//            ->andWhere('u.exampleField = :val')
//            ->setParameter('val', $value)
//            ->getQuery()
//            ->getOneOrNullResult()
//        ;
//    }
}

================
File: src/Repository/UserProfileRepository.php
================
<?php

namespace App\Repository;

use App\Entity\UserProfile;
use Doctrine\Bundle\DoctrineBundle\Repository\ServiceEntityRepository;
use Doctrine\Persistence\ManagerRegistry;

/**
 * @extends ServiceEntityRepository<UserProfile>
 *
 * @method UserProfile|null find($id, $lockMode = null, $lockVersion = null)
 * @method UserProfile|null findOneBy(array $criteria, array $orderBy = null)
 * @method UserProfile[]    findAll()
 * @method UserProfile[]    findBy(array $criteria, array $orderBy = null, $limit = null, $offset = null)
 */
class UserProfileRepository extends ServiceEntityRepository
{
    public function __construct(ManagerRegistry $registry)
    {
        parent::__construct($registry, UserProfile::class);
    }

//    /**
//     * @return UserProfile[] Returns an array of UserProfile objects
//     */
//    public function findByExampleField($value): array
//    {
//        return $this->createQueryBuilder('u')
//            ->andWhere('u.exampleField = :val')
//            ->setParameter('val', $value)
//            ->orderBy('u.id', 'ASC')
//            ->setMaxResults(10)
//            ->getQuery()
//            ->getResult()
//        ;
//    }

//    public function findOneBySomeField($value): ?UserProfile
//    {
//        return $this->createQueryBuilder('u')
//            ->andWhere('u.exampleField = :val')
//            ->setParameter('val', $value)
//            ->getQuery()
//            ->getOneOrNullResult()
//        ;
//    }
}

================
File: src/Repository/UserRewardsRepository.php
================
<?php

namespace App\Repository;

use App\Entity\UserRewards;
use Doctrine\Bundle\DoctrineBundle\Repository\ServiceEntityRepository;
use Doctrine\Persistence\ManagerRegistry;

/**
 * @extends ServiceEntityRepository<UserRewards>
 *
 * @method UserRewards|null find($id, $lockMode = null, $lockVersion = null)
 * @method UserRewards|null findOneBy(array $criteria, array $orderBy = null)
 * @method UserRewards[]    findAll()
 * @method UserRewards[]    findBy(array $criteria, array $orderBy = null, $limit = null, $offset = null)
 */
class UserRewardsRepository extends ServiceEntityRepository
{
    public function __construct(ManagerRegistry $registry)
    {
        parent::__construct($registry, UserRewards::class);
    }

//    /**
//     * @return UserRewards[] Returns an array of UserRewards objects
//     */
//    public function findByExampleField($value): array
//    {
//        return $this->createQueryBuilder('u')
//            ->andWhere('u.exampleField = :val')
//            ->setParameter('val', $value)
//            ->orderBy('u.id', 'ASC')
//            ->setMaxResults(10)
//            ->getQuery()
//            ->getResult()
//        ;
//    }

//    public function findOneBySomeField($value): ?UserRewards
//    {
//        return $this->createQueryBuilder('u')
//            ->andWhere('u.exampleField = :val')
//            ->setParameter('val', $value)
//            ->getQuery()
//            ->getOneOrNullResult()
//        ;
//    }
}

================
File: src/Repository/UsersRepository.php
================
<?php

namespace App\Repository;

use App\Entity\Users;
use Doctrine\Bundle\DoctrineBundle\Repository\ServiceEntityRepository;
use Doctrine\Persistence\ManagerRegistry;

/**
 * @extends ServiceEntityRepository<Users>
 *
 * @method Users|null find($id, $lockMode = null, $lockVersion = null)
 * @method Users|null findOneBy(array $criteria, array $orderBy = null)
 * @method Users[]    findAll()
 * @method Users[]    findBy(array $criteria, array $orderBy = null, $limit = null, $offset = null)
 */
class UsersRepository extends ServiceEntityRepository
{
    public function __construct(ManagerRegistry $registry)
    {
        parent::__construct($registry, Users::class);
    }

//    /**
//     * @return Users[] Returns an array of Users objects
//     */
//    public function findByExampleField($value): array
//    {
//        return $this->createQueryBuilder('u')
//            ->andWhere('u.exampleField = :val')
//            ->setParameter('val', $value)
//            ->orderBy('u.id', 'ASC')
//            ->setMaxResults(10)
//            ->getQuery()
//            ->getResult()
//        ;
//    }

//    public function findOneBySomeField($value): ?Users
//    {
//        return $this->createQueryBuilder('u')
//            ->andWhere('u.exampleField = :val')
//            ->setParameter('val', $value)
//            ->getQuery()
//            ->getOneOrNullResult()
//        ;
//    }
}

================
File: src/Repository/VisiteUtilisateurRepository.php
================
<?php

namespace App\Repository;

use App\Entity\VisiteUtilisateur;
use Doctrine\Bundle\DoctrineBundle\Repository\ServiceEntityRepository;
use Doctrine\Persistence\ManagerRegistry;

/**
 * @extends ServiceEntityRepository<VisiteUtilisateur>
 *
 * @method VisiteUtilisateur|null find($id, $lockMode = null, $lockVersion = null)
 * @method VisiteUtilisateur|null findOneBy(array $criteria, array $orderBy = null)
 * @method VisiteUtilisateur[]    findAll()
 * @method VisiteUtilisateur[]    findBy(array $criteria, array $orderBy = null, $limit = null, $offset = null)
 */
class VisiteUtilisateurRepository extends ServiceEntityRepository
{
    public function __construct(ManagerRegistry $registry)
    {
        parent::__construct($registry, VisiteUtilisateur::class);
    }

//    /**
//     * @return VisiteUtilisateur[] Returns an array of VisiteUtilisateur objects
//     */
//    public function findByExampleField($value): array
//    {
//        return $this->createQueryBuilder('v')
//            ->andWhere('v.exampleField = :val')
//            ->setParameter('val', $value)
//            ->orderBy('v.id', 'ASC')
//            ->setMaxResults(10)
//            ->getQuery()
//            ->getResult()
//        ;
//    }

//    public function findOneBySomeField($value): ?VisiteUtilisateur
//    {
//        return $this->createQueryBuilder('v')
//            ->andWhere('v.exampleField = :val')
//            ->setParameter('val', $value)
//            ->getQuery()
//            ->getOneOrNullResult()
//        ;
//    }
}

================
File: src/Repository/WorkerRaitingsRepository.php
================
<?php

namespace App\Repository;

use App\Entity\WorkerRaitings;
use Doctrine\Bundle\DoctrineBundle\Repository\ServiceEntityRepository;
use Doctrine\Persistence\ManagerRegistry;

/**
 * @extends ServiceEntityRepository<WorkerRaitings>
 *
 * @method WorkerRaitings|null find($id, $lockMode = null, $lockVersion = null)
 * @method WorkerRaitings|null findOneBy(array $criteria, array $orderBy = null)
 * @method WorkerRaitings[]    findAll()
 * @method WorkerRaitings[]    findBy(array $criteria, array $orderBy = null, $limit = null, $offset = null)
 */
class WorkerRaitingsRepository extends ServiceEntityRepository
{
    public function __construct(ManagerRegistry $registry)
    {
        parent::__construct($registry, WorkerRaitings::class);
    }

//    /**
//     * @return WorkerRaitings[] Returns an array of WorkerRaitings objects
//     */
//    public function findByExampleField($value): array
//    {
//        return $this->createQueryBuilder('w')
//            ->andWhere('w.exampleField = :val')
//            ->setParameter('val', $value)
//            ->orderBy('w.id', 'ASC')
//            ->setMaxResults(10)
//            ->getQuery()
//            ->getResult()
//        ;
//    }

//    public function findOneBySomeField($value): ?WorkerRaitings
//    {
//        return $this->createQueryBuilder('w')
//            ->andWhere('w.exampleField = :val')
//            ->setParameter('val', $value)
//            ->getQuery()
//            ->getOneOrNullResult()
//        ;
//    }
}

================
File: symfony.lock
================
{
    "doctrine/doctrine-bundle": {
        "version": "2.13",
        "recipe": {
            "repo": "github.com/symfony/recipes",
            "branch": "main",
            "version": "2.4",
            "ref": "91690c0a440faba1a3676256bcca2b4aa9f55b72"
        },
        "files": [
            "./config/packages/doctrine.yaml",
            "./src/Entity/.gitignore",
            "./src/Repository/.gitignore"
        ]
    },
    "doctrine/doctrine-migrations-bundle": {
        "version": "3.4",
        "recipe": {
            "repo": "github.com/symfony/recipes",
            "branch": "main",
            "version": "3.1",
            "ref": "1d01ec03c6ecbd67c3375c5478c9a423ae5d6a33"
        },
        "files": [
            "./config/packages/doctrine_migrations.yaml",
            "./migrations/.gitignore"
        ]
    },
    "phpunit/phpunit": {
        "version": "9.6",
        "recipe": {
            "repo": "github.com/symfony/recipes",
            "branch": "main",
            "version": "9.6",
            "ref": "6a9341aa97d441627f8bd424ae85dc04c944f8b4"
        },
        "files": [
            "./.env.test",
            "./phpunit.xml.dist",
            "./tests/bootstrap.php"
        ]
    },
    "symfony/console": {
        "version": "6.1",
        "recipe": {
            "repo": "github.com/symfony/recipes",
            "branch": "main",
            "version": "5.3",
            "ref": "1781ff40d8a17d87cf53f8d4cf0c8346ed2bb461"
        },
        "files": [
            "./bin/console"
        ]
    },
    "symfony/debug-bundle": {
        "version": "6.1",
        "recipe": {
            "repo": "github.com/symfony/recipes",
            "branch": "main",
            "version": "5.3",
            "ref": "5aa8aa48234c8eb6dbdd7b3cd5d791485d2cec4b"
        },
        "files": [
            "./config/packages/debug.yaml"
        ]
    },
    "symfony/flex": {
        "version": "2.5",
        "recipe": {
            "repo": "github.com/symfony/recipes",
            "branch": "main",
            "version": "2.4",
            "ref": "52e9754527a15e2b79d9a610f98185a1fe46622a"
        },
        "files": [
            "./.env",
            "./.env.dev"
        ]
    },
    "symfony/framework-bundle": {
        "version": "6.1",
        "recipe": {
            "repo": "github.com/symfony/recipes",
            "branch": "main",
            "version": "5.4",
            "ref": "3cd216a4d007b78d8554d44a5b1c0a446dab24fb"
        },
        "files": [
            "./config/packages/cache.yaml",
            "./config/packages/framework.yaml",
            "./config/preload.php",
            "./config/routes/framework.yaml",
            "./config/services.yaml",
            "./public/index.php",
            "./src/Controller/.gitignore",
            "./src/Kernel.php"
        ]
    },
    "symfony/mailer": {
        "version": "6.1",
        "recipe": {
            "repo": "github.com/symfony/recipes",
            "branch": "main",
            "version": "4.3",
            "ref": "09051cfde49476e3c12cd3a0e44289ace1c75a4f"
        },
        "files": [
            "./config/packages/mailer.yaml"
        ]
    },
    "symfony/maker-bundle": {
        "version": "1.50",
        "recipe": {
            "repo": "github.com/symfony/recipes",
            "branch": "main",
            "version": "1.0",
            "ref": "fadbfe33303a76e25cb63401050439aa9b1a9c7f"
        }
    },
    "symfony/messenger": {
        "version": "6.1",
        "recipe": {
            "repo": "github.com/symfony/recipes",
            "branch": "main",
            "version": "6.0",
            "ref": "ba1ac4e919baba5644d31b57a3284d6ba12d52ee"
        },
        "files": [
            "./config/packages/messenger.yaml"
        ]
    },
    "symfony/monolog-bundle": {
        "version": "3.10",
        "recipe": {
            "repo": "github.com/symfony/recipes",
            "branch": "main",
            "version": "3.7",
            "ref": "aff23899c4440dd995907613c1dd709b6f59503f"
        },
        "files": [
            "./config/packages/monolog.yaml"
        ]
    },
    "symfony/notifier": {
        "version": "6.1",
        "recipe": {
            "repo": "github.com/symfony/recipes",
            "branch": "main",
            "version": "5.0",
            "ref": "178877daf79d2dbd62129dd03612cb1a2cb407cc"
        },
        "files": [
            "./config/packages/notifier.yaml"
        ]
    },
    "symfony/phpunit-bridge": {
        "version": "7.2",
        "recipe": {
            "repo": "github.com/symfony/recipes",
            "branch": "main",
            "version": "6.3",
            "ref": "a411a0480041243d97382cac7984f7dce7813c08"
        },
        "files": [
            "./.env.test",
            "./bin/phpunit",
            "./phpunit.xml.dist",
            "./tests/bootstrap.php"
        ]
    },
    "symfony/routing": {
        "version": "6.1",
        "recipe": {
            "repo": "github.com/symfony/recipes",
            "branch": "main",
            "version": "6.1",
            "ref": "a44010c0d06989bd4f154aa07d2542d47caf5b83"
        },
        "files": [
            "./config/packages/routing.yaml",
            "./config/routes.yaml"
        ]
    },
    "symfony/security-bundle": {
        "version": "6.1",
        "recipe": {
            "repo": "github.com/symfony/recipes",
            "branch": "main",
            "version": "6.0",
            "ref": "8a5b112826f7d3d5b07027f93786ae11a1c7de48"
        },
        "files": [
            "./config/packages/security.yaml"
        ]
    },
    "symfony/translation": {
        "version": "6.1",
        "recipe": {
            "repo": "github.com/symfony/recipes",
            "branch": "main",
            "version": "5.3",
            "ref": "e28e27f53663cc34f0be2837aba18e3a1bef8e7b"
        },
        "files": [
            "./config/packages/translation.yaml",
            "./translations/.gitignore"
        ]
    },
    "symfony/twig-bundle": {
        "version": "6.1",
        "recipe": {
            "repo": "github.com/symfony/recipes",
            "branch": "main",
            "version": "5.4",
            "ref": "bb2178c57eee79e6be0b297aa96fc0c0def81387"
        },
        "files": [
            "./config/packages/twig.yaml",
            "./templates/base.html.twig"
        ]
    },
    "symfony/validator": {
        "version": "6.1",
        "recipe": {
            "repo": "github.com/symfony/recipes",
            "branch": "main",
            "version": "5.3",
            "ref": "c32cfd98f714894c4f128bb99aa2530c1227603c"
        },
        "files": [
            "./config/packages/validator.yaml"
        ]
    },
    "symfony/web-profiler-bundle": {
        "version": "6.1",
        "recipe": {
            "repo": "github.com/symfony/recipes",
            "branch": "main",
            "version": "6.1",
            "ref": "8b51135b84f4266e3b4c8a6dc23c9d1e32e543b7"
        },
        "files": [
            "./config/packages/web_profiler.yaml",
            "./config/routes/web_profiler.yaml"
        ]
    },
    "twig/extra-bundle": {
        "version": "v3.8.0"
    }
}

================
File: templates/auth/auth.html.twig
================
{% extends 'base.html.twig' %}

{% block title %}Hello AuthController!{% endblock %}

{% block body %}
<style>
    .example-wrapper { margin: 1em auto; max-width: 800px; width: 95%; font: 18px/1.5 sans-serif; }
    .example-wrapper code { background: #F5F5F5; padding: 2px 6px; }
</style>

<div class="example-wrapper">
    <h1>Hello {{ controller_name }}! ✅</h1>

    This friendly message is coming from:
    <ul>
        <li>Your controller at <code><a href="{{ 'C:/Users/user/PiSymfony/src/Controller/AuthController.php'|file_link(0) }}">src/Controller/AuthController.php</a></code></li>
        <li>Your template at <code><a href="{{ 'C:/Users/user/PiSymfony/templates/auth/index.html.twig'|file_link(0) }}">templates/auth/index.html.twig</a></code></li>
    </ul>
</div>
{% endblock %}

================
File: templates/base.html.twig
================
{# templates/pages/landing.html.twig #}
{% block stylesheets %}
    <!-- Google Fonts & Font Awesome -->
    <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@400;600;700&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">

    <!-- Your compiled CSS (from Symfony Encore) -->
    <link rel="stylesheet" href="{{ asset('css/root.css') }}">
{% endblock %}

{% block body %}
<header class="header">
    <nav class="nav-container">
        <div class="logo">
            <img src="{{ asset('images/logo.svg') }}" alt="Connect Sphere" class="logo-img">
        </div>
        <div class="nav-links">
            <a href="#" class="nav-link">About</a>
            <a href="#" class="nav-link">Events</a>
            <a href="#" class="nav-link">Speakers</a>
            <a href="#" class="nav-link">Tickets</a>
            <a href="#" class="nav-link">Blogs</a>
            <a href="#" class="contact-btn nav-link">Contact</a>
            <i class="fas fa-search"></i>
        </div>
    </nav>
</header>

<main>
    {# HERO SECTION #}
    <section class="hero">
        <div class="hero-content">
            <!-- Left Column: Text -->
            <div class="hero-text">
                <!-- You can incorporate date/limited seats info here if desired -->
                <p class="event-date" style="color: #F96358; font-weight: 600;">
                    9 June 2023 | Limited Seats
                </p>
                <h1 class="hero-title">
                    The Ultimate Platform for Planning and Promoting Successful Events
                </h1>
                <p class="hero-subtitle">
                    Connect Sphere helps you create unforgettable experiences with our comprehensive event management tools.
                </p>
                <!-- Primary Call-to-Action -->
                <a href="#" class="cta-btn">Buy Tickets</a>
            </div>

            <!-- Right Column: Illustration/Image -->
            <div class="hero-illustration">
                <!-- Replace with your actual hero image -->
                <img src="{{ asset('images/hero-illustration.png') }}" alt="Hero Illustration">
            </div>
        </div>

        {# Optional: Social Icons, absolutely positioned in hero #}
        <div class="social-icons">
            <a href="#" class="social-icon"><i class="fab fa-facebook"></i></a>
            <a href="#" class="social-icon"><i class="fab fa-twitter"></i></a>
            <a href="#" class="social-icon"><i class="fab fa-instagram"></i></a>
            <a href="#" class="social-icon"><i class="fab fa-linkedin"></i></a>
        </div>
    </section>

    {# WHO WE ARE SECTION #}
    <section class="section">
        <h2 class="section-title">WHO WE ARE</h2>
        <p class="section-subtitle">
            We are a leading event management platform dedicated to helping you create exceptional experiences through innovative technology and expert support.
        </p>
        <div class="cards-grid">
            <div class="card">
                <div class="card-icon"><i class="fas fa-globe"></i></div>
                <h3>Global Network</h3>
                <p>Connect with event professionals worldwide</p>
            </div>
            <div class="card">
                <div class="card-icon"><i class="fas fa-tools"></i></div>
                <h3>Advanced Tools</h3>
                <p>Powerful features for event management</p>
            </div>
            <div class="card">
                <div class="card-icon"><i class="fas fa-palette"></i></div>
                <h3>Customizable Pages</h3>
                <p>Create unique event pages easily</p>
            </div>
            <div class="card">
                <div class="card-icon"><i class="fas fa-bullhorn"></i></div>
                <h3>Powerful Marketing</h3>
                <p>Reach your target audience effectively</p>
            </div>
        </div>
    </section>
</main>

<footer class="footer">
    <button class="contact-btn">Contact Us</button>
</footer>
{% endblock %}

================
File: templates/chatbot/chatbot.html.twig
================
{% extends 'base.html.twig' %}

{% block title %}Hello ChatbotController!{% endblock %}

{% block body %}
<style>
    .example-wrapper { margin: 1em auto; max-width: 800px; width: 95%; font: 18px/1.5 sans-serif; }
    .example-wrapper code { background: #F5F5F5; padding: 2px 6px; }
</style>

<div class="example-wrapper">
    <h1>Hello {{ controller_name }}! ✅</h1>

    This friendly message is coming from:
    <ul>
        <li>Your controller at <code><a href="{{ 'C:/Users/user/PiSymfony/src/Controller/ChatbotController.php'|file_link(0) }}">src/Controller/ChatbotController.php</a></code></li>
        <li>Your template at <code><a href="{{ 'C:/Users/user/PiSymfony/templates/chatbot/index.html.twig'|file_link(0) }}">templates/chatbot/index.html.twig</a></code></li>
    </ul>
</div>
{% endblock %}

================
File: templates/create_job/createjob.html.twig
================
{% extends 'base.html.twig' %}

{% block title %}Create a Job{% endblock %}


{% block stylesheets %}
    <link rel="stylesheet" href="{{ asset('css/create_job_form.css') }}">
{% endblock %}


{% block body %}
<div class="create-job-wrapper">
    <h1>Create Job</h1>
    {{ form_start(form) }}
        {{ form_widget(form) }}
        <button type="submit" class="submit-btn">Post Job</button>
    {{ form_end(form) }}
</div>
{% endblock %}

================
File: templates/events/events.html.twig
================
{% extends 'base.html.twig' %}

{% block title %}Hello EventsController!{% endblock %}

{% block body %}
<style>
    .example-wrapper { margin: 1em auto; max-width: 800px; width: 95%; font: 18px/1.5 sans-serif; }
    .example-wrapper code { background: #F5F5F5; padding: 2px 6px; }
</style>

<div class="example-wrapper">
    <h1>Hello {{ controller_name }}! ✅</h1>

    This friendly message is coming from:
    <ul>
        <li>Your controller at <code><a href="{{ 'C:/Users/user/PiSymfony/src/Controller/EventsController.php'|file_link(0) }}">src/Controller/EventsController.php</a></code></li>
        <li>Your template at <code><a href="{{ 'C:/Users/user/PiSymfony/templates/events/index.html.twig'|file_link(0) }}">templates/events/index.html.twig</a></code></li>
    </ul>
</div>
{% endblock %}

================
File: templates/explore/explore.html.twig
================
{% extends 'base.html.twig' %}

{% block title %}Hello ExploreController!{% endblock %}

{% block body %}
<style>
    .example-wrapper { margin: 1em auto; max-width: 800px; width: 95%; font: 18px/1.5 sans-serif; }
    .example-wrapper code { background: #F5F5F5; padding: 2px 6px; }
</style>

<div class="example-wrapper">
    <h1>Hello {{ controller_name }}! ✅</h1>

    This friendly message is coming from:
    <ul>
        <li>Your controller at <code><a href="{{ 'C:/Users/user/PiSymfony/src/Controller/ExploreController.php'|file_link(0) }}">src/Controller/ExploreController.php</a></code></li>
        <li>Your template at <code><a href="{{ 'C:/Users/user/PiSymfony/templates/explore/index.html.twig'|file_link(0) }}">templates/explore/index.html.twig</a></code></li>
    </ul>
</div>
{% endblock %}

================
File: templates/group/group.html.twig
================
{% extends 'base.html.twig' %}

{% block title %}Hello GroupController!{% endblock %}

{% block body %}
<style>
    .example-wrapper { margin: 1em auto; max-width: 800px; width: 95%; font: 18px/1.5 sans-serif; }
    .example-wrapper code { background: #F5F5F5; padding: 2px 6px; }
</style>

<div class="example-wrapper">
    <h1>Hello {{ controller_name }}! ✅</h1>

    This friendly message is coming from:
    <ul>
        <li>Your controller at <code><a href="{{ 'C:/Users/user/PiSymfony/src/Controller/GroupController.php'|file_link(0) }}">src/Controller/GroupController.php</a></code></li>
        <li>Your template at <code><a href="{{ 'C:/Users/user/PiSymfony/templates/group/index.html.twig'|file_link(0) }}">templates/group/index.html.twig</a></code></li>
    </ul>
</div>
{% endblock %}

================
File: templates/jobapplications/jobapplications.html.twig
================
{% extends 'base.html.twig' %}

{% block title %}Hello JobApplicationsController!{% endblock %}

{% block body %}
<style>
    .example-wrapper { margin: 1em auto; max-width: 800px; width: 95%; font: 18px/1.5 sans-serif; }
    .example-wrapper code { background: #F5F5F5; padding: 2px 6px; }
</style>

<div class="example-wrapper">
    <h1>Hello {{ controller_name }}! ✅</h1>

    This friendly message is coming from:
    <ul>
        <li>Your controller at <code><a href="{{ 'C:/Users/user/PiSymfony/src/Controller/JobApplicationsController.php'|file_link(0) }}">src/Controller/JobApplicationsController.php</a></code></li>
        <li>Your template at <code><a href="{{ 'C:/Users/user/PiSymfony/templates/job_applications/index.html.twig'|file_link(0) }}">templates/job_applications/index.html.twig</a></code></li>
    </ul>
</div>
{% endblock %}

================
File: templates/jobfeed/jobfeed.html.twig
================
{% extends 'base.html.twig' %}

{% block title %}All Job Opportunities{% endblock %}

{% block stylesheets %}
    {{ parent() }}
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.3/font/bootstrap-icons.min.css">
    <style>
        .job-card {
            transition: transform 0.2s;
            border: 1px solid #e0e0e0;
            border-radius: 10px;
            margin-bottom: 1.5rem;
        }
        .job-card:hover {
            transform: translateY(-3px);
            box-shadow: 0 4px 15px rgba(0, 0, 0, 0.1);
        }
        .card-header {
            background-color: #f8f9fa;
            border-bottom: 1px solid #e0e0e0;
        }
        .salary-badge {
            background-color: #e8f5e9;
            color: #2e7d32;
            padding: 5px 10px;
            border-radius: 20px;
            font-weight: 500;
        }
        .deadline-alert {
            background-color: #fff3e0;
            color: #ef6c00;
            padding: 8px 15px;
            border-radius: 5px;
        }
    </style>
{% endblock %}

{% block body %}
<div class="container py-4">
    <h1 class="text-center mb-5 display-4">All Available Jobs</h1>
    
    <div class="row">
        {% if jobs|length > 0 %}
            {% for job in jobs %}
            <div class="col-12 mb-4">
                <div class="card job-card">
                    <div class="card-header">
                        <div class="d-flex justify-content-between align-items-center">
                            <div>
                                <h2 class="h4 mb-0">{{ job.jobTitle }}</h2>
                                {% if job.eventTitle %}
                                <p class="mb-0 text-muted mt-1">
                                    <i class="bi bi-calendar-event"></i> {{ job.eventTitle }}
                                </p>
                                {% endif %}
                            </div>
                            <span class="salary-badge">
                                {{ job.currency }} {{ job.minSalary }} - {{ job.currency }} {{ job.maxSalary }}
                            </span>
                        </div>
                    </div>
                    
                    <div class="card-body">
                        <div class="row">
                            <div class="col-md-8">
                                <h5 class="mb-3">Job Details</h5>
                                <div class="row mb-4">
                                    <div class="col-6">
                                        <p class="mb-2">
                                            <i class="bi bi-geo-alt"></i> <strong>Location:</strong><br>
                                            {{ job.jobLocation }}
                                        </p>
                                        <p class="mb-2">
                                            <i class="bi bi-clock-history"></i> <strong>Type:</strong><br>
                                            {{ job.employmentType }}
                                        </p>
                                    </div>
                                    <div class="col-6">
                                        <p class="mb-2">
                                            <i class="bi bi-person"></i> <strong>Recruiter:</strong><br>
                                            {{ job.recruiterName }}
                                        </p>
                                        <p class="mb-0">
                                            <i class="bi bi-envelope"></i> <strong>Contact:</strong><br>
                                            {{ job.recruiterEmail }}
                                        </p>
                                    </div>
                                </div>
                                
                                <h5 class="mb-3">Description</h5>
                                <p class="card-text">{{ job.jobDescreption }}</p>
                            </div>
                            
                            <div class="col-md-4 border-start">
                                <div class="ps-md-3">
                                    <h5 class="mb-3">Key Information</h5>
                                    {% if job.applicationDeadLine %}
                                    <div class="deadline-alert mb-3">
                                        <i class="bi bi-exclamation-triangle"></i>
                                        Application Deadline:<br>
                                        <strong>{{ job.applicationDeadLine }}</strong>
                                    </div>
                                    {% endif %}
                                    
                                    <div class="mb-3">
                                        <p class="mb-1">
                                            <i class="bi bi-calendar-plus"></i> Posted: 
                                            {% if job.createdAt %}
                                                {{ job.createdAt }}
                                            {% else %}
                                                N/A
                                            {% endif %}
                                        </p>
                                    </div>
                                    
                                    <div class="d-grid gap-2">
                                        <button class="btn btn-primary btn-lg">
                                            <i class="bi bi-send"></i> Apply Now
                                        </button>
                                        <button class="btn btn-outline-secondary">
                                            <i class="bi bi-share"></i> Share Job
                                        </button>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            {% endfor %}
        {% else %}
            <div class="col-12">
                <div class="alert alert-warning text-center py-4">
                    <h2 class="h4 mb-3"><i class="bi bi-exclamation-circle"></i> No Jobs Available</h2>
                    <p class="mb-0">Check back later for new opportunities!</p>
                </div>
            </div>
        {% endif %}
    </div>
</div>
{% endblock %} 

<h1>🔥 Job Feed Works!</h1>

<ul>
    {% for job in jobs %}
        <li>{{ job.jobTitle }}</li>
    {% else %}
        <li>No jobs found.</li>
    {% endfor %}
</ul>

================
File: templates/organizer/organizer.html.twig
================
{% extends 'base.html.twig' %}

{% block title %}Hello OrganizerController!{% endblock %}

{% block body %}
<style>
    .example-wrapper { margin: 1em auto; max-width: 800px; width: 95%; font: 18px/1.5 sans-serif; }
    .example-wrapper code { background: #F5F5F5; padding: 2px 6px; }
</style>

<div class="example-wrapper">
    <h1>Hello {{ controller_name }}! ✅</h1>

    This friendly message is coming from:
    <ul>
        <li>Your controller at <code><a href="{{ 'C:/Users/user/PiSymfony/src/Controller/OrganizerController.php'|file_link(0) }}">src/Controller/OrganizerController.php</a></code></li>
        <li>Your template at <code><a href="{{ 'C:/Users/user/PiSymfony/templates/organizer/index.html.twig'|file_link(0) }}">templates/organizer/index.html.twig</a></code></li>
    </ul>
</div>
{% endblock %}

================
File: templates/profile/profile.html.twig
================
{% extends 'base.html.twig' %}

{% block title %}Hello ProfileController!{% endblock %}

{% block body %}
<style>
    .example-wrapper { margin: 1em auto; max-width: 800px; width: 95%; font: 18px/1.5 sans-serif; }
    .example-wrapper code { background: #F5F5F5; padding: 2px 6px; }
</style>

<div class="example-wrapper">
    <h1>Hello {{ controller_name }}! ✅</h1>

    This friendly message is coming from:
    <ul>
        <li>Your controller at <code><a href="{{ 'C:/Users/user/PiSymfony/src/Controller/ProfileController.php'|file_link(0) }}">src/Controller/ProfileController.php</a></code></li>
        <li>Your template at <code><a href="{{ 'C:/Users/user/PiSymfony/templates/profile/index.html.twig'|file_link(0) }}">templates/profile/index.html.twig</a></code></li>
    </ul>
</div>
{% endblock %}

================
File: templates/social/social.html.twig
================
{% extends 'base.html.twig' %}

{% block title %}Hello SocialController!{% endblock %}

{% block body %}
<style>
    .example-wrapper { margin: 1em auto; max-width: 800px; width: 95%; font: 18px/1.5 sans-serif; }
    .example-wrapper code { background: #F5F5F5; padding: 2px 6px; }
</style>

<div class="example-wrapper">
    <h1>Hello {{ controller_name }}! ✅</h1>

    This friendly message is coming from:
    <ul>
        <li>Your controller at <code><a href="{{ 'C:/Users/user/PiSymfony/src/Controller/SocialController.php'|file_link(0) }}">src/Controller/SocialController.php</a></code></li>
        <li>Your template at <code><a href="{{ 'C:/Users/user/PiSymfony/templates/social/index.html.twig'|file_link(0) }}">templates/social/index.html.twig</a></code></li>
    </ul>
</div>
{% endblock %}

================
File: tests/bootstrap.php
================
<?php

use Symfony\Component\Dotenv\Dotenv;

require dirname(__DIR__).'/vendor/autoload.php';

if (method_exists(Dotenv::class, 'bootEnv')) {
    (new Dotenv())->bootEnv(dirname(__DIR__).'/.env');
}



================================================================
End of Codebase
================================================================
</file>

<file path="src/Command/CreateTestUserCommand.php">
<?php

namespace App\Command;

use App\Entity\Users;
use Doctrine\ORM\EntityManagerInterface;
use Symfony\Component\Console\Command\Command;
use Symfony\Component\Console\Input\InputInterface;
use Symfony\Component\Console\Output\OutputInterface;

class CreateTestUserCommand extends Command
{
    protected static $defaultName = 'app:create-test-user';
    
    private $entityManager;

    public function __construct(EntityManagerInterface $entityManager)
    {
        $this->entityManager = $entityManager;
        parent::__construct();
    }

    protected function execute(InputInterface $input, OutputInterface $output): int
    {
        $user = new Users();
        $user->setUsername('testuser');
        $user->setPassword(password_hash('testpassword', PASSWORD_BCRYPT));
        $user->setEmail('test@example.com');
        $user->setCreatedAt(date('Y-m-d H:i:s'));
        $user->setAge(25);
        $user->setGender('male');
        $user->setPoints(0);
        $user->setArgent(100.00);

        $this->entityManager->persist($user);
        $this->entityManager->flush();

        $output->writeln('Test user created with ID: '.$user->getId());
        
        return Command::SUCCESS;
    }
}
</file>

<file path="src/Controller/application/ApplicationFormController.php">
<?php

namespace App\Controller\application;

use Symfony\Bundle\FrameworkBundle\Controller\AbstractController;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\Routing\Annotation\Route;

class ApplicationFormController extends AbstractController
{
    #[Route('/application/form', name: 'app_application_form')]
    public function index(): Response
    {
        return $this->render('application_form/application_form.html.twig', [
            'controller_name' => 'ApplicationFormController',
        ]);
    }
}
</file>

<file path="src/Controller/chatbot/ChatbotController.php">
<?php

namespace App\Controller\chatbot;

use League\CommonMark\CommonMarkConverter;
use Symfony\Bundle\FrameworkBundle\Controller\AbstractController;
use Symfony\Component\HttpFoundation\JsonResponse;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\HttpFoundation\StreamedResponse;
use Symfony\Component\Routing\Annotation\Route;
use Symfony\Contracts\HttpClient\HttpClientInterface;
use Psr\Log\LoggerInterface; // Pour le logging

class ChatbotController extends AbstractController
{
    private HttpClientInterface $client;
    private LoggerInterface $logger;
    private string $ollamaApiUrl;

    public function __construct(HttpClientInterface $client, LoggerInterface $logger, string $ollamaApiUrl)
    {
        $this->client = $client;
        $this->logger = $logger;
        $this->ollamaApiUrl = $ollamaApiUrl;
    }

    #[Route('/chatbot', name: 'app_chatbot', methods: ['GET'])]
    public function index(): Response
    {
        // Rend la page HTML principale du chatbot
        return $this->render('chatbot/chatbot.html.twig');
    }

    #[Route('/api/chatbot/ask', name: 'api_chatbot_ask', methods: ['POST'])]
    public function ask(Request $request): Response
    {
        // Récupère la question de l'utilisateur depuis la requête AJAX
        $data = json_decode($request->getContent(), true);
        $userInput = $data['prompt'] ?? null;

        // Vérifie si la question est vide
        if (empty($userInput)) {
            return new JsonResponse(['error' => 'Prompt is required.'], Response::HTTP_BAD_REQUEST);
        }

        // Prépare le prompt complet avec les instructions pour le modèle
        $guidance = "Tu es le chatbot officiel de ConnectSphere, une application dédiée à l'organisation et la gestion d'événements. Ta mission est d'aider les utilisateurs en leur présentant clairement les fonctionnalités de l'application et en répondant à leurs questions concernant l'organisation d'événements. Tu dois :" .
                    "- Introduire les principales fonctionnalités de ConnectSphere (consultation des évènements, inscription aux événements, recherche d'événements, création d'événements, gestion de profil, etc.)." .
                    "- Fournir des réponses claires, précises et amicales." .
                    "- Guider l'utilisateur pour trouver les informations dont il a besoin sur l'organisation des événements (localisation, horaires, modalités d'inscription, etc.)." .
                    "- Encourager l'utilisateur à explorer l'application pour découvrir tous les outils disponibles pour faciliter la participation aux événements." .
                    "Reste toujours courtois et utile, et adapte tes réponses selon les questions spécifiques posées par les utilisateurs, et n'oublie pas de donner des reponses très bref et précises";
        $fullPrompt = $userInput . "\n\n" . $guidance; // Combine l'input utilisateur et les instructions

        // Prépare la requête pour l'API Ollama
        $ollamaPayload = [
            'model' => 'llama3.2', // Utilise le modèle que vous avez ('llama3.2:latest' peut aussi marcher)
            'prompt' => $fullPrompt,
            'stream' => true // Demande une réponse en streaming
        ];

        try {
            // Exécute la requête HTTP vers Ollama
            $response = $this->client->request('POST', $this->ollamaApiUrl, [
                'json' => $ollamaPayload,
                'headers' => ['Accept' => 'application/x-ndjson'], // Attend du JSON délimité par des nouvelles lignes
                'timeout' => 120, // Augmente le timeout si nécessaire
            ]);

            // Crée une réponse streamée pour renvoyer les données au fur et à mesure au navigateur
            $streamedResponse = new StreamedResponse(function () use ($response) {
                // Initialise le convertisseur Markdown
                $markdownConverter = new CommonMarkConverter([
                    'html_input' => 'strip', // Sécurité : supprime les tags HTML non désirés du Markdown
                    'allow_unsafe_links' => false, // Sécurité : désactive les liens potentiellement dangereux
                ]);

                $markdownBuffer = ''; // Buffer pour accumuler les morceaux de Markdown

                try {
                    // Itère sur les morceaux (chunks) reçus de l'API Ollama
                    foreach ($this->client->stream($response) as $chunk) {
                        // Gère le cas où le chunk est un timeout
                        if ($chunk->isTimeout()) {
                            $this->logger->warning('Ollama stream timeout occurred.');
                            echo json_encode(['error' => 'Request timed out.'])."\n"; flush(); continue;
                        }

                        // Vérifie si c'est le dernier chunk de la réponse HTTP globale
                        $isLastHttpChunk = $chunk->isLast();

                        // Récupère le contenu du chunk
                        $content = $chunk->getContent();
                        // Sépare le contenu en lignes (Ollama envoie du NDJSON)
                        $lines = explode("\n", trim($content));

                        // Traite chaque ligne JSON reçue
                        foreach ($lines as $line) {
                            if (empty($line)) continue; // Ignore les lignes vides

                            // Tente de décoder la ligne JSON
                            $data = json_decode($line, true);
                            if (json_last_error() !== JSON_ERROR_NONE) {
                                $this->logger->error('JSON decode error: ' . json_last_error_msg() . ' for line: ' . $line);
                                continue; // Ignore la ligne malformée
                            }

                            // Si la ligne contient un morceau de réponse Markdown
                            if (isset($data['response']) && !empty($data['response'])) {
                                // Ajoute le morceau Markdown au buffer
                                $markdownBuffer .= $data['response'];

                                // --- Logique d'envoi bufferisé ---
                                // Envoie le HTML converti seulement si le buffer se termine
                                // par une nouvelle ligne (probable fin de paragraphe/bloc)
                                // OU si c'est la fin signalée par Ollama ('done' ou dernier chunk HTTP)
                                $ollamaDone = (isset($data['done']) && $data['done'] === true);
                                if (str_ends_with($markdownBuffer, "\n") || $ollamaDone || $isLastHttpChunk) {
                                    if (!empty($markdownBuffer)) {
                                        $this->logger->debug("Converting Markdown buffer (ends with newline or done): " . $markdownBuffer);
                                        $htmlToSend = $markdownConverter->convert($markdownBuffer)->getContent();
                                        // Envoie le bloc HTML converti
                                        echo json_encode(['html' => $htmlToSend]) . "\n";
                                        flush(); // Force l'envoi au navigateur
                                        // Réinitialise le buffer après envoi
                                        $markdownBuffer = '';
                                    }
                                }
                                // --- Fin Logique d'envoi ---

                            // Si la ligne contient une erreur Ollama
                            } elseif (isset($data['error'])) {
                                $this->logger->error('Ollama API error received: ' . $data['error']);
                                // Envoie d'abord le contenu restant du buffer s'il y en a
                                if (!empty($markdownBuffer)) {
                                    $htmlToSend = $markdownConverter->convert($markdownBuffer)->getContent();
                                    echo json_encode(['html' => $htmlToSend]) . "\n";
                                    $markdownBuffer = '';
                                }
                                // Envoie ensuite l'erreur
                                echo json_encode(['error' => $data['error']]) . "\n";
                                flush();
                            }

                            // Si Ollama signale explicitement la fin ('done: true')
                            if (isset($data['done']) && $data['done'] === true) {
                                $this->logger->info('Ollama signaled done=true.');
                                // Assure l'envoi du dernier contenu du buffer
                                if (!empty($markdownBuffer)) {
                                    $htmlToSend = $markdownConverter->convert($markdownBuffer)->getContent();
                                    echo json_encode(['html' => $htmlToSend]) . "\n";
                                    $markdownBuffer = '';
                                }
                                // Envoie le signal 'done' au frontend
                                echo json_encode(['done' => true]) . "\n";
                                flush();
                                return; // Arrête le traitement du stream côté serveur
                            }
                        } // Fin foreach line

                        // Si c'était le dernier chunk HTTP et qu'il reste du contenu dans le buffer
                        // (Ollama n'a peut-être pas envoyé 'done: true' explicitement)
                        if ($isLastHttpChunk && !empty($markdownBuffer)) {
                            $this->logger->debug("Last HTTP chunk, sending final buffer: " . $markdownBuffer);
                            $htmlToSend = $markdownConverter->convert($markdownBuffer)->getContent();
                            echo json_encode(['html' => $htmlToSend]) . "\n";
                            // Envoie aussi un signal 'done' pour être sûr que le frontend termine
                            echo json_encode(['done' => true]) . "\n";
                            flush();
                        }

                    } // Fin foreach chunk HTTP stream
                } catch (\Symfony\Contracts\HttpClient\Exception\TransportExceptionInterface $e) {
                     $this->logger->error('Ollama stream transport error: '.$e->getMessage());
                     echo json_encode(['error' => 'Connection issue with chatbot service.'])."\n"; flush();
                } catch (\Throwable $e) { // Attrape toute autre erreur potentielle
                     $this->logger->error('Error during chatbot stream processing: '.$e->getMessage());
                     echo json_encode(['error' => 'Internal error processing response.'])."\n"; flush();
                }
            });

            // Définit les en-têtes pour la réponse streamée
            $streamedResponse->headers->set('Content-Type', 'application/x-ndjson');
            $streamedResponse->headers->set('X-Accel-Buffering', 'no'); // Important pour Nginx/proxies
            return $streamedResponse;

        // Gère les erreurs de connexion initiale à Ollama
        } catch (\Symfony\Contracts\HttpClient\Exception\TransportExceptionInterface $e) {
            $this->logger->error('Ollama request transport error (initial connection): '.$e->getMessage());
            return new JsonResponse(['error' => 'Could not connect to the chatbot service.'], Response::HTTP_SERVICE_UNAVAILABLE);
        // Gère d'autres erreurs lors de la préparation de la requête
        } catch (\Throwable $e) {
             $this->logger->error('Ollama request preparation error: '.$e->getMessage());
            return new JsonResponse(['error' => 'Error communicating with the chatbot service.'], Response::HTTP_INTERNAL_SERVER_ERROR);
        }
    }
}
</file>

<file path="src/Controller/create_job/CreateJobController.php">
<?php

namespace App\Controller\create_job;

use App\Entity\Jobs;
use App\Form\CreateJobFormType;
use Doctrine\ORM\EntityManagerInterface;
use Symfony\Bundle\FrameworkBundle\Controller\AbstractController;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\Routing\Annotation\Route;
use Symfony\Component\HttpFoundation\Session\SessionInterface;
use App\Entity\Users;

// class CreateJobController extends AbstractController
// {
//     #[Route('/create/job', name: 'app_create_job')]
//     public function index(Request $request, EntityManagerInterface $entityManager): Response
//     {
//         $job = new Jobs();
//         $form = $this->createForm(CreateJobFormType::class, $job);

//         $form->handleRequest($request);

//         if ($form->isSubmitted() && $form->isValid()) {
//             $user = $this->getUser(); // currently authenticated user
//             if (!$user) {
//                 throw $this->createAccessDeniedException('You must be logged in.');
//             }
//             $job->setUserId($user instanceof \App\Entity\Users ? $user : null); // set the user who created the job
            
//             $entityManager->persist($job);
//             $entityManager->flush();

//             // You can redirect to a success page or back to the form
//             return $this->redirectToRoute('app-root');
//         }

//         return $this->render('create_job/root.html.twig', [
//             'form' => $form->createView(),
//         ]);
//     }
// }



class CreateJobController extends AbstractController
{
    #[Route('/create/job', name: 'app_create_job')]
    public function index(Request $request, EntityManagerInterface $entityManager): Response
    {
        // Get user ID from session
        $session = $request->getSession();
        $userSession = $session->get('user');

        if (!$userSession) {
            // If user is not in session, redirect or throw an error
            return $this->redirectToRoute('app_login'); // or return new Response('Unauthorized', 401);
        }

        // Fetch user entity from the database
        $user = $entityManager->getRepository(Users::class)->find($userSession->getId());

        if (!$user) {
            throw $this->createNotFoundException('User not found');
        }

        $job = new Jobs();
        $form = $this->createForm(CreateJobFormType::class, $job);

        $form->handleRequest($request);

        if ($form->isSubmitted() && $form->isValid()) {
            // Set the current user as the job's owner
            $job->setUserId($user);

            $entityManager->persist($job);
            $entityManager->flush();

            // Optionally redirect or show success
            return $this->redirectToRoute('app_create_job');
        }

        return $this->render('create_job/createjob.html.twig', [
            'form' => $form->createView(),
        ]);
    }
}
</file>

<file path="src/Controller/events/EventsController.php">
<?php
// src/Controller/events/EventsController.php

namespace App\Controller\events;

use App\Entity\Events;
use App\Entity\Users;
use App\Form\EventsType;
use App\Repository\EventsRepository;
use App\Repository\CategoryRepository;
use Doctrine\ORM\EntityManagerInterface;
use Symfony\Bundle\FrameworkBundle\Controller\AbstractController;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\HttpFoundation\File\UploadedFile;
use Symfony\Component\Routing\Annotation\Route;
use Psr\Log\LoggerInterface;

class EventsController extends AbstractController
{
    private LoggerInterface $logger;

    public function __construct(LoggerInterface $logger)
    {
        $this->logger = $logger;
    }

    #[Route('/events', name: 'app_events', methods: ['GET'])]
    public function index(
        Request $request,
        EventsRepository $eventsRepository,
        CategoryRepository $categoryRepository
    ): Response {
        $session = $request->getSession();
        $currentUser = $session->get('user');
        
        // If no user is logged in, show all events
        $excludeOrganizerId = null;
        if ($currentUser instanceof Users) {
            $excludeOrganizerId = $currentUser->getId();
        }

        // Get filters from URL
        $searchTerm = $request->query->get('search');
        $categoryIdParam = $request->query->get('category');
        $categoryId = null;
        if (!empty($categoryIdParam) && ctype_digit((string)$categoryIdParam)) {
            $categoryId = (int)$categoryIdParam;
        }

        // Get filtered data
        $events = [];
        $categories = [];
        try {
            $events = $eventsRepository->findByNameDescriptionCategory($searchTerm, $categoryId, $excludeOrganizerId);
            $categories = $categoryRepository->findBy([], ['name' => 'ASC']);
        } catch (\Exception $e) {
            $this->logger->error('Error fetching events or categories: ' . $e->getMessage());
            $this->addFlash('error', 'An error occurred while retrieving event data.');
        }

        return $this->render('events/events.html.twig', [
            'events' => $events ?? [],
            'categories' => $categories ?? [],
        ]);
    }

    #[Route('/events/add', name: 'app_event_add_page', methods: ['GET'])]
    public function addEventPage(Request $request): Response
    {
        $session = $request->getSession();
        $currentUser = $session->get('user');
        
        if (!$currentUser instanceof Users) {
            $this->addFlash('error', 'You must be logged in to create events.');
            return $this->redirectToRoute('app_login');
        }

        $event = new Events();
        $form = $this->createForm(EventsType::class, $event, [
             'action' => $this->generateUrl('app_event_new'),
             'method' => 'POST',
        ]);

        return $this->render('events/add_event.html.twig', [
            'create_event_form' => $form->createView(),
        ]);
    }

    #[Route('/events/new', name: 'app_event_new', methods: ['POST'])]
    public function new(Request $request, EntityManagerInterface $em): Response
    {
        $session = $request->getSession();
        $currentUser = $session->get('user');
        
        if (!$currentUser instanceof Users) {
            $this->addFlash('error', 'You must be logged in to create events.');
            return $this->redirectToRoute('app_login');
        }

        $event = new Events();
        $form = $this->createForm(EventsType::class, $event);
        $form->handleRequest($request);

        if ($form->isSubmitted()) {
            if ($form->isValid()) {
                try {
                    // Verify the user object is usable
                    if (!$currentUser->getId()) {
                        throw new \Exception('Invalid user in session');
                    }

                    // Set organizer by creating a reference without loading the full user
                    $event->setOrganizerId($em->getReference(Users::class, $currentUser->getId()));

                    // Handle dates
                    $startTime = $form->get('startTime')->getData();
                    $endTime = $form->get('endTime')->getData();
                    $event->setStartTime($startTime->format('Y-m-d H:i:s'));
                    $event->setEndTime($endTime->format('Y-m-d H:i:s'));

                    // Handle image
                    $imageFile = $form->get('image')->getData();
                    if ($imageFile instanceof UploadedFile && $imageFile->isValid()) {
                        $event->setImage(base64_encode(file_get_contents($imageFile->getPathname())));
                    } else {
                        $event->setImage('');
                    }

                    // Ensure required fields are set
                    if (!$event->getPoints()) {
                        $event->setPoints(0);
                    }

                    $em->persist($event);
                    $em->flush();

                    $this->addFlash('success', 'Event created successfully!');
                    return $this->redirectToRoute('app_events');

                } catch (\Exception $e) {
                    $this->logger->error('Event creation failed: ' . $e->getMessage());
                    $this->addFlash('error', 'Error creating event: ' . $e->getMessage());
                }
            } else {
                // Collect all form errors
                foreach ($form->getErrors(true) as $error) {
                    $this->addFlash('error', $error->getMessage());
                }
            }
        }

        return $this->render('events/add_event.html.twig', [
            'create_event_form' => $form->createView(),
        ]);
    }
}
</file>

<file path="src/Controller/explore/ExploreController.php">
<?php

namespace App\Controller\explore;

use Symfony\Bundle\FrameworkBundle\Controller\AbstractController;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\Routing\Annotation\Route;

class ExploreController extends AbstractController
{
    #[Route('/explore', name: 'app_explore')]
    public function index(): Response
    {
        return $this->render('explore/explore.html.twig', [
            'controller_name' => 'ExploreController',
        ]);
    }
}
</file>

<file path="src/Controller/group/GroupController.php">
<?php

namespace App\Controller\group;

use Symfony\Bundle\FrameworkBundle\Controller\AbstractController;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\Routing\Annotation\Route;

class GroupController extends AbstractController
{
    #[Route('/group', name: 'app_group')]
    public function index(): Response
    {
        return $this->render('group/group.html.twig', [
            'controller_name' => 'GroupController',
        ]);
    }
}
</file>

<file path="src/Controller/profile/ProfileController.php">
<?php

namespace App\Controller\profile;

use Symfony\Bundle\FrameworkBundle\Controller\AbstractController;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\Routing\Annotation\Route;

class ProfileController extends AbstractController
{
    #[Route('/profile', name: 'app_profile')]
    public function index(): Response
    {
        return $this->render('profile/profile.html.twig', [
            'controller_name' => 'ProfileController',
        ]);
    }
}
</file>

<file path="src/Controller/RootController.php">
<?php

namespace App\Controller;

use Symfony\Bundle\FrameworkBundle\Controller\AbstractController;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\Routing\Annotation\Route;

class RootController extends AbstractController
{
    #[Route('', name: 'app-root')]
    public function index(): Response
    {
        return $this->render('base.html.twig');
    }
}
</file>

<file path="src/Controller/social/SocialController.php">
<?php

namespace App\Controller\social;

use Symfony\Bundle\FrameworkBundle\Controller\AbstractController;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\Routing\Annotation\Route;

class SocialController extends AbstractController
{
    #[Route('/social', name: 'app_social')]
    public function index(): Response
    {
        return $this->render('social/social.html.twig', [
            'controller_name' => 'SocialController',
        ]);
    }
}
</file>

<file path="src/Entity/Category.php">
<?php

namespace App\Entity;

use App\Repository\CategoryRepository;
use Doctrine\ORM\Mapping as ORM;

#[ORM\Entity(repositoryClass: CategoryRepository::class)]
class Category
{
    #[ORM\Id]
    #[ORM\GeneratedValue]
    #[ORM\Column]
    private ?int $id = null;

    #[ORM\Column(length: 255)]
    private ?string $name = null;

    public function getId(): ?int
    {
        return $this->id;
    }

    public function getName(): ?string
    {
        return $this->name;
    }

    public function setName(string $name): static
    {
        $this->name = $name;

        return $this;
    }
}
</file>

<file path="src/Entity/Comments.php">
<?php

namespace App\Entity;

use App\Repository\CommentsRepository;
use Doctrine\ORM\Mapping as ORM;

#[ORM\Entity(repositoryClass: CommentsRepository::class)]
class Comments
{
    #[ORM\Id]
    #[ORM\GeneratedValue]
    #[ORM\Column]
    private ?int $id = null;

    #[ORM\ManyToOne]
    #[ORM\JoinColumn(nullable: false)]
    private ?FeedPosts $postId = null;

    #[ORM\ManyToOne]
    #[ORM\JoinColumn(nullable: false)]
    private ?Users $user_id = null;

    #[ORM\Column(length: 255)]
    private ?string $content = null;

    #[ORM\Column(length: 255)]
    private ?string $timeStamp = null;

    #[ORM\Column(nullable: true)]
    private ?int $isDeleted = null;

    public function getId(): ?int
    {
        return $this->id;
    }

    public function getPostId(): ?FeedPosts
    {
        return $this->postId;
    }

    public function setPostId(?FeedPosts $postId): static
    {
        $this->postId = $postId;

        return $this;
    }

    public function getUserId(): ?Users
    {
        return $this->user_id;
    }

    public function setUserId(?Users $user_id): static
    {
        $this->user_id = $user_id;

        return $this;
    }

    public function getContent(): ?string
    {
        return $this->content;
    }

    public function setContent(string $content): static
    {
        $this->content = $content;

        return $this;
    }

    public function getTimeStamp(): ?string
    {
        return $this->timeStamp;
    }

    public function setTimeStamp(string $timeStamp): static
    {
        $this->timeStamp = $timeStamp;

        return $this;
    }

    public function getIsDeleted(): ?int
    {
        return $this->isDeleted;
    }

    public function setIsDeleted(?int $isDeleted): static
    {
        $this->isDeleted = $isDeleted;

        return $this;
    }
}
</file>

<file path="src/Entity/Conversion.php">
<?php

namespace App\Entity;

use App\Repository\ConversionRepository;
use Doctrine\DBAL\Types\Types;
use Doctrine\ORM\Mapping as ORM;

#[ORM\Entity(repositoryClass: ConversionRepository::class)]
class Conversion
{
    #[ORM\Id]
    #[ORM\GeneratedValue]
    #[ORM\Column]
    private ?int $id = null;

    #[ORM\ManyToOne(inversedBy: 'conversions')]
    #[ORM\JoinColumn(nullable: false)]
    private ?Users $userId = null;

    #[ORM\Column]
    private ?int $pointsConvertis = null;

    #[ORM\Column(type: Types::DECIMAL, precision: 10, scale: 2)]
    private ?string $montant = null;

    #[ORM\Column(length: 255)]
    private ?string $devise = null;

    #[ORM\Column(type: Types::DATETIME_MUTABLE)]
    private ?\DateTimeInterface $date = null;

    public function getId(): ?int
    {
        return $this->id;
    }

    public function getUserId(): ?Users
    {
        return $this->userId;
    }

    public function setUserId(?Users $userId): static
    {
        $this->userId = $userId;

        return $this;
    }

    public function getPointsConvertis(): ?int
    {
        return $this->pointsConvertis;
    }

    public function setPointsConvertis(int $pointsConvertis): static
    {
        $this->pointsConvertis = $pointsConvertis;

        return $this;
    }

    public function getMontant(): ?string
    {
        return $this->montant;
    }

    public function setMontant(string $montant): static
    {
        $this->montant = $montant;

        return $this;
    }

    public function getDevise(): ?string
    {
        return $this->devise;
    }

    public function setDevise(string $devise): static
    {
        $this->devise = $devise;

        return $this;
    }

    public function getDate(): ?\DateTimeInterface
    {
        return $this->date;
    }

    public function setDate(\DateTimeInterface $date): static
    {
        $this->date = $date;

        return $this;
    }
}
</file>

<file path="src/Entity/Events.php">
<?php

namespace App\Entity;

use App\Repository\EventsRepository;
use Doctrine\DBAL\Types\Types;
use Doctrine\ORM\Mapping as ORM;

#[ORM\Entity(repositoryClass: EventsRepository::class)]
class Events
{
    #[ORM\Id]
    #[ORM\GeneratedValue]
    #[ORM\Column]
    private ?int $id = null;

    #[ORM\Column(length: 255)]
    private ?string $name = null;

    #[ORM\Column(length: 255)]
    private ?string $description = null;

    #[ORM\Column(length: 255)]
    private ?string $startTime = null;

    #[ORM\Column(length: 255)]
    private ?string $endTime = null;

    #[ORM\Column(length: 255)]
    private ?string $location = null;

    #[ORM\ManyToOne(inversedBy: 'events')]
    #[ORM\JoinColumn(nullable: false)]
    private ?Users $organizerId = null;

    #[ORM\ManyToOne]
    #[ORM\JoinColumn(nullable: false)]
    private ?Category $categoryId = null;

    #[ORM\Column(type: Types::TEXT)]
    private ?string $image = null;

    #[ORM\Column]
    private ?int $points = null;

    public function getId(): ?int
    {
        return $this->id;
    }

    public function getName(): ?string
    {
        return $this->name;
    }

    public function setName(string $name): static
    {
        $this->name = $name;

        return $this;
    }

    public function getDescription(): ?string
    {
        return $this->description;
    }

    public function setDescription(string $description): static
    {
        $this->description = $description;

        return $this;
    }

    public function getStartTime(): ?string
    {
        return $this->startTime;
    }

    public function setStartTime(string $startTime): static
    {
        $this->startTime = $startTime;

        return $this;
    }

    public function getEndTime(): ?string
    {
        return $this->endTime;
    }

    public function setEndTime(string $endTime): static
    {
        $this->endTime = $endTime;

        return $this;
    }

    public function getLocation(): ?string
    {
        return $this->location;
    }

    public function setLocation(string $location): static
    {
        $this->location = $location;

        return $this;
    }

    public function getOrganizerId(): ?Users
    {
        return $this->organizerId;
    }

    public function setOrganizerId(?Users $organizerId): static
    {
        $this->organizerId = $organizerId;

        return $this;
    }

    public function getCategoryId(): ?Category
    {
        return $this->categoryId;
    }

    public function setCategoryId(?Category $categoryId): static
    {
        $this->categoryId = $categoryId;

        return $this;
    }

    public function getImage(): ?string
    {
        return $this->image;
    }

    public function setImage(string $image): static
    {
        $this->image = $image;

        return $this;
    }

    public function getPoints(): ?int
    {
        return $this->points;
    }

    public function setPoints(int $points): static
    {
        $this->points = $points;

        return $this;
    }
}
</file>

<file path="src/Entity/FeedPosts.php">
<?php

namespace App\Entity;

use App\Repository\FeedPostsRepository;
use Doctrine\ORM\Mapping as ORM;

#[ORM\Entity(repositoryClass: FeedPostsRepository::class)]
class FeedPosts
{
    #[ORM\Id]
    #[ORM\GeneratedValue]
    #[ORM\Column]
    private ?int $id = null;

    #[ORM\ManyToOne]
    #[ORM\JoinColumn(nullable: false)]
    private ?Users $userId = null;

    #[ORM\Column(length: 255)]
    private ?string $content = null;

    #[ORM\Column(length: 255)]
    private ?string $timeStamp = null;

    #[ORM\ManyToOne]
    #[ORM\JoinColumn(nullable: false)]
    private ?Users $eventId = null;

    #[ORM\Column(nullable: true)]
    private ?int $isDeleted = null;

    #[ORM\Column(length: 255)]
    private ?string $createdAt = null;

    #[ORM\Column(length: 255)]
    private ?string $updatedAt = null;

    #[ORM\Column(nullable: true)]
    private ?int $scorePopularite = null;

    #[ORM\Column(length: 255)]
    private ?string $imagePath = null;

    #[ORM\Column(nullable: true)]
    private ?int $groupId = null;

    public function getId(): ?int
    {
        return $this->id;
    }

    public function getUserId(): ?Users
    {
        return $this->userId;
    }

    public function setUserId(?Users $userId): static
    {
        $this->userId = $userId;

        return $this;
    }

    public function getContent(): ?string
    {
        return $this->content;
    }

    public function setContent(string $content): static
    {
        $this->content = $content;

        return $this;
    }

    public function getTimeStamp(): ?string
    {
        return $this->timeStamp;
    }

    public function setTimeStamp(string $timeStamp): static
    {
        $this->timeStamp = $timeStamp;

        return $this;
    }

    public function getEventId(): ?Users
    {
        return $this->eventId;
    }

    public function setEventId(?Users $eventId): static
    {
        $this->eventId = $eventId;

        return $this;
    }

    public function getIsDeleted(): ?int
    {
        return $this->isDeleted;
    }

    public function setIsDeleted(?int $isDeleted): static
    {
        $this->isDeleted = $isDeleted;

        return $this;
    }

    public function getCreatedAt(): ?string
    {
        return $this->createdAt;
    }

    public function setCreatedAt(string $createdAt): static
    {
        $this->createdAt = $createdAt;

        return $this;
    }

    public function getUpdatedAt(): ?string
    {
        return $this->updatedAt;
    }

    public function setUpdatedAt(string $updatedAt): static
    {
        $this->updatedAt = $updatedAt;

        return $this;
    }

    public function getScorePopularite(): ?int
    {
        return $this->scorePopularite;
    }

    public function setScorePopularite(?int $scorePopularite): static
    {
        $this->scorePopularite = $scorePopularite;

        return $this;
    }

    public function getImagePath(): ?string
    {
        return $this->imagePath;
    }

    public function setImagePath(string $imagePath): static
    {
        $this->imagePath = $imagePath;

        return $this;
    }

    public function getGroupId(): ?int
    {
        return $this->groupId;
    }

    public function setGroupId(?int $groupId): static
    {
        $this->groupId = $groupId;

        return $this;
    }
}
</file>

<file path="src/Entity/GroupFeedPosts.php">
<?php

namespace App\Entity;

use App\Repository\GroupFeedPostsRepository;
use Doctrine\ORM\Mapping as ORM;

#[ORM\Entity(repositoryClass: GroupFeedPostsRepository::class)]
class GroupFeedPosts
{
    #[ORM\Id]
    #[ORM\GeneratedValue]
    #[ORM\Column]
    private ?int $id = null;

    #[ORM\ManyToOne]
    #[ORM\JoinColumn(nullable: false)]
    private ?UserGroups $group_id = null;

    #[ORM\ManyToOne]
    #[ORM\JoinColumn(nullable: false)]
    private ?Users $user_id = null;

    #[ORM\Column(length: 255)]
    private ?string $content = null;

    #[ORM\Column(length: 255)]
    private ?string $timestamp = null;

    #[ORM\Column(length: 255)]
    private ?string $media_url = null;

    #[ORM\Column(nullable: true)]
    private ?int $is_deleted = null;

    public function getId(): ?int
    {
        return $this->id;
    }

    public function getGroupId(): ?UserGroups
    {
        return $this->group_id;
    }

    public function setGroupId(?UserGroups $group_id): static
    {
        $this->group_id = $group_id;

        return $this;
    }

    public function getUserId(): ?Users
    {
        return $this->user_id;
    }

    public function setUserId(?Users $user_id): static
    {
        $this->user_id = $user_id;

        return $this;
    }

    public function getContent(): ?string
    {
        return $this->content;
    }

    public function setContent(string $content): static
    {
        $this->content = $content;

        return $this;
    }

    public function getTimestamp(): ?string
    {
        return $this->timestamp;
    }

    public function setTimestamp(string $timestamp): static
    {
        $this->timestamp = $timestamp;

        return $this;
    }

    public function getMediaUrl(): ?string
    {
        return $this->media_url;
    }

    public function setMediaUrl(string $media_url): static
    {
        $this->media_url = $media_url;

        return $this;
    }

    public function getIsDeleted(): ?int
    {
        return $this->is_deleted;
    }

    public function setIsDeleted(?int $is_deleted): static
    {
        $this->is_deleted = $is_deleted;

        return $this;
    }
}
</file>

<file path="src/Entity/GroupMembers.php">
<?php

namespace App\Entity;

use App\Repository\GroupMembersRepository;
use Doctrine\ORM\Mapping as ORM;

#[ORM\Entity(repositoryClass: GroupMembersRepository::class)]
class GroupMembers
{
    #[ORM\Id]
    #[ORM\GeneratedValue]
    #[ORM\Column]
    private ?int $id = null;

    #[ORM\ManyToOne]
    #[ORM\JoinColumn(nullable: false)]
    private ?UserGroups $group_it = null;

    #[ORM\ManyToOne]
    #[ORM\JoinColumn(nullable: false)]
    private ?Users $user_id = null;

    #[ORM\Column(length: 255)]
    private ?string $role = null;

    public function getId(): ?int
    {
        return $this->id;
    }

    public function getGroupIt(): ?UserGroups
    {
        return $this->group_it;
    }

    public function setGroupIt(?UserGroups $group_it): static
    {
        $this->group_it = $group_it;

        return $this;
    }

    public function getUserId(): ?Users
    {
        return $this->user_id;
    }

    public function setUserId(?Users $user_id): static
    {
        $this->user_id = $user_id;

        return $this;
    }

    public function getRole(): ?string
    {
        return $this->role;
    }

    public function setRole(string $role): static
    {
        $this->role = $role;

        return $this;
    }
}
</file>

<file path="src/Entity/HistoriquePoints.php">
<?php

namespace App\Entity;

use App\Repository\HistoriquePointsRepository;
use Doctrine\DBAL\Types\Types;
use Doctrine\ORM\Mapping as ORM;

#[ORM\Entity(repositoryClass: HistoriquePointsRepository::class)]
class HistoriquePoints
{
    #[ORM\Id]
    #[ORM\GeneratedValue]
    #[ORM\Column]
    private ?int $id = null;

    #[ORM\ManyToOne]
    #[ORM\JoinColumn(nullable: false)]
    private ?Users $user_id = null;

    #[ORM\Column(length: 255)]
    private ?string $type = null;

    #[ORM\Column]
    private ?int $points = null;

    #[ORM\Column(length: 255)]
    private ?string $raison = null;

    #[ORM\Column(type: Types::DATETIME_MUTABLE)]
    private ?\DateTimeInterface $date = null;

    public function getId(): ?int
    {
        return $this->id;
    }

    public function getUserId(): ?Users
    {
        return $this->user_id;
    }

    public function setUserId(?Users $user_id): static
    {
        $this->user_id = $user_id;

        return $this;
    }

    public function getType(): ?string
    {
        return $this->type;
    }

    public function setType(string $type): static
    {
        $this->type = $type;

        return $this;
    }

    public function getPoints(): ?int
    {
        return $this->points;
    }

    public function setPoints(int $points): static
    {
        $this->points = $points;

        return $this;
    }

    public function getRaison(): ?string
    {
        return $this->raison;
    }

    public function setRaison(string $raison): static
    {
        $this->raison = $raison;

        return $this;
    }

    public function getDate(): ?\DateTimeInterface
    {
        return $this->date;
    }

    public function setDate(\DateTimeInterface $date): static
    {
        $this->date = $date;

        return $this;
    }
}
</file>

<file path="src/Entity/Likes.php">
<?php

namespace App\Entity;

use App\Repository\LikesRepository;
use Doctrine\ORM\Mapping as ORM;

#[ORM\Entity(repositoryClass: LikesRepository::class)]
class Likes
{
    #[ORM\Id]
    #[ORM\GeneratedValue]
    #[ORM\Column]
    private ?int $id = null;

    #[ORM\ManyToOne]
    #[ORM\JoinColumn(nullable: false)]
    private ?FeedPosts $postId = null;

    #[ORM\ManyToOne]
    #[ORM\JoinColumn(nullable: false)]
    private ?Users $user_id = null;

    #[ORM\Column(length: 255)]
    private ?string $timeStamp = null;

    public function getId(): ?int
    {
        return $this->id;
    }

    public function getPostId(): ?FeedPosts
    {
        return $this->postId;
    }

    public function setPostId(?FeedPosts $postId): static
    {
        $this->postId = $postId;

        return $this;
    }

    public function getUserId(): ?Users
    {
        return $this->user_id;
    }

    public function setUserId(?Users $user_id): static
    {
        $this->user_id = $user_id;

        return $this;
    }

    public function getTimeStamp(): ?string
    {
        return $this->timeStamp;
    }

    public function setTimeStamp(string $timeStamp): static
    {
        $this->timeStamp = $timeStamp;

        return $this;
    }
}
</file>

<file path="src/Entity/Messages.php">
<?php

namespace App\Entity;

use App\Repository\MessagesRepository;
use Doctrine\DBAL\Types\Types;
use Doctrine\ORM\Mapping as ORM;

#[ORM\Entity(repositoryClass: MessagesRepository::class)]
class Messages
{
    #[ORM\Id]
    #[ORM\GeneratedValue]
    #[ORM\Column]
    private ?int $id = null;

    #[ORM\Column]
    private ?int $sender_id = null;

    #[ORM\Column]
    private ?int $recipient_id = null;

    #[ORM\Column(length: 255)]
    private ?string $content = null;

    #[ORM\Column(type: Types::DATETIME_MUTABLE)]
    private ?\DateTimeInterface $timestamp = null;

    #[ORM\Column(length: 255)]
    private ?string $type = null;

    #[ORM\Column]
    private ?int $read_status = null;

    public function getId(): ?int
    {
        return $this->id;
    }

    public function getSenderId(): ?int
    {
        return $this->sender_id;
    }

    public function setSenderId(int $sender_id): static
    {
        $this->sender_id = $sender_id;

        return $this;
    }

    public function getRecipientId(): ?int
    {
        return $this->recipient_id;
    }

    public function setRecipientId(int $recipient_id): static
    {
        $this->recipient_id = $recipient_id;

        return $this;
    }

    public function getContent(): ?string
    {
        return $this->content;
    }

    public function setContent(string $content): static
    {
        $this->content = $content;

        return $this;
    }

    public function getTimestamp(): ?\DateTimeInterface
    {
        return $this->timestamp;
    }

    public function setTimestamp(\DateTimeInterface $timestamp): static
    {
        $this->timestamp = $timestamp;

        return $this;
    }

    public function getType(): ?string
    {
        return $this->type;
    }

    public function setType(string $type): static
    {
        $this->type = $type;

        return $this;
    }

    public function getReadStatus(): ?int
    {
        return $this->read_status;
    }

    public function setReadStatus(int $read_status): static
    {
        $this->read_status = $read_status;

        return $this;
    }
}
</file>

<file path="src/Entity/Participation.php">
<?php

namespace App\Entity;

use App\Repository\ParticipationRepository;
use Doctrine\Common\Collections\ArrayCollection;
use Doctrine\Common\Collections\Collection;
use Doctrine\ORM\Mapping as ORM;

#[ORM\Entity(repositoryClass: ParticipationRepository::class)]
class Participation
{
    #[ORM\Id]
    #[ORM\GeneratedValue]
    #[ORM\Column]
    private ?int $id = null;

    #[ORM\ManyToMany(targetEntity: Events::class)]
    private Collection $event_id;

    #[ORM\ManyToMany(targetEntity: Users::class)]
    private Collection $participant_id;

    public function __construct()
    {
        $this->event_id = new ArrayCollection();
        $this->participant_id = new ArrayCollection();
    }

    public function getId(): ?int
    {
        return $this->id;
    }

    /**
     * @return Collection<int, Events>
     */
    public function getEventId(): Collection
    {
        return $this->event_id;
    }

    public function addEventId(Events $eventId): static
    {
        if (!$this->event_id->contains($eventId)) {
            $this->event_id->add($eventId);
        }

        return $this;
    }

    public function removeEventId(Events $eventId): static
    {
        $this->event_id->removeElement($eventId);

        return $this;
    }

    /**
     * @return Collection<int, Users>
     */
    public function getParticipantId(): Collection
    {
        return $this->participant_id;
    }

    public function addParticipantId(Users $participantId): static
    {
        if (!$this->participant_id->contains($participantId)) {
            $this->participant_id->add($participantId);
        }

        return $this;
    }

    public function removeParticipantId(Users $participantId): static
    {
        $this->participant_id->removeElement($participantId);

        return $this;
    }
}
</file>

<file path="src/Entity/Reviews.php">
<?php

namespace App\Entity;

use App\Repository\ReviewsRepository;
use Doctrine\ORM\Mapping as ORM;

#[ORM\Entity(repositoryClass: ReviewsRepository::class)]
class Reviews
{
    #[ORM\Id]
    #[ORM\GeneratedValue]
    #[ORM\Column]
    private ?int $id = null;

    #[ORM\ManyToOne]
    #[ORM\JoinColumn(nullable: false)]
    private ?Users $user_id = null;

    #[ORM\ManyToOne]
    #[ORM\JoinColumn(nullable: false)]
    private ?Events $event_id = null;

    #[ORM\Column]
    private ?int $rating = null;

    #[ORM\Column(length: 255)]
    private ?string $comment = null;

    #[ORM\Column(length: 255, nullable: true)]
    private ?string $creatid_at = null;

    public function getId(): ?int
    {
        return $this->id;
    }

    public function getUserId(): ?Users
    {
        return $this->user_id;
    }

    public function setUserId(?Users $user_id): static
    {
        $this->user_id = $user_id;

        return $this;
    }

    public function getEventId(): ?Events
    {
        return $this->event_id;
    }

    public function setEventId(?Events $event_id): static
    {
        $this->event_id = $event_id;

        return $this;
    }

    public function getRating(): ?int
    {
        return $this->rating;
    }

    public function setRating(int $rating): static
    {
        $this->rating = $rating;

        return $this;
    }

    public function getComment(): ?string
    {
        return $this->comment;
    }

    public function setComment(string $comment): static
    {
        $this->comment = $comment;

        return $this;
    }

    public function getCreatidAt(): ?string
    {
        return $this->creatid_at;
    }

    public function setCreatidAt(?string $creatid_at): static
    {
        $this->creatid_at = $creatid_at;

        return $this;
    }
}
</file>

<file path="src/Entity/Rewards.php">
<?php

namespace App\Entity;

use App\Repository\RewardsRepository;
use Doctrine\ORM\Mapping as ORM;

#[ORM\Entity(repositoryClass: RewardsRepository::class)]
class Rewards
{
    #[ORM\Id]
    #[ORM\GeneratedValue]
    #[ORM\Column]
    private ?int $id = null;

    #[ORM\Column(length: 255)]
    private ?string $action_type = null;

    #[ORM\Column]
    private ?int $points = null;

    #[ORM\Column(length: 255)]
    private ?string $description = null;

    public function getId(): ?int
    {
        return $this->id;
    }

    public function getActionType(): ?string
    {
        return $this->action_type;
    }

    public function setActionType(string $action_type): static
    {
        $this->action_type = $action_type;

        return $this;
    }

    public function getPoints(): ?int
    {
        return $this->points;
    }

    public function setPoints(int $points): static
    {
        $this->points = $points;

        return $this;
    }

    public function getDescription(): ?string
    {
        return $this->description;
    }

    public function setDescription(string $description): static
    {
        $this->description = $description;

        return $this;
    }
}
</file>

<file path="src/Entity/Roulette.php">
<?php

namespace App\Entity;

use App\Repository\RouletteRepository;
use Doctrine\DBAL\Types\Types;
use Doctrine\ORM\Mapping as ORM;

#[ORM\Entity(repositoryClass: RouletteRepository::class)]
class Roulette
{
    #[ORM\Id]
    #[ORM\GeneratedValue]
    #[ORM\Column]
    private ?int $id = null;

    #[ORM\ManyToOne]
    private ?Users $user_id = null;

    #[ORM\Column]
    private ?int $points_gagnes = null;

    #[ORM\Column(type: Types::DATETIME_MUTABLE)]
    private ?\DateTimeInterface $date = null;

    public function getId(): ?int
    {
        return $this->id;
    }

    public function getUserId(): ?Users
    {
        return $this->user_id;
    }

    public function setUserId(?Users $user_id): static
    {
        $this->user_id = $user_id;

        return $this;
    }

    public function getPointsGagnes(): ?int
    {
        return $this->points_gagnes;
    }

    public function setPointsGagnes(int $points_gagnes): static
    {
        $this->points_gagnes = $points_gagnes;

        return $this;
    }

    public function getDate(): ?\DateTimeInterface
    {
        return $this->date;
    }

    public function setDate(\DateTimeInterface $date): static
    {
        $this->date = $date;

        return $this;
    }
}
</file>

<file path="src/Entity/Shares.php">
<?php

namespace App\Entity;

use App\Repository\SharesRepository;
use Doctrine\DBAL\Types\Types;
use Doctrine\ORM\Mapping as ORM;

#[ORM\Entity(repositoryClass: SharesRepository::class)]
class Shares
{
    #[ORM\Id]
    #[ORM\GeneratedValue]
    #[ORM\Column]
    private ?int $id = null;

    #[ORM\ManyToOne]
    private ?FeedPosts $post_id = null;

    #[ORM\ManyToOne]
    private ?Users $user_id = null;

    #[ORM\Column(type: Types::DATETIME_MUTABLE, nullable: true)]
    private ?\DateTimeInterface $created_at = null;

    public function getId(): ?int
    {
        return $this->id;
    }

    public function getPostId(): ?FeedPosts
    {
        return $this->post_id;
    }

    public function setPostId(?FeedPosts $post_id): static
    {
        $this->post_id = $post_id;

        return $this;
    }

    public function getUserId(): ?Users
    {
        return $this->user_id;
    }

    public function setUserId(?Users $user_id): static
    {
        $this->user_id = $user_id;

        return $this;
    }

    public function getCreatedAt(): ?\DateTimeInterface
    {
        return $this->created_at;
    }

    public function setCreatedAt(?\DateTimeInterface $created_at): static
    {
        $this->created_at = $created_at;

        return $this;
    }
}
</file>

<file path="src/Entity/TransactionArgent.php">
<?php

namespace App\Entity;

use App\Repository\TransactionArgentRepository;
use Doctrine\ORM\Mapping as ORM;

#[ORM\Entity(repositoryClass: TransactionArgentRepository::class)]
class TransactionArgent
{
    #[ORM\Id]
    #[ORM\GeneratedValue]
    #[ORM\Column]
    private ?int $id = null;

    public function getId(): ?int
    {
        return $this->id;
    }
}
</file>

<file path="src/Entity/UserGroups.php">
<?php

namespace App\Entity;

use App\Repository\UserGroupsRepository;
use Doctrine\DBAL\Types\Types;
use Doctrine\ORM\Mapping as ORM;

#[ORM\Entity(repositoryClass: UserGroupsRepository::class)]
class UserGroups
{
    #[ORM\Id]
    #[ORM\GeneratedValue]
    #[ORM\Column]
    private ?int $id = null;

    #[ORM\Column(length: 255)]
    private ?string $name = null;

    #[ORM\Column(length: 255)]
    private ?string $description = null;

    #[ORM\Column(type: Types::TEXT)]
    private ?string $profile_picture = null;

    #[ORM\Column(length: 255)]
    private ?string $rules = null;

    #[ORM\Column(length: 255)]
    private ?string $created_at = null;

    #[ORM\ManyToOne]
    #[ORM\JoinColumn(nullable: false)]
    private ?Users $creator_id = null;

    public function getId(): ?int
    {
        return $this->id;
    }

    public function getName(): ?string
    {
        return $this->name;
    }

    public function setName(string $name): static
    {
        $this->name = $name;

        return $this;
    }

    public function getDescription(): ?string
    {
        return $this->description;
    }

    public function setDescription(string $description): static
    {
        $this->description = $description;

        return $this;
    }

    public function getProfilePicture(): ?string
    {
        return $this->profile_picture;
    }

    public function setProfilePicture(string $profile_picture): static
    {
        $this->profile_picture = $profile_picture;

        return $this;
    }

    public function getRules(): ?string
    {
        return $this->rules;
    }

    public function setRules(string $rules): static
    {
        $this->rules = $rules;

        return $this;
    }

    public function getCreatedAt(): ?string
    {
        return $this->created_at;
    }

    public function setCreatedAt(string $created_at): static
    {
        $this->created_at = $created_at;

        return $this;
    }

    public function getCreatorId(): ?Users
    {
        return $this->creator_id;
    }

    public function setCreatorId(?Users $creator_id): static
    {
        $this->creator_id = $creator_id;

        return $this;
    }
}
</file>

<file path="src/Entity/UserIntrests.php">
<?php

namespace App\Entity;

use App\Repository\UserIntrestsRepository;
use Doctrine\ORM\Mapping as ORM;

#[ORM\Entity(repositoryClass: UserIntrestsRepository::class)]
class UserIntrests
{
    #[ORM\Id]
    #[ORM\GeneratedValue]
    #[ORM\Column]
    private ?int $id = null;

    #[ORM\ManyToOne]
    private ?users $user_id = null;

    #[ORM\ManyToOne]
    private ?Category $category_id = null;

    public function getId(): ?int
    {
        return $this->id;
    }

    public function getUserId(): ?users
    {
        return $this->user_id;
    }

    public function setUserId(?users $user_id): static
    {
        $this->user_id = $user_id;

        return $this;
    }

    public function getCategoryId(): ?Category
    {
        return $this->category_id;
    }

    public function setCategoryId(?Category $category_id): static
    {
        $this->category_id = $category_id;

        return $this;
    }
}
</file>

<file path="src/Entity/UserMessages.php">
<?php

namespace App\Entity;

use App\Repository\UserMessagesRepository;
use Doctrine\DBAL\Types\Types;
use Doctrine\ORM\Mapping as ORM;

#[ORM\Entity(repositoryClass: UserMessagesRepository::class)]
class UserMessages
{
    #[ORM\Id]
    #[ORM\GeneratedValue]
    #[ORM\Column]
    private ?int $id = null;

    #[ORM\ManyToOne]
    private ?Users $user_id = null;

    #[ORM\Column(type: Types::DATETIME_MUTABLE, nullable: true)]
    private ?\DateTimeInterface $sent_at = null;

    #[ORM\Column(length: 255, nullable: true)]
    private ?string $lastMessage = null;

    #[ORM\Column(length: 255)]
    private ?string $username = null;

    public function getId(): ?int
    {
        return $this->id;
    }

    public function getUserId(): ?Users
    {
        return $this->user_id;
    }

    public function setUserId(?Users $user_id): static
    {
        $this->user_id = $user_id;

        return $this;
    }

    public function getSentAt(): ?\DateTimeInterface
    {
        return $this->sent_at;
    }

    public function setSentAt(?\DateTimeInterface $sent_at): static
    {
        $this->sent_at = $sent_at;

        return $this;
    }

    public function getLastMessage(): ?string
    {
        return $this->lastMessage;
    }

    public function setLastMessage(?string $lastMessage): static
    {
        $this->lastMessage = $lastMessage;

        return $this;
    }

    public function getUsername(): ?string
    {
        return $this->username;
    }

    public function setUsername(string $username): static
    {
        $this->username = $username;

        return $this;
    }
}
</file>

<file path="src/Entity/UserProfile.php">
<?php

namespace App\Entity;

use App\Repository\UserProfileRepository;
use Doctrine\ORM\Mapping as ORM;

#[ORM\Entity(repositoryClass: UserProfileRepository::class)]
class UserProfile
{
    #[ORM\Id]
    #[ORM\GeneratedValue]
    #[ORM\Column]
    private ?int $id = null;

    #[ORM\Column]
    private ?int $user_id = null;

    #[ORM\Column(length: 255)]
    private ?string $bio = null;

    #[ORM\Column(length: 255)]
    private ?string $profilePicture = null;

    #[ORM\Column(length: 255)]
    private ?string $intrests = null;

    public function getId(): ?int
    {
        return $this->id;
    }

    public function getUserId(): ?int
    {
        return $this->user_id;
    }

    public function setUserId(int $user_id): static
    {
        $this->user_id = $user_id;

        return $this;
    }

    public function getBio(): ?string
    {
        return $this->bio;
    }

    public function setBio(string $bio): static
    {
        $this->bio = $bio;

        return $this;
    }

    public function getProfilePicture(): ?string
    {
        return $this->profilePicture;
    }

    public function setProfilePicture(string $profilePicture): static
    {
        $this->profilePicture = $profilePicture;

        return $this;
    }

    public function getIntrests(): ?string
    {
        return $this->intrests;
    }

    public function setIntrests(string $intrests): static
    {
        $this->intrests = $intrests;

        return $this;
    }
}
</file>

<file path="src/Entity/UserRewards.php">
<?php

namespace App\Entity;

use App\Repository\UserRewardsRepository;
use Doctrine\ORM\Mapping as ORM;

#[ORM\Entity(repositoryClass: UserRewardsRepository::class)]
class UserRewards
{
    #[ORM\Id]
    #[ORM\GeneratedValue]
    #[ORM\Column]
    private ?int $id = null;

    #[ORM\Column]
    private ?int $user_id = null;

    #[ORM\Column]
    private ?int $reward_id = null;

    #[ORM\Column]
    private ?int $event_id = null;

    #[ORM\Column]
    private ?int $points_earned = null;

    #[ORM\Column (length: 255)]
    private ?string $erned_at = null;

    public function getId(): ?int
    {
        return $this->id;
    }

    public function getUserId(): ?int
    {
        return $this->user_id;
    }

    public function setUserId(int $user_id): static
    {
        $this->user_id = $user_id;

        return $this;
    }

    public function getRewardId(): ?int
    {
        return $this->reward_id;
    }

    public function setRewardId(int $reward_id): static
    {
        $this->reward_id = $reward_id;

        return $this;
    }

    public function getEventId(): ?int
    {
        return $this->event_id;
    }

    public function setEventId(int $event_id): static
    {
        $this->event_id = $event_id;

        return $this;
    }

    public function getPointsEarned() : ?int
    {
        return $this->points_earned;
    }

    public function setPointsEarned(int $points_earned): static
    {
        $this->points_earned = $points_earned;

        return $this;
    }

    public function getErnedAt(): ?string
    {
        return $this->erned_at;
    }

    public function setErnedAt(string $erned_at): static
    {
        $this->erned_at = $erned_at;

        return $this;
    }
}
</file>

<file path="src/Entity/VisiteUtilisateur.php">
<?php

namespace App\Entity;

use App\Repository\VisiteUtilisateurRepository;
use Doctrine\DBAL\Types\Types;
use Doctrine\ORM\Mapping as ORM;

#[ORM\Entity(repositoryClass: VisiteUtilisateurRepository::class)]
class VisiteUtilisateur
{
    #[ORM\Id]
    #[ORM\GeneratedValue]
    #[ORM\Column]
    private ?int $id = null;

    #[ORM\Column(type: Types::DATE_MUTABLE)]
    private ?\DateTimeInterface $dernier_visite = null;

    #[ORM\Column]
    private ?int $serie = null;

    #[ORM\Column]
    private ?int $user_id = null;

    public function getId(): ?int
    {
        return $this->id;
    }

    public function getDernierVisite(): ?\DateTimeInterface
    {
        return $this->dernier_visite;
    }

    public function setDernierVisite(\DateTimeInterface $dernier_visite): static
    {
        $this->dernier_visite = $dernier_visite;

        return $this;
    }

    public function getSerie(): ?int
    {
        return $this->serie;
    }

    public function setSerie(int $serie): static
    {
        $this->serie = $serie;

        return $this;
    }

    public function getUserId(): ?int
    {
        return $this->user_id;
    }

    public function setUserId(int $user_id): static
    {
        $this->user_id = $user_id;

        return $this;
    }
}
</file>

<file path="src/Entity/WorkerRaitings.php">
<?php

namespace App\Entity;

use App\Repository\WorkerRaitingsRepository;
use Doctrine\DBAL\Types\Types;
use Doctrine\ORM\Mapping as ORM;

#[ORM\Entity(repositoryClass: WorkerRaitingsRepository::class)]
class WorkerRaitings
{
    #[ORM\Id]
    #[ORM\GeneratedValue]
    #[ORM\Column]
    private ?int $id = null;

    #[ORM\Column]
    private ?int $user_id = null;

    #[ORM\Column]
    private ?int $rater_id = null;

    #[ORM\Column]
    private ?int $job_id = null;

    #[ORM\Column]
    private ?int $raiting = null;

    #[ORM\Column(type: Types::TEXT)]
    private ?string $comment = null;

    #[ORM\Column(type: Types::DATETIME_MUTABLE, nullable: true)]
    private ?\DateTimeInterface $created_at = null;

    public function getId(): ?int
    {
        return $this->id;
    }

    public function getUserId(): ?int
    {
        return $this->user_id;
    }

    public function setUserId(int $user_id): static
    {
        $this->user_id = $user_id;

        return $this;
    }

    public function getRaterId(): ?int
    {
        return $this->rater_id;
    }

    public function setRaterId(int $rater_id): static
    {
        $this->rater_id = $rater_id;

        return $this;
    }

    public function getJobId(): ?int
    {
        return $this->job_id;
    }

    public function setJobId(int $job_id): static
    {
        $this->job_id = $job_id;

        return $this;
    }

    public function getRaiting(): ?int
    {
        return $this->raiting;
    }

    public function setRaiting(int $raiting): static
    {
        $this->raiting = $raiting;

        return $this;
    }

    public function getComment(): ?string
    {
        return $this->comment;
    }

    public function setComment(string $comment): static
    {
        $this->comment = $comment;

        return $this;
    }

    public function getCreatedAt(): ?\DateTimeInterface
    {
        return $this->created_at;
    }

    public function setCreatedAt(?\DateTimeInterface $created_at): static
    {
        $this->created_at = $created_at;

        return $this;
    }
}
</file>

<file path="src/Form/ApplicationFormType.php">
<?php

namespace App\Form;

use App\Entity\Applications;
use Symfony\Component\Form\AbstractType;
use Symfony\Component\Form\FormBuilderInterface;
use Symfony\Component\OptionsResolver\OptionsResolver;

class ApplicationFormType extends AbstractType
{
    public function buildForm(FormBuilderInterface $builder, array $options): void
    {
        $builder
            ->add('status')
            ->add('appliedAt')
            ->add('cover_letter')
            ->add('resume_path')
            ->add('coverRating')
            
        ;
    }

    public function configureOptions(OptionsResolver $resolver): void
    {
        $resolver->setDefaults([
            'data_class' => Applications::class,
        ]);
    }
}
</file>

<file path="src/Form/LoginFormType.php">
<?php

namespace App\Form;

use App\Entity\Users;
use Symfony\Component\Form\AbstractType;
use Symfony\Component\Form\FormBuilderInterface;
use Symfony\Component\OptionsResolver\OptionsResolver;

class LoginFormType extends AbstractType
{
    public function buildForm(FormBuilderInterface $builder, array $options): void
    {
        $builder
            ->add('username')
            ->add('password')
            ->add('email')
            ->add('createdAt')
            ->add('updatedAt')
            ->add('points')
            ->add('age')
            ->add('gender')
            ->add('argent')
        ;
    }

    public function configureOptions(OptionsResolver $resolver): void
    {
        $resolver->setDefaults([
            'data_class' => Users::class,
        ]);
    }
}
</file>

<file path="src/Form/RegistrationFormType.php">
<?php

namespace App\Form;

use App\Entity\Users;
use Symfony\Component\Form\AbstractType;
use Symfony\Component\Form\Extension\Core\Type\CheckboxType;
use Symfony\Component\Form\Extension\Core\Type\EmailType;
use Symfony\Component\Form\Extension\Core\Type\PasswordType;
use Symfony\Component\Form\Extension\Core\Type\TextType;
use Symfony\Component\Form\Extension\Core\Type\NumberType;
use Symfony\Component\Form\Extension\Core\Type\ChoiceType;
use Symfony\Component\Form\FormBuilderInterface;
use Symfony\Component\OptionsResolver\OptionsResolver;
use Symfony\Component\Validator\Constraints\IsTrue;
use Symfony\Component\Validator\Constraints\Length;
use Symfony\Component\Validator\Constraints\NotBlank;
use Symfony\Component\Validator\Constraints\Range;

class RegistrationFormType extends AbstractType
{
    public function buildForm(FormBuilderInterface $builder, array $options): void
    {
        $builder
            ->add('username', TextType::class, [
                'attr' => [
                    'class' => 'form-control',
                    'placeholder' => 'Username'
                ],
                'constraints' => [
                    new NotBlank([
                        'message' => 'Please enter a username',
                    ]),
                ],
                'label' => 'Username'
            ])
            ->add('email', EmailType::class, [
                'attr' => [
                    'class' => 'form-control',
                    'placeholder' => 'Email'
                ],
                'constraints' => [
                    new NotBlank([
                        'message' => 'Please enter an email',
                    ]),
                ],
                'label' => 'Email'
            ])
            ->add('age', NumberType::class, [
                'attr' => [
                    'class' => 'form-control',
                    'placeholder' => 'Age'
                ],
                'constraints' => [
                    new NotBlank([
                        'message' => 'Please enter your age',
                    ]),
                    new Range([
                        'min' => 18,
                        'minMessage' => 'You must be at least {{ limit }} years old',
                    ]),
                ],
                'label' => 'Age'
            ])
            ->add('gender', ChoiceType::class, [
                'choices' => [
                    'Male' => 'male',
                    'Female' => 'female',
                    'Other' => 'other'
                ],
                'attr' => [
                    'class' => 'form-control'
                ],
                'constraints' => [
                    new NotBlank([
                        'message' => 'Please select your gender',
                    ]),
                ],
                'label' => 'Gender'
            ])
            ->add('plainPassword', PasswordType::class, [
                'mapped' => false,
                'attr' => [
                    'class' => 'form-control',
                    'placeholder' => 'Password',
                    'autocomplete' => 'new-password'
                ],
                'constraints' => [
                    new NotBlank([
                        'message' => 'Please enter a password',
                    ]),
                    new Length([
                        'min' => 6,
                        'minMessage' => 'Your password should be at least {{ limit }} characters',
                        'max' => 4096,
                    ]),
                ],
                'label' => 'Password'
            ])
            ->add('agreeTerms', CheckboxType::class, [
                'mapped' => false,
                'constraints' => [
                    new IsTrue([
                        'message' => 'You should agree to our terms.',
                    ]),
                ],
                'label' => 'I agree to the terms and conditions'
            ])
        ;
    }

    public function configureOptions(OptionsResolver $resolver): void
    {
        $resolver->setDefaults([
            'data_class' => Users::class,
        ]);
    }
}
</file>

<file path="src/Kernel.php">
<?php

namespace App;

use Symfony\Bundle\FrameworkBundle\Kernel\MicroKernelTrait;
use Symfony\Component\HttpKernel\Kernel as BaseKernel;

class Kernel extends BaseKernel
{
    use MicroKernelTrait;
}
</file>

<file path="src/Repository/CategoryRepository.php">
<?php

namespace App\Repository;

use App\Entity\Category;
use Doctrine\Bundle\DoctrineBundle\Repository\ServiceEntityRepository;
use Doctrine\Persistence\ManagerRegistry;

/**
 * @extends ServiceEntityRepository<Category>
 *
 * @method Category|null find($id, $lockMode = null, $lockVersion = null)
 * @method Category|null findOneBy(array $criteria, array $orderBy = null)
 * @method Category[]    findAll()
 * @method Category[]    findBy(array $criteria, array $orderBy = null, $limit = null, $offset = null)
 */
class CategoryRepository extends ServiceEntityRepository
{
    public function __construct(ManagerRegistry $registry)
    {
        parent::__construct($registry, Category::class);
    }

//    /**
//     * @return Category[] Returns an array of Category objects
//     */
//    public function findByExampleField($value): array
//    {
//        return $this->createQueryBuilder('c')
//            ->andWhere('c.exampleField = :val')
//            ->setParameter('val', $value)
//            ->orderBy('c.id', 'ASC')
//            ->setMaxResults(10)
//            ->getQuery()
//            ->getResult()
//        ;
//    }

//    public function findOneBySomeField($value): ?Category
//    {
//        return $this->createQueryBuilder('c')
//            ->andWhere('c.exampleField = :val')
//            ->setParameter('val', $value)
//            ->getQuery()
//            ->getOneOrNullResult()
//        ;
//    }
}
</file>

<file path="src/Repository/CommentsRepository.php">
<?php

namespace App\Repository;

use App\Entity\Comments;
use Doctrine\Bundle\DoctrineBundle\Repository\ServiceEntityRepository;
use Doctrine\Persistence\ManagerRegistry;

/**
 * @extends ServiceEntityRepository<Comments>
 *
 * @method Comments|null find($id, $lockMode = null, $lockVersion = null)
 * @method Comments|null findOneBy(array $criteria, array $orderBy = null)
 * @method Comments[]    findAll()
 * @method Comments[]    findBy(array $criteria, array $orderBy = null, $limit = null, $offset = null)
 */
class CommentsRepository extends ServiceEntityRepository
{
    public function __construct(ManagerRegistry $registry)
    {
        parent::__construct($registry, Comments::class);
    }

//    /**
//     * @return Comments[] Returns an array of Comments objects
//     */
//    public function findByExampleField($value): array
//    {
//        return $this->createQueryBuilder('c')
//            ->andWhere('c.exampleField = :val')
//            ->setParameter('val', $value)
//            ->orderBy('c.id', 'ASC')
//            ->setMaxResults(10)
//            ->getQuery()
//            ->getResult()
//        ;
//    }

//    public function findOneBySomeField($value): ?Comments
//    {
//        return $this->createQueryBuilder('c')
//            ->andWhere('c.exampleField = :val')
//            ->setParameter('val', $value)
//            ->getQuery()
//            ->getOneOrNullResult()
//        ;
//    }
}
</file>

<file path="src/Repository/ConversionRepository.php">
<?php

namespace App\Repository;

use App\Entity\Conversion;
use Doctrine\Bundle\DoctrineBundle\Repository\ServiceEntityRepository;
use Doctrine\Persistence\ManagerRegistry;

/**
 * @extends ServiceEntityRepository<Conversion>
 *
 * @method Conversion|null find($id, $lockMode = null, $lockVersion = null)
 * @method Conversion|null findOneBy(array $criteria, array $orderBy = null)
 * @method Conversion[]    findAll()
 * @method Conversion[]    findBy(array $criteria, array $orderBy = null, $limit = null, $offset = null)
 */
class ConversionRepository extends ServiceEntityRepository
{
    public function __construct(ManagerRegistry $registry)
    {
        parent::__construct($registry, Conversion::class);
    }

//    /**
//     * @return Conversion[] Returns an array of Conversion objects
//     */
//    public function findByExampleField($value): array
//    {
//        return $this->createQueryBuilder('c')
//            ->andWhere('c.exampleField = :val')
//            ->setParameter('val', $value)
//            ->orderBy('c.id', 'ASC')
//            ->setMaxResults(10)
//            ->getQuery()
//            ->getResult()
//        ;
//    }

//    public function findOneBySomeField($value): ?Conversion
//    {
//        return $this->createQueryBuilder('c')
//            ->andWhere('c.exampleField = :val')
//            ->setParameter('val', $value)
//            ->getQuery()
//            ->getOneOrNullResult()
//        ;
//    }
}
</file>

<file path="src/Repository/FeedPostsRepository.php">
<?php

namespace App\Repository;

use App\Entity\FeedPosts;
use Doctrine\Bundle\DoctrineBundle\Repository\ServiceEntityRepository;
use Doctrine\Persistence\ManagerRegistry;

/**
 * @extends ServiceEntityRepository<FeedPosts>
 *
 * @method FeedPosts|null find($id, $lockMode = null, $lockVersion = null)
 * @method FeedPosts|null findOneBy(array $criteria, array $orderBy = null)
 * @method FeedPosts[]    findAll()
 * @method FeedPosts[]    findBy(array $criteria, array $orderBy = null, $limit = null, $offset = null)
 */
class FeedPostsRepository extends ServiceEntityRepository
{
    public function __construct(ManagerRegistry $registry)
    {
        parent::__construct($registry, FeedPosts::class);
    }

//    /**
//     * @return FeedPosts[] Returns an array of FeedPosts objects
//     */
//    public function findByExampleField($value): array
//    {
//        return $this->createQueryBuilder('f')
//            ->andWhere('f.exampleField = :val')
//            ->setParameter('val', $value)
//            ->orderBy('f.id', 'ASC')
//            ->setMaxResults(10)
//            ->getQuery()
//            ->getResult()
//        ;
//    }

//    public function findOneBySomeField($value): ?FeedPosts
//    {
//        return $this->createQueryBuilder('f')
//            ->andWhere('f.exampleField = :val')
//            ->setParameter('val', $value)
//            ->getQuery()
//            ->getOneOrNullResult()
//        ;
//    }
}
</file>

<file path="src/Repository/GroupFeedPostsRepository.php">
<?php

namespace App\Repository;

use App\Entity\GroupFeedPosts;
use Doctrine\Bundle\DoctrineBundle\Repository\ServiceEntityRepository;
use Doctrine\Persistence\ManagerRegistry;

/**
 * @extends ServiceEntityRepository<GroupFeedPosts>
 *
 * @method GroupFeedPosts|null find($id, $lockMode = null, $lockVersion = null)
 * @method GroupFeedPosts|null findOneBy(array $criteria, array $orderBy = null)
 * @method GroupFeedPosts[]    findAll()
 * @method GroupFeedPosts[]    findBy(array $criteria, array $orderBy = null, $limit = null, $offset = null)
 */
class GroupFeedPostsRepository extends ServiceEntityRepository
{
    public function __construct(ManagerRegistry $registry)
    {
        parent::__construct($registry, GroupFeedPosts::class);
    }

//    /**
//     * @return GroupFeedPosts[] Returns an array of GroupFeedPosts objects
//     */
//    public function findByExampleField($value): array
//    {
//        return $this->createQueryBuilder('g')
//            ->andWhere('g.exampleField = :val')
//            ->setParameter('val', $value)
//            ->orderBy('g.id', 'ASC')
//            ->setMaxResults(10)
//            ->getQuery()
//            ->getResult()
//        ;
//    }

//    public function findOneBySomeField($value): ?GroupFeedPosts
//    {
//        return $this->createQueryBuilder('g')
//            ->andWhere('g.exampleField = :val')
//            ->setParameter('val', $value)
//            ->getQuery()
//            ->getOneOrNullResult()
//        ;
//    }
}
</file>

<file path="src/Repository/GroupMembersRepository.php">
<?php

namespace App\Repository;

use App\Entity\GroupMembers;
use Doctrine\Bundle\DoctrineBundle\Repository\ServiceEntityRepository;
use Doctrine\Persistence\ManagerRegistry;

/**
 * @extends ServiceEntityRepository<GroupMembers>
 *
 * @method GroupMembers|null find($id, $lockMode = null, $lockVersion = null)
 * @method GroupMembers|null findOneBy(array $criteria, array $orderBy = null)
 * @method GroupMembers[]    findAll()
 * @method GroupMembers[]    findBy(array $criteria, array $orderBy = null, $limit = null, $offset = null)
 */
class GroupMembersRepository extends ServiceEntityRepository
{
    public function __construct(ManagerRegistry $registry)
    {
        parent::__construct($registry, GroupMembers::class);
    }

//    /**
//     * @return GroupMembers[] Returns an array of GroupMembers objects
//     */
//    public function findByExampleField($value): array
//    {
//        return $this->createQueryBuilder('g')
//            ->andWhere('g.exampleField = :val')
//            ->setParameter('val', $value)
//            ->orderBy('g.id', 'ASC')
//            ->setMaxResults(10)
//            ->getQuery()
//            ->getResult()
//        ;
//    }

//    public function findOneBySomeField($value): ?GroupMembers
//    {
//        return $this->createQueryBuilder('g')
//            ->andWhere('g.exampleField = :val')
//            ->setParameter('val', $value)
//            ->getQuery()
//            ->getOneOrNullResult()
//        ;
//    }
}
</file>

<file path="src/Repository/HistoriquePointsRepository.php">
<?php

namespace App\Repository;

use App\Entity\HistoriquePoints;
use Doctrine\Bundle\DoctrineBundle\Repository\ServiceEntityRepository;
use Doctrine\Persistence\ManagerRegistry;

/**
 * @extends ServiceEntityRepository<HistoriquePoints>
 *
 * @method HistoriquePoints|null find($id, $lockMode = null, $lockVersion = null)
 * @method HistoriquePoints|null findOneBy(array $criteria, array $orderBy = null)
 * @method HistoriquePoints[]    findAll()
 * @method HistoriquePoints[]    findBy(array $criteria, array $orderBy = null, $limit = null, $offset = null)
 */
class HistoriquePointsRepository extends ServiceEntityRepository
{
    public function __construct(ManagerRegistry $registry)
    {
        parent::__construct($registry, HistoriquePoints::class);
    }

//    /**
//     * @return HistoriquePoints[] Returns an array of HistoriquePoints objects
//     */
//    public function findByExampleField($value): array
//    {
//        return $this->createQueryBuilder('h')
//            ->andWhere('h.exampleField = :val')
//            ->setParameter('val', $value)
//            ->orderBy('h.id', 'ASC')
//            ->setMaxResults(10)
//            ->getQuery()
//            ->getResult()
//        ;
//    }

//    public function findOneBySomeField($value): ?HistoriquePoints
//    {
//        return $this->createQueryBuilder('h')
//            ->andWhere('h.exampleField = :val')
//            ->setParameter('val', $value)
//            ->getQuery()
//            ->getOneOrNullResult()
//        ;
//    }
}
</file>

<file path="src/Repository/LikesRepository.php">
<?php

namespace App\Repository;

use App\Entity\Likes;
use Doctrine\Bundle\DoctrineBundle\Repository\ServiceEntityRepository;
use Doctrine\Persistence\ManagerRegistry;

/**
 * @extends ServiceEntityRepository<Likes>
 *
 * @method Likes|null find($id, $lockMode = null, $lockVersion = null)
 * @method Likes|null findOneBy(array $criteria, array $orderBy = null)
 * @method Likes[]    findAll()
 * @method Likes[]    findBy(array $criteria, array $orderBy = null, $limit = null, $offset = null)
 */
class LikesRepository extends ServiceEntityRepository
{
    public function __construct(ManagerRegistry $registry)
    {
        parent::__construct($registry, Likes::class);
    }

//    /**
//     * @return Likes[] Returns an array of Likes objects
//     */
//    public function findByExampleField($value): array
//    {
//        return $this->createQueryBuilder('l')
//            ->andWhere('l.exampleField = :val')
//            ->setParameter('val', $value)
//            ->orderBy('l.id', 'ASC')
//            ->setMaxResults(10)
//            ->getQuery()
//            ->getResult()
//        ;
//    }

//    public function findOneBySomeField($value): ?Likes
//    {
//        return $this->createQueryBuilder('l')
//            ->andWhere('l.exampleField = :val')
//            ->setParameter('val', $value)
//            ->getQuery()
//            ->getOneOrNullResult()
//        ;
//    }
}
</file>

<file path="src/Repository/MessagesRepository.php">
<?php

namespace App\Repository;

use App\Entity\Messages;
use Doctrine\Bundle\DoctrineBundle\Repository\ServiceEntityRepository;
use Doctrine\Persistence\ManagerRegistry;

/**
 * @extends ServiceEntityRepository<Messages>
 *
 * @method Messages|null find($id, $lockMode = null, $lockVersion = null)
 * @method Messages|null findOneBy(array $criteria, array $orderBy = null)
 * @method Messages[]    findAll()
 * @method Messages[]    findBy(array $criteria, array $orderBy = null, $limit = null, $offset = null)
 */
class MessagesRepository extends ServiceEntityRepository
{
    public function __construct(ManagerRegistry $registry)
    {
        parent::__construct($registry, Messages::class);
    }

//    /**
//     * @return Messages[] Returns an array of Messages objects
//     */
//    public function findByExampleField($value): array
//    {
//        return $this->createQueryBuilder('m')
//            ->andWhere('m.exampleField = :val')
//            ->setParameter('val', $value)
//            ->orderBy('m.id', 'ASC')
//            ->setMaxResults(10)
//            ->getQuery()
//            ->getResult()
//        ;
//    }

//    public function findOneBySomeField($value): ?Messages
//    {
//        return $this->createQueryBuilder('m')
//            ->andWhere('m.exampleField = :val')
//            ->setParameter('val', $value)
//            ->getQuery()
//            ->getOneOrNullResult()
//        ;
//    }
}
</file>

<file path="src/Repository/ParticipationRepository.php">
<?php

namespace App\Repository;

use App\Entity\Participation;
use Doctrine\Bundle\DoctrineBundle\Repository\ServiceEntityRepository;
use Doctrine\Persistence\ManagerRegistry;

/**
 * @extends ServiceEntityRepository<Participation>
 *
 * @method Participation|null find($id, $lockMode = null, $lockVersion = null)
 * @method Participation|null findOneBy(array $criteria, array $orderBy = null)
 * @method Participation[]    findAll()
 * @method Participation[]    findBy(array $criteria, array $orderBy = null, $limit = null, $offset = null)
 */
class ParticipationRepository extends ServiceEntityRepository
{
    public function __construct(ManagerRegistry $registry)
    {
        parent::__construct($registry, Participation::class);
    }

//    /**
//     * @return Participation[] Returns an array of Participation objects
//     */
//    public function findByExampleField($value): array
//    {
//        return $this->createQueryBuilder('p')
//            ->andWhere('p.exampleField = :val')
//            ->setParameter('val', $value)
//            ->orderBy('p.id', 'ASC')
//            ->setMaxResults(10)
//            ->getQuery()
//            ->getResult()
//        ;
//    }

//    public function findOneBySomeField($value): ?Participation
//    {
//        return $this->createQueryBuilder('p')
//            ->andWhere('p.exampleField = :val')
//            ->setParameter('val', $value)
//            ->getQuery()
//            ->getOneOrNullResult()
//        ;
//    }
}
</file>

<file path="src/Repository/ReviewsRepository.php">
<?php

namespace App\Repository;

use App\Entity\Reviews;
use Doctrine\Bundle\DoctrineBundle\Repository\ServiceEntityRepository;
use Doctrine\Persistence\ManagerRegistry;

/**
 * @extends ServiceEntityRepository<Reviews>
 *
 * @method Reviews|null find($id, $lockMode = null, $lockVersion = null)
 * @method Reviews|null findOneBy(array $criteria, array $orderBy = null)
 * @method Reviews[]    findAll()
 * @method Reviews[]    findBy(array $criteria, array $orderBy = null, $limit = null, $offset = null)
 */
class ReviewsRepository extends ServiceEntityRepository
{
    public function __construct(ManagerRegistry $registry)
    {
        parent::__construct($registry, Reviews::class);
    }

//    /**
//     * @return Reviews[] Returns an array of Reviews objects
//     */
//    public function findByExampleField($value): array
//    {
//        return $this->createQueryBuilder('r')
//            ->andWhere('r.exampleField = :val')
//            ->setParameter('val', $value)
//            ->orderBy('r.id', 'ASC')
//            ->setMaxResults(10)
//            ->getQuery()
//            ->getResult()
//        ;
//    }

//    public function findOneBySomeField($value): ?Reviews
//    {
//        return $this->createQueryBuilder('r')
//            ->andWhere('r.exampleField = :val')
//            ->setParameter('val', $value)
//            ->getQuery()
//            ->getOneOrNullResult()
//        ;
//    }
}
</file>

<file path="src/Repository/RewardsRepository.php">
<?php

namespace App\Repository;

use App\Entity\Rewards;
use Doctrine\Bundle\DoctrineBundle\Repository\ServiceEntityRepository;
use Doctrine\Persistence\ManagerRegistry;

/**
 * @extends ServiceEntityRepository<Rewards>
 *
 * @method Rewards|null find($id, $lockMode = null, $lockVersion = null)
 * @method Rewards|null findOneBy(array $criteria, array $orderBy = null)
 * @method Rewards[]    findAll()
 * @method Rewards[]    findBy(array $criteria, array $orderBy = null, $limit = null, $offset = null)
 */
class RewardsRepository extends ServiceEntityRepository
{
    public function __construct(ManagerRegistry $registry)
    {
        parent::__construct($registry, Rewards::class);
    }

//    /**
//     * @return Rewards[] Returns an array of Rewards objects
//     */
//    public function findByExampleField($value): array
//    {
//        return $this->createQueryBuilder('r')
//            ->andWhere('r.exampleField = :val')
//            ->setParameter('val', $value)
//            ->orderBy('r.id', 'ASC')
//            ->setMaxResults(10)
//            ->getQuery()
//            ->getResult()
//        ;
//    }

//    public function findOneBySomeField($value): ?Rewards
//    {
//        return $this->createQueryBuilder('r')
//            ->andWhere('r.exampleField = :val')
//            ->setParameter('val', $value)
//            ->getQuery()
//            ->getOneOrNullResult()
//        ;
//    }
}
</file>

<file path="src/Repository/RouletteRepository.php">
<?php

namespace App\Repository;

use App\Entity\Roulette;
use Doctrine\Bundle\DoctrineBundle\Repository\ServiceEntityRepository;
use Doctrine\Persistence\ManagerRegistry;

/**
 * @extends ServiceEntityRepository<Roulette>
 *
 * @method Roulette|null find($id, $lockMode = null, $lockVersion = null)
 * @method Roulette|null findOneBy(array $criteria, array $orderBy = null)
 * @method Roulette[]    findAll()
 * @method Roulette[]    findBy(array $criteria, array $orderBy = null, $limit = null, $offset = null)
 */
class RouletteRepository extends ServiceEntityRepository
{
    public function __construct(ManagerRegistry $registry)
    {
        parent::__construct($registry, Roulette::class);
    }

//    /**
//     * @return Roulette[] Returns an array of Roulette objects
//     */
//    public function findByExampleField($value): array
//    {
//        return $this->createQueryBuilder('r')
//            ->andWhere('r.exampleField = :val')
//            ->setParameter('val', $value)
//            ->orderBy('r.id', 'ASC')
//            ->setMaxResults(10)
//            ->getQuery()
//            ->getResult()
//        ;
//    }

//    public function findOneBySomeField($value): ?Roulette
//    {
//        return $this->createQueryBuilder('r')
//            ->andWhere('r.exampleField = :val')
//            ->setParameter('val', $value)
//            ->getQuery()
//            ->getOneOrNullResult()
//        ;
//    }
}
</file>

<file path="src/Repository/SharesRepository.php">
<?php

namespace App\Repository;

use App\Entity\Shares;
use Doctrine\Bundle\DoctrineBundle\Repository\ServiceEntityRepository;
use Doctrine\Persistence\ManagerRegistry;

/**
 * @extends ServiceEntityRepository<Shares>
 *
 * @method Shares|null find($id, $lockMode = null, $lockVersion = null)
 * @method Shares|null findOneBy(array $criteria, array $orderBy = null)
 * @method Shares[]    findAll()
 * @method Shares[]    findBy(array $criteria, array $orderBy = null, $limit = null, $offset = null)
 */
class SharesRepository extends ServiceEntityRepository
{
    public function __construct(ManagerRegistry $registry)
    {
        parent::__construct($registry, Shares::class);
    }

//    /**
//     * @return Shares[] Returns an array of Shares objects
//     */
//    public function findByExampleField($value): array
//    {
//        return $this->createQueryBuilder('s')
//            ->andWhere('s.exampleField = :val')
//            ->setParameter('val', $value)
//            ->orderBy('s.id', 'ASC')
//            ->setMaxResults(10)
//            ->getQuery()
//            ->getResult()
//        ;
//    }

//    public function findOneBySomeField($value): ?Shares
//    {
//        return $this->createQueryBuilder('s')
//            ->andWhere('s.exampleField = :val')
//            ->setParameter('val', $value)
//            ->getQuery()
//            ->getOneOrNullResult()
//        ;
//    }
}
</file>

<file path="src/Repository/TransactionArgentRepository.php">
<?php

namespace App\Repository;

use App\Entity\TransactionArgent;
use Doctrine\Bundle\DoctrineBundle\Repository\ServiceEntityRepository;
use Doctrine\Persistence\ManagerRegistry;

/**
 * @extends ServiceEntityRepository<TransactionArgent>
 *
 * @method TransactionArgent|null find($id, $lockMode = null, $lockVersion = null)
 * @method TransactionArgent|null findOneBy(array $criteria, array $orderBy = null)
 * @method TransactionArgent[]    findAll()
 * @method TransactionArgent[]    findBy(array $criteria, array $orderBy = null, $limit = null, $offset = null)
 */
class TransactionArgentRepository extends ServiceEntityRepository
{
    public function __construct(ManagerRegistry $registry)
    {
        parent::__construct($registry, TransactionArgent::class);
    }

//    /**
//     * @return TransactionArgent[] Returns an array of TransactionArgent objects
//     */
//    public function findByExampleField($value): array
//    {
//        return $this->createQueryBuilder('t')
//            ->andWhere('t.exampleField = :val')
//            ->setParameter('val', $value)
//            ->orderBy('t.id', 'ASC')
//            ->setMaxResults(10)
//            ->getQuery()
//            ->getResult()
//        ;
//    }

//    public function findOneBySomeField($value): ?TransactionArgent
//    {
//        return $this->createQueryBuilder('t')
//            ->andWhere('t.exampleField = :val')
//            ->setParameter('val', $value)
//            ->getQuery()
//            ->getOneOrNullResult()
//        ;
//    }
}
</file>

<file path="src/Repository/UserGroupsRepository.php">
<?php

namespace App\Repository;

use App\Entity\UserGroups;
use Doctrine\Bundle\DoctrineBundle\Repository\ServiceEntityRepository;
use Doctrine\Persistence\ManagerRegistry;

/**
 * @extends ServiceEntityRepository<UserGroups>
 *
 * @method UserGroups|null find($id, $lockMode = null, $lockVersion = null)
 * @method UserGroups|null findOneBy(array $criteria, array $orderBy = null)
 * @method UserGroups[]    findAll()
 * @method UserGroups[]    findBy(array $criteria, array $orderBy = null, $limit = null, $offset = null)
 */
class UserGroupsRepository extends ServiceEntityRepository
{
    public function __construct(ManagerRegistry $registry)
    {
        parent::__construct($registry, UserGroups::class);
    }

//    /**
//     * @return UserGroups[] Returns an array of UserGroups objects
//     */
//    public function findByExampleField($value): array
//    {
//        return $this->createQueryBuilder('u')
//            ->andWhere('u.exampleField = :val')
//            ->setParameter('val', $value)
//            ->orderBy('u.id', 'ASC')
//            ->setMaxResults(10)
//            ->getQuery()
//            ->getResult()
//        ;
//    }

//    public function findOneBySomeField($value): ?UserGroups
//    {
//        return $this->createQueryBuilder('u')
//            ->andWhere('u.exampleField = :val')
//            ->setParameter('val', $value)
//            ->getQuery()
//            ->getOneOrNullResult()
//        ;
//    }
}
</file>

<file path="src/Repository/UserIntrestsRepository.php">
<?php

namespace App\Repository;

use App\Entity\UserIntrests;
use Doctrine\Bundle\DoctrineBundle\Repository\ServiceEntityRepository;
use Doctrine\Persistence\ManagerRegistry;

/**
 * @extends ServiceEntityRepository<UserIntrests>
 *
 * @method UserIntrests|null find($id, $lockMode = null, $lockVersion = null)
 * @method UserIntrests|null findOneBy(array $criteria, array $orderBy = null)
 * @method UserIntrests[]    findAll()
 * @method UserIntrests[]    findBy(array $criteria, array $orderBy = null, $limit = null, $offset = null)
 */
class UserIntrestsRepository extends ServiceEntityRepository
{
    public function __construct(ManagerRegistry $registry)
    {
        parent::__construct($registry, UserIntrests::class);
    }

//    /**
//     * @return UserIntrests[] Returns an array of UserIntrests objects
//     */
//    public function findByExampleField($value): array
//    {
//        return $this->createQueryBuilder('u')
//            ->andWhere('u.exampleField = :val')
//            ->setParameter('val', $value)
//            ->orderBy('u.id', 'ASC')
//            ->setMaxResults(10)
//            ->getQuery()
//            ->getResult()
//        ;
//    }

//    public function findOneBySomeField($value): ?UserIntrests
//    {
//        return $this->createQueryBuilder('u')
//            ->andWhere('u.exampleField = :val')
//            ->setParameter('val', $value)
//            ->getQuery()
//            ->getOneOrNullResult()
//        ;
//    }
}
</file>

<file path="src/Repository/UserMessagesRepository.php">
<?php

namespace App\Repository;

use App\Entity\UserMessages;
use Doctrine\Bundle\DoctrineBundle\Repository\ServiceEntityRepository;
use Doctrine\Persistence\ManagerRegistry;

/**
 * @extends ServiceEntityRepository<UserMessages>
 *
 * @method UserMessages|null find($id, $lockMode = null, $lockVersion = null)
 * @method UserMessages|null findOneBy(array $criteria, array $orderBy = null)
 * @method UserMessages[]    findAll()
 * @method UserMessages[]    findBy(array $criteria, array $orderBy = null, $limit = null, $offset = null)
 */
class UserMessagesRepository extends ServiceEntityRepository
{
    public function __construct(ManagerRegistry $registry)
    {
        parent::__construct($registry, UserMessages::class);
    }

//    /**
//     * @return UserMessages[] Returns an array of UserMessages objects
//     */
//    public function findByExampleField($value): array
//    {
//        return $this->createQueryBuilder('u')
//            ->andWhere('u.exampleField = :val')
//            ->setParameter('val', $value)
//            ->orderBy('u.id', 'ASC')
//            ->setMaxResults(10)
//            ->getQuery()
//            ->getResult()
//        ;
//    }

//    public function findOneBySomeField($value): ?UserMessages
//    {
//        return $this->createQueryBuilder('u')
//            ->andWhere('u.exampleField = :val')
//            ->setParameter('val', $value)
//            ->getQuery()
//            ->getOneOrNullResult()
//        ;
//    }
}
</file>

<file path="src/Repository/UserProfileRepository.php">
<?php

namespace App\Repository;

use App\Entity\UserProfile;
use Doctrine\Bundle\DoctrineBundle\Repository\ServiceEntityRepository;
use Doctrine\Persistence\ManagerRegistry;

/**
 * @extends ServiceEntityRepository<UserProfile>
 *
 * @method UserProfile|null find($id, $lockMode = null, $lockVersion = null)
 * @method UserProfile|null findOneBy(array $criteria, array $orderBy = null)
 * @method UserProfile[]    findAll()
 * @method UserProfile[]    findBy(array $criteria, array $orderBy = null, $limit = null, $offset = null)
 */
class UserProfileRepository extends ServiceEntityRepository
{
    public function __construct(ManagerRegistry $registry)
    {
        parent::__construct($registry, UserProfile::class);
    }

//    /**
//     * @return UserProfile[] Returns an array of UserProfile objects
//     */
//    public function findByExampleField($value): array
//    {
//        return $this->createQueryBuilder('u')
//            ->andWhere('u.exampleField = :val')
//            ->setParameter('val', $value)
//            ->orderBy('u.id', 'ASC')
//            ->setMaxResults(10)
//            ->getQuery()
//            ->getResult()
//        ;
//    }

//    public function findOneBySomeField($value): ?UserProfile
//    {
//        return $this->createQueryBuilder('u')
//            ->andWhere('u.exampleField = :val')
//            ->setParameter('val', $value)
//            ->getQuery()
//            ->getOneOrNullResult()
//        ;
//    }
}
</file>

<file path="src/Repository/UserRewardsRepository.php">
<?php

namespace App\Repository;

use App\Entity\UserRewards;
use Doctrine\Bundle\DoctrineBundle\Repository\ServiceEntityRepository;
use Doctrine\Persistence\ManagerRegistry;

/**
 * @extends ServiceEntityRepository<UserRewards>
 *
 * @method UserRewards|null find($id, $lockMode = null, $lockVersion = null)
 * @method UserRewards|null findOneBy(array $criteria, array $orderBy = null)
 * @method UserRewards[]    findAll()
 * @method UserRewards[]    findBy(array $criteria, array $orderBy = null, $limit = null, $offset = null)
 */
class UserRewardsRepository extends ServiceEntityRepository
{
    public function __construct(ManagerRegistry $registry)
    {
        parent::__construct($registry, UserRewards::class);
    }

//    /**
//     * @return UserRewards[] Returns an array of UserRewards objects
//     */
//    public function findByExampleField($value): array
//    {
//        return $this->createQueryBuilder('u')
//            ->andWhere('u.exampleField = :val')
//            ->setParameter('val', $value)
//            ->orderBy('u.id', 'ASC')
//            ->setMaxResults(10)
//            ->getQuery()
//            ->getResult()
//        ;
//    }

//    public function findOneBySomeField($value): ?UserRewards
//    {
//        return $this->createQueryBuilder('u')
//            ->andWhere('u.exampleField = :val')
//            ->setParameter('val', $value)
//            ->getQuery()
//            ->getOneOrNullResult()
//        ;
//    }
}
</file>

<file path="src/Repository/UsersRepository.php">
<?php

namespace App\Repository;

use App\Entity\Users;
use Doctrine\Bundle\DoctrineBundle\Repository\ServiceEntityRepository;
use Doctrine\Persistence\ManagerRegistry;

/**
 * @extends ServiceEntityRepository<Users>
 *
 * @method Users|null find($id, $lockMode = null, $lockVersion = null)
 * @method Users|null findOneBy(array $criteria, array $orderBy = null)
 * @method Users[]    findAll()
 * @method Users[]    findBy(array $criteria, array $orderBy = null, $limit = null, $offset = null)
 */
class UsersRepository extends ServiceEntityRepository
{
    public function __construct(ManagerRegistry $registry)
    {
        parent::__construct($registry, Users::class);
    }

//    /**
//     * @return Users[] Returns an array of Users objects
//     */
//    public function findByExampleField($value): array
//    {
//        return $this->createQueryBuilder('u')
//            ->andWhere('u.exampleField = :val')
//            ->setParameter('val', $value)
//            ->orderBy('u.id', 'ASC')
//            ->setMaxResults(10)
//            ->getQuery()
//            ->getResult()
//        ;
//    }

//    public function findOneBySomeField($value): ?Users
//    {
//        return $this->createQueryBuilder('u')
//            ->andWhere('u.exampleField = :val')
//            ->setParameter('val', $value)
//            ->getQuery()
//            ->getOneOrNullResult()
//        ;
//    }
}
</file>

<file path="src/Repository/VisiteUtilisateurRepository.php">
<?php

namespace App\Repository;

use App\Entity\VisiteUtilisateur;
use Doctrine\Bundle\DoctrineBundle\Repository\ServiceEntityRepository;
use Doctrine\Persistence\ManagerRegistry;

/**
 * @extends ServiceEntityRepository<VisiteUtilisateur>
 *
 * @method VisiteUtilisateur|null find($id, $lockMode = null, $lockVersion = null)
 * @method VisiteUtilisateur|null findOneBy(array $criteria, array $orderBy = null)
 * @method VisiteUtilisateur[]    findAll()
 * @method VisiteUtilisateur[]    findBy(array $criteria, array $orderBy = null, $limit = null, $offset = null)
 */
class VisiteUtilisateurRepository extends ServiceEntityRepository
{
    public function __construct(ManagerRegistry $registry)
    {
        parent::__construct($registry, VisiteUtilisateur::class);
    }

//    /**
//     * @return VisiteUtilisateur[] Returns an array of VisiteUtilisateur objects
//     */
//    public function findByExampleField($value): array
//    {
//        return $this->createQueryBuilder('v')
//            ->andWhere('v.exampleField = :val')
//            ->setParameter('val', $value)
//            ->orderBy('v.id', 'ASC')
//            ->setMaxResults(10)
//            ->getQuery()
//            ->getResult()
//        ;
//    }

//    public function findOneBySomeField($value): ?VisiteUtilisateur
//    {
//        return $this->createQueryBuilder('v')
//            ->andWhere('v.exampleField = :val')
//            ->setParameter('val', $value)
//            ->getQuery()
//            ->getOneOrNullResult()
//        ;
//    }
}
</file>

<file path="src/Repository/WorkerRaitingsRepository.php">
<?php

namespace App\Repository;

use App\Entity\WorkerRaitings;
use Doctrine\Bundle\DoctrineBundle\Repository\ServiceEntityRepository;
use Doctrine\Persistence\ManagerRegistry;

/**
 * @extends ServiceEntityRepository<WorkerRaitings>
 *
 * @method WorkerRaitings|null find($id, $lockMode = null, $lockVersion = null)
 * @method WorkerRaitings|null findOneBy(array $criteria, array $orderBy = null)
 * @method WorkerRaitings[]    findAll()
 * @method WorkerRaitings[]    findBy(array $criteria, array $orderBy = null, $limit = null, $offset = null)
 */
class WorkerRaitingsRepository extends ServiceEntityRepository
{
    public function __construct(ManagerRegistry $registry)
    {
        parent::__construct($registry, WorkerRaitings::class);
    }

//    /**
//     * @return WorkerRaitings[] Returns an array of WorkerRaitings objects
//     */
//    public function findByExampleField($value): array
//    {
//        return $this->createQueryBuilder('w')
//            ->andWhere('w.exampleField = :val')
//            ->setParameter('val', $value)
//            ->orderBy('w.id', 'ASC')
//            ->setMaxResults(10)
//            ->getQuery()
//            ->getResult()
//        ;
//    }

//    public function findOneBySomeField($value): ?WorkerRaitings
//    {
//        return $this->createQueryBuilder('w')
//            ->andWhere('w.exampleField = :val')
//            ->setParameter('val', $value)
//            ->getQuery()
//            ->getOneOrNullResult()
//        ;
//    }
}
</file>

<file path="templates/application_form/application_form.html.twig">
{% extends 'base.html.twig' %}

{% block title %}Hello ApplicationFormController!{% endblock %}

{% block body %}
<style>
    .example-wrapper { margin: 1em auto; max-width: 800px; width: 95%; font: 18px/1.5 sans-serif; }
    .example-wrapper code { background: #F5F5F5; padding: 2px 6px; }
</style>

<div class="example-wrapper">
    <h1>Hello {{ controller_name }}! ✅</h1>

    This friendly message is coming from:
    <ul>
        <li>Your controller at <code><a href="{{ 'C:/Users/user/prointegsy/src/Controller/ApplicationFormController.php'|file_link(0) }}">src/Controller/ApplicationFormController.php</a></code></li>
        <li>Your template at <code><a href="{{ 'C:/Users/user/prointegsy/templates/application_form/index.html.twig'|file_link(0) }}">templates/application_form/index.html.twig</a></code></li>
    </ul>
</div>
{% endblock %}
</file>

<file path="templates/auth/auth.html.twig">
{% extends 'base.html.twig' %}

{% block title %}Hello AuthController!{% endblock %}

{% block body %}
<style>
    .example-wrapper { margin: 1em auto; max-width: 800px; width: 95%; font: 18px/1.5 sans-serif; }
    .example-wrapper code { background: #F5F5F5; padding: 2px 6px; }
</style>

<div class="example-wrapper">
    <h1>Hello {{ controller_name }}! ✅</h1>

    This friendly message is coming from:
    <ul>
        <li>Your controller at <code><a href="{{ 'C:/Users/user/PiSymfony/src/Controller/AuthController.php'|file_link(0) }}">src/Controller/AuthController.php</a></code></li>
        <li>Your template at <code><a href="{{ 'C:/Users/user/PiSymfony/templates/auth/index.html.twig'|file_link(0) }}">templates/auth/index.html.twig</a></code></li>
    </ul>
</div>
{% endblock %}
</file>

<file path="templates/auth/login.html.twig">
{% extends 'base.html.twig' %}

{% block title %}Login - Connect Sphere{% endblock %}

{% block stylesheets %}
    {{ parent() }}
    <link rel="stylesheet" href="{{ asset('css/auth.css') }}">
{% endblock %}

{% block body %}
<div class="auth-container">
    <div class="auth-form">
        <h2>Welcome Back</h2>
        <p class="auth-subtitle">Please enter your credentials to login</p>
        
        {# Success message (for redirects after registration) #}
        {% for message in app.flashes('success') %}
            <div class="alert alert-success">{{ message }}</div>
        {% endfor %}

        {# Error messages #}
        {% if error %}
            <div class="alert alert-danger">{{ error }}</div>
        {% endif %}
        {% for message in app.flashes('error') %}
            <div class="alert alert-danger">{{ message }}</div>
        {% endfor %}

        <form method="post">
            <div class="form-group">
                <label for="inputEmail">Email</label>
                <input type="email" value="{{ last_username }}" name="email" id="inputEmail" class="form-control" autocomplete="email" required autofocus>
            </div>

            <div class="form-group">
                <label for="inputPassword">Password</label>
                <input type="password" name="password" id="inputPassword" class="form-control" autocomplete="current-password" required>
            </div>

            <div class="form-options">
                <div class="remember-me">
                    <input type="checkbox" id="remember_me" name="_remember_me">
                    <label for="remember_me">Remember me</label>
                </div>
                <a href="#" class="forgot-password">Forgot password?</a>
            </div>

            <button type="submit" class="auth-btn">Sign In</button>
            
            <p class="auth-redirect">
                Don't have an account? <a href="{{ path('app_register') }}">Sign up</a>
            </p>
        </form>
    </div>
    
    <div class="auth-illustration">
        <img src="{{ asset('images/login.jpg') }}" alt="Login Illustration">
    </div>
</div>
{% endblock %}
</file>

<file path="templates/auth/register.html.twig">
{% extends 'base.html.twig' %}

{% block title %}Register - Connect Sphere{% endblock %}

{% block stylesheets %}
    {{ parent() }}
    <link rel="stylesheet" href="{{ asset('css/auth.css') }}">
{% endblock %}

{% block body %}
<div class="auth-container">
    <div class="auth-form">
        <h2>Create Account</h2>
        <p class="auth-subtitle">Please fill in your information to register</p>
        
        {# Success messages #}
        {% for message in app.flashes('success') %}
            <div class="alert alert-success">{{ message }}</div>
        {% endfor %}

        {# Error messages #}
        {% for message in app.flashes('error') %}
            <div class="alert alert-danger">{{ message|raw }}</div>
        {% endfor %}

        {{ form_start(registrationForm) }}
            <div class="form-group">
                {{ form_label(registrationForm.username) }}
                {{ form_widget(registrationForm.username, {'attr': {'class': 'form-control'}}) }}
                {{ form_errors(registrationForm.username) }}
            </div>
            
            <div class="form-group">
                {{ form_label(registrationForm.email) }}
                {{ form_widget(registrationForm.email, {'attr': {'class': 'form-control'}}) }}
                {{ form_errors(registrationForm.email) }}
            </div>
            
            <div class="form-group">
                {{ form_label(registrationForm.age) }}
                {{ form_widget(registrationForm.age, {'attr': {'class': 'form-control'}}) }}
                {{ form_errors(registrationForm.age) }}
            </div>
            
            <div class="form-group">
                {{ form_label(registrationForm.gender) }}
                {{ form_widget(registrationForm.gender, {'attr': {'class': 'form-control'}}) }}
                {{ form_errors(registrationForm.gender) }}
            </div>
            
            <div class="form-group">
                {{ form_label(registrationForm.plainPassword) }}
                {{ form_widget(registrationForm.plainPassword, {'attr': {'class': 'form-control'}}) }}
                {{ form_errors(registrationForm.plainPassword) }}
            </div>
            
            <div class="form-options">
                <div class="remember-me">
                    {{ form_widget(registrationForm.agreeTerms) }}
                    {{ form_label(registrationForm.agreeTerms) }}
                </div>
            </div>
            {{ form_errors(registrationForm.agreeTerms) }}

            <button type="submit" class="auth-btn">Sign Up</button>
        {{ form_end(registrationForm) }}
        
        <p class="auth-redirect">
            Already have an account? <a href="{{ path('app_login') }}">Sign in</a>
        </p>
    </div>
    
    <div class="auth-illustration">
        <img src="{{ asset('images/register.jpg') }}" alt="Registration Illustration">
    </div>
</div>
{% endblock %}
</file>

<file path="templates/chatbot/chatbot.html.twig">
{% block stylesheets %}
    <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@400;500;600;700&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
    <link rel="stylesheet" href="{{ asset('css/chatbot.css') }}">
{% endblock %}

{% block body %}
<div class="chatbot-page-container">
    <!-- Header from home page - UNCHANGED -->
    <header class="header">
        <nav class="nav-container container">
            <div class="logo">
                <a href="{{ path('app_home') }}" style="display:flex;align-items:center;text-decoration:none;">
                    <img src="{{ asset('images/logo.png') }}" alt="Logo" class="logo-img" style="margin-right:10px;">
                    <span style="font-weight:bold;font-size:1.5rem;color:black;">ConnectSphere</span>
                </a>
            </div>
            <div class="nav-links">
                <a href="{{ path('app_home') }}" class="nav-link">Home</a>
                <a href="{{ path('app_events') }}" class="nav-link">Events</a>
                <a href="{{ path('app_chatbot') }}" class="nav-link">Chatbot</a>
                <a href="#" class="nav-link">Speakers</a>
                <a href="#" class="nav-link">Tickets</a>
                <a href="#" class="nav-link">Blogs</a>
                <a href="#" class="contact-btn nav-link">Contact</a>
            </div>
        </nav>
    </header>

    <!-- Enhanced Chatbot Content -->
    <main class="chatbot-main-content">
        <div class="chatbot-container">
            <!-- New Chatbot Header -->
            <div class="chatbot-header">
                <div class="chatbot-header-left">
                    <div class="chatbot-avatar">
                        <i class="fas fa-robot"></i>
                    </div>
                    <h1 class="chatbot-title">ConnectSphere Assistant</h1>
                </div>
                <div class="chatbot-header-right">
                    <button class="chatbot-header-button" title="Clear chat">
                        <i class="fas fa-trash-alt"></i>
                    </button>
                    <button class="chatbot-header-button" title="Settings">
                        <i class="fas fa-cog"></i>
                    </button>
                </div>
            </div>
            
            <!-- Improved Chat Response Area -->
            <div id="chatbot-response-area">
                <!-- Welcome message -->
                <div class="message bot">
                    <div class="chatbot-info-panel">
                        <div class="info-icon">
                            <i class="fas fa-info-circle"></i>
                        </div>
                        <div class="info-content">
                            <h4>Welcome to ConnectSphere Assistant!</h4>
                            <p>I can help you find events, get ticket information, learn about speakers, and more.</p>
                        </div>
                    </div>
                    <p>Bonjour! Comment puis-je vous aider avec ConnectSphere aujourd'hui?</p>
                    <div class="message-time">Just now</div>
                    
                    <!-- Suggested questions -->
                    <div class="suggestions-container">
                        <div class="suggestion-chip"><i class="fas fa-calendar-alt"></i> Upcoming events</div>
                        <div class="suggestion-chip"><i class="fas fa-ticket-alt"></i> Ticket prices</div>
                        <div class="suggestion-chip"><i class="fas fa-user-tie"></i> Featured speakers</div>
                        <div class="suggestion-chip"><i class="fas fa-map-marker-alt"></i> Event venues</div>
                    </div>
                </div>
            </div>
            
            <!-- Loading indicator with icon -->
            <div id="loading-indicator" class="loading-indicator" style="display: none;">
                <i class="fas fa-circle-notch"></i>
                <span>Thinking...</span>
            </div>
            
            <!-- Error message area -->
            <div id="error-message-area" class="error-message"></div>
            
            <!-- Enhanced Input Area -->
            <div class="chatbot-input-container">
                <form id="chatbot-form" class="chatbot-input-area">
                    <div class="input-icon">
                        <i class="fas fa-microphone"></i>
                    </div>
                    <input type="text" id="chatbot-input" placeholder="Ask me anything about ConnectSphere..." required autocomplete="off">
                    <div class="input-icon">
                        <i class="far fa-smile"></i>
                    </div>
                    <button type="submit" id="chatbot-send-btn">
                        <i class="fas fa-paper-plane"></i>
                    </button>
                </form>
            </div>
        </div>
    </main>

    <!-- Footer from home page - UNCHANGED -->
    <footer class="site-footer">
        <div class="footer-content container">
            <div class="footer-column">
                <h4>ConnectSphere</h4>
                <p>The ultimate platform for planning, promoting, and attending successful events. Join our community!</p>
            </div>
            <div class="footer-column">
                <h4>Quick Links</h4>
                <ul>
                    <li><a href="{{ path('app_home') }}">Home</a></li>
                    <li><a href="{{ path('app_events') }}">Events</a></li>
                    <li><a href="{{ path('app_chatbot') }}">Chatbot</a></li>
                    <li><a href="#">Blog</a></li>
                    <li><a href="#">Contact</a></li>
                    <li><a href="#">Terms of Service</a></li>
                </ul>
            </div>
            <div class="footer-column footer-contact">
                <h4>Contact Us</h4>
                <p><i class="fas fa-phone"></i><a href="tel:+21692160411">+216 92 160 411</a></p>
                <p><i class="fas fa-envelope"></i><a href="mailto:ConnecSphere@gmail.com">ConnecSphere@gmail.com</a></p>
            </div>
            <div class="footer-column">
                <h4>Follow Us</h4>
                <div class="footer-social-icons">
                    <a href="#" aria-label="Facebook"><i class="fab fa-facebook-square"></i></a>
                    <a href="#" aria-label="Instagram"><i class="fab fa-instagram-square"></i></a>
                    <a href="#" aria-label="LinkedIn"><i class="fab fa-linkedin"></i></a>
                    <a href="#" aria-label="Twitter"><i class="fab fa-twitter-square"></i></a>
                </div>
            </div>
        </div>
        <div class="footer-bottom">© {{ "now"|date("Y") }} ConnectSphere. All rights reserved.</div>
    </footer>
</div>
{% endblock %}

{% block javascripts %}
    <script>
        document.addEventListener('DOMContentLoaded', () => {
            console.log("DOM Loaded. Finding elements...");

            // Core elements
            const form = document.getElementById('chatbot-form');
            const inputField = document.getElementById('chatbot-input');
            const sendButton = document.getElementById('chatbot-send-btn');
            const responseArea = document.getElementById('chatbot-response-area');
            const loadingIndicator = document.getElementById('loading-indicator');
            const errorArea = document.getElementById('error-message-area');
            
            // New elements
            const clearChatButton = document.querySelector('.chatbot-header-button[title="Clear chat"]');
            const suggestionChips = document.querySelectorAll('.suggestion-chip');
            const emojiButton = document.querySelector('.input-icon .fa-smile');
            const micButton = document.querySelector('.input-icon .fa-microphone');

            // Element validation with improved logging
            const elements = {
                'chatbot-form': form,
                'chatbot-input': inputField,
                'chatbot-send-btn': sendButton,
                'chatbot-response-area': responseArea,
                'loading-indicator': loadingIndicator,
                'error-message-area': errorArea
            };

            let allElementsFound = true;
            for (const [id, element] of Object.entries(elements)) {
                if (!element) {
                    console.error(`ERROR: Could not find element with ID '${id}'`);
                    allElementsFound = false;
                } else {
                    console.log(`Element '${id}' found:`, element);
                }
            }

            if (allElementsFound) {
                console.log("All required elements found. Setting up event listeners...");
                
                // Format current time for message timestamps
                function getCurrentTime() {
                    const now = new Date();
                    return now.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });
                }
                
                // Add user message to chat
                function addUserMessage(message) {
                    const messageDiv = document.createElement('div');
                    messageDiv.classList.add('message', 'user');
                    messageDiv.innerHTML = `
                        <p>${message}</p>
                        <div class="message-time">${getCurrentTime()}</div>
                    `;
                    responseArea.appendChild(messageDiv);
                    scrollToBottom();
                }
                
                // Create typing indicator
                function showTypingIndicator() {
                    const typingDiv = document.createElement('div');
                    typingDiv.classList.add('bot-typing');
                    typingDiv.id = 'typing-indicator';
                    
                    for (let i = 0; i < 3; i++) {
                        const dot = document.createElement('div');
                        dot.classList.add('typing-dot');
                        typingDiv.appendChild(dot);
                    }
                    
                    responseArea.appendChild(typingDiv);
                    scrollToBottom();
                }
                
                // Remove typing indicator
                function removeTypingIndicator() {
                    const typingIndicator = document.getElementById('typing-indicator');
                    if (typingIndicator) {
                        typingIndicator.remove();
                    }
                }
                
                // Scroll chat to bottom
                function scrollToBottom() {
                    responseArea.scrollTop = responseArea.scrollHeight;
                }
                
                // Show error with animation
                function showError(message) {
                    errorArea.textContent = `⚠️ ${message}`;
                    errorArea.style.display = 'block';
                    // Reset animation to trigger it again
                    errorArea.style.animation = 'none';
                    errorArea.offsetHeight; // Trigger reflow
                    errorArea.style.animation = 'shake 0.5s';
                    scrollToBottom();
                    console.log("Displayed error message:", message);
                }
                
                // Submit handler with enhanced UI feedback
                form.addEventListener('submit', async (event) => {
                    console.log("Submit event listener triggered!");
                    event.preventDefault();
                    
                    const userPrompt = inputField.value.trim();
                    console.log("User prompt captured:", userPrompt);
                    if (!userPrompt) {
                        console.log("Prompt is empty, exiting listener.");
                        return;
                    }
                    
                    // Clear input and disable elements
                    inputField.value = '';
                    sendButton.disabled = true;
                    inputField.disabled = true;
                    errorArea.style.display = 'none';
                    
                    // Add user message to chat
                    addUserMessage(userPrompt);
                    
                    // Show typing indicator instead of loading indicator
                    showTypingIndicator();
                    
                    try {
                        console.log("Sending fetch request to /api/chatbot/ask...");
                        const response = await fetch("{{ path('api_chatbot_ask') }}", {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json',
                                'Accept': 'application/x-ndjson'
                            },
                            body: JSON.stringify({ prompt: userPrompt })
                        });
                        
                        console.log("Fetch response received. Status:", response.status, "Ok:", response.ok);
                        
                        if (!response.ok) {
                            let errorMsg = `Server Error: ${response.status} ${response.statusText}`;
                            try {
                                const errorData = await response.json();
                                errorMsg = errorData.error || errorMsg;
                                console.log("Parsed error response from server:", errorData);
                            } catch(e) {
                                console.log("Could not parse error response as JSON.");
                            }
                            throw new Error(errorMsg);
                        }
                        
                        if (!response.body) {
                            throw new Error('Response body is missing, cannot read stream.');
                        }
                        
                        console.log("Starting to process response stream...");
                        const reader = response.body.getReader();
                        const decoder = new TextDecoder();
                        let buffer = '';
                        
                        // Remove typing indicator before showing actual response
                        removeTypingIndicator();
                        
                        let currentBotMessageDiv = document.createElement('div');
                        currentBotMessageDiv.classList.add('message', 'bot');
                        responseArea.appendChild(currentBotMessageDiv);
                        
                        while (true) {
                            const { value, done } = await reader.read();
                            if (done) {
                                console.log('Response stream finished.');
                                // Add timestamp to the bot message
                                const timeDiv = document.createElement('div');
                                timeDiv.classList.add('message-time');
                                timeDiv.textContent = getCurrentTime();
                                currentBotMessageDiv.appendChild(timeDiv);
                                break;
                            }
                            
                            buffer += decoder.decode(value, { stream: true });
                            let lines = buffer.split('\n');
                            buffer = lines.pop();
                            
                            lines.forEach(line => {
                                if (line.trim() === '') return;
                                console.log("Processing received line:", line);
                                try {
                                    const data = JSON.parse(line);
                                    if (data.html) {
                                        currentBotMessageDiv.innerHTML += data.html;
                                        scrollToBottom();
                                    } else if (data.error) {
                                        console.error('Received error from backend stream:', data.error);
                                        showError(data.error);
                                    } else if (data.done) {
                                        console.log('Received done signal from backend stream.');
                                    }
                                } catch (e) {
                                    console.error('Error parsing JSON line:', e, 'Received line:', line);
                                }
                            });
                        }
                        
                    } catch (error) {
                        console.error('Error during fetch or streaming:', error);
                        removeTypingIndicator();
                        showError(error.message || 'An unexpected error occurred.');
                    } finally {
                        console.log("Fetch process finished (finally block).");
                        loadingIndicator.style.display = 'none';
                        sendButton.disabled = false;
                        inputField.disabled = false;
                        inputField.focus();
                        console.log("UI Reset: Button/input enabled, loading hidden.");
                    }
                });
                
                // Event listener for suggestion chips
                suggestionChips.forEach(chip => {
                    chip.addEventListener('click', () => {
                        const chipText = chip.textContent.trim();
                        inputField.value = chipText;
                        // Trigger the submit event
                        const submitEvent = new Event('submit');
                        form.dispatchEvent(submitEvent);
                    });
                });
                
                // Event listener for clear chat button
                if (clearChatButton) {
                    clearChatButton.addEventListener('click', () => {
                        // Keep only the welcome message (first child)
                        while (responseArea.childNodes.length > 1) {
                            responseArea.removeChild(responseArea.lastChild);
                        }
                    });
                }
                
                // Emoji button (just for show in this demo)
                if (emojiButton) {
                    emojiButton.addEventListener('click', () => {
                        alert('Emoji picker would open here!');
                    });
                }
                
                // Microphone button (just for show in this demo)
                if (micButton) {
                    micButton.addEventListener('click', () => {
                        alert('Voice input would activate here!');
                    });
                }
                
                // Focus the input field on page load
                inputField.focus();
                
            } else {
                console.error("ERROR: One or more required elements were not found. Cannot initialize chatbot functionality.");
            }
        });
    </script>
{% endblock %}
</file>

<file path="templates/events/events.html.twig">
{# templates/events/events.html.twig #}
{% block stylesheets %}
<link href="https://fonts.googleapis.com/css2?family=Poppins:wght@400;500;600;700&display=swap" rel="stylesheet">
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
<link rel="stylesheet" href="{{ asset('css/events_page.css') }}">
{% endblock %}
{% block body %}
<!-- Header from home page -->
<header class="header">
    <nav class="nav-container container">
        <div class="logo">
            <a href="{{ path('app_home') }}" style="display:flex;align-items:center;text-decoration:none;">
                <img src="{{ asset('images/logo.png') }}" alt="Logo" class="logo-img" style="margin-right:10px;">
                <span style="font-weight:bold;font-size:1.5rem;color:black;">ConnectSphere</span>
            </a>
        </div>
        <div class="nav-links">
            <a href="{{ path('app_home') }}" class="nav-link">Home</a>
            <a href="{{ path('app_events') }}" class="nav-link">Events</a>
            <a href="{{ path('app_chatbot') }}" class="nav-link">Chatbot</a>
            <a href="#" class="nav-link">Speakers</a>
            <a href="#" class="nav-link">Tickets</a>
            <a href="#" class="nav-link">Blogs</a>
            <a href="#" class="contact-btn nav-link">Contact</a>
        </div>
    </nav>
</header>
<!-- Main Events Content -->
<div class="event-list-page">
    {# --- Top Controls --- #}
    <div class="events-controls-header">
        <h1 class="page-title">Events</h1>
        <form action="{{ path('app_events') }}" method="GET" class="search-filter-form">
            <input type="text" id="eventSearchField" name="search" class="form-control" placeholder="Search events..." value="{{ app.request.query.get('search') }}">
            {% if app.request.query.get('category') %}
                 <input type="hidden" name="category" value="{{ app.request.query.get('category') }}">
            {% endif %}
            <button type="submit" class="btn btn-search">Search</button>
        </form>
        <div class="new-event-action">
            <a href="{{ path('app_event_add_page') }}" class="btn btn-add-event-page">New Event</a>
        </div>
    </div>
<div class="category-filters-section">
    <div class="category-filters-container">
        <ul class="category-filters-list">
            <li class="category-pill{% if not app.request.query.get('category') %} active{% endif %}">
                <a href="{{ path('app_events', {'search': app.request.query.get('search')}) }}">
                    <i class="fas fa-layer-group"></i> All Categories
                </a>
            </li>
            {% if categories is defined and categories is not empty %}
                {% for category in categories %}
                    <li class="category-pill{% if app.request.query.get('category') == category.id %} active{% endif %}">
                        <a href="{{ path('app_events', {'search': app.request.query.get('search'), 'category': category.id}) }}">
                            {% if category.name == 'Technology' %}
                                <i class="fas fa-laptop-code"></i>
                            {% elseif category.name == 'Business' %}
                                <i class="fas fa-briefcase"></i>
                            {% elseif category.name == 'Art' %}
                                <i class="fas fa-palette"></i>
                            {% elseif category.name == 'Music' %}
                                <i class="fas fa-music"></i>
                            {% elseif category.name == 'Food' %}
                                <i class="fas fa-utensils"></i>
                            {% elseif category.name == 'Sports' %}
                                <i class="fas fa-running"></i>
                            {% elseif category.name == 'Education' %}
                                <i class="fas fa-graduation-cap"></i>
                            {% else %}
                                <i class="fas fa-calendar-alt"></i>
                            {% endif %}
                            {{ category.name }}
                        </a>
                    </li>
                {% endfor %}
            {% endif %}
        </ul>
    </div>
</div>

{# --- Flash Messages --- #}
<div id="flash-message-container" style="margin-top: 15px;">
    {% for label, messages in app.flashes %}
        <div class="alert alert-{{ label }} alert-dismissible fade show" role="alert">
            {% for message in messages %}{{ message|raw }}{% endfor %}
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
    {% endfor %}
</div>

{# --- Event Grid --- #}
<div class="row event-grid-row">
    {% if events is defined and events is not empty %}
        {% for event in events %}
            <div class="event-column">
                <div class="card h-100 event-display-card">
                    {# --- Image Card --- #}
                    {% set imageSrc = asset('images/default_event.png') %}
                    {% if event.image is not null and event.image is not empty %}
                        {% if event.image starts with 'data:' %} {% set imageSrc = event.image %}
                        {% else %}
                            {% set base64Data = event.image %} {% set mimeType = 'image/jpeg' %}
                            {% if base64Data starts with 'iVBO' %} {% set mimeType = 'image/png' %}
                            {% elseif base64Data starts with '/9j/' %} {% set mimeType = 'image/jpeg' %}
                            {% elseif base64Data starts with 'R0lG' %} {% set mimeType = 'image/gif' %}
                            {% elseif base64Data starts with 'PHN2Zy' %} {% set mimeType = 'image/svg+xml' %}
                            {% endif %}
                            {% set imageSrc = 'data:' ~ mimeType ~ ';base64,' ~ base64Data %}
                        {% endif %}
                    {% endif %}
                    <div class="card-img-wrapper"><img src="{{ imageSrc }}" class="card-img-top" alt="{{ event.name|default('Event Image') }}"></div>
                    {# --- Card Body --- #}
                    <div class="card-body">
                         <h5 class="card-title">{{ event.name }}</h5>
                        <div class="event-text-details">
                            {{ event.description|slice(0, 80)|striptags ~ (event.description|length > 80 ? '...' : '') }}<br>
                            <small>
                                {% if event.startTime %}{{ event.startTime|date('d/m/Y') }}{% endif %}
                                {% if event.endTime and event.startTime|date('Y-m-d') != event.endTime|date('Y-m-d') %} - {{ event.endTime|date('d/m/Y') }}{% endif %}<br>
                                {{ event.location ?? 'N/A' }} | Cat: {{ event.categoryId.name ?? 'N/A' }}
                            </small>
                        </div>
                        <div class="event-card-actions">
                            <button type="button" class="btn btn-view-details view-details-btn" data-modal-target="#event-modal-{{ event.id }}">Details</button>
                            <a href="#" class="btn btn-participate">Join</a>
                        </div>
                    </div>
                </div>
            </div>

            {# --- Event Modal --- #}
            <div class="event-modal-overlay" id="event-modal-{{ event.id }}">
                <div class="event-modal-content">
                     <button type="button" class="event-modal-close-x close-modal-btn">×</button>
                    <div class="event-modal-body">
                         <div class="event-modal-image-wrapper"><img src="{{ imageSrc }}" class="event-modal-image" alt="{{ event.name }}"></div>
                         <h3 class="event-modal-title">{{ event.name }}</h3>
                         <p class="event-modal-description">{{ event.description|striptags }}</p>
                         <div class="event-modal-details">
                             <strong>Date:</strong> {% if event.startTime %}{{ event.startTime|date('d/m/Y H:i') }}{% else %}N/A{% endif %} - {% if event.endTime %}{{ event.endTime|date('d/m/Y H:i') }}{% else %}N/A{% endif %}<br>
                             <strong>Location:</strong> {{ event.location ?? 'N/A' }}<br>
                             <strong>Category:</strong> {{ event.categoryId.name ?? 'N/A' }}<br>
                             <strong>Points:</strong> {{ event.points ?? '0' }}
                         </div>
                    </div>
                     <div class="event-modal-footer">
                         <div class="share-icons">
                             {% set event_url = url('app_events', {'search': event.name}) %}
                             {% set share_text = "Check out this event: " ~ event.name ~ " on ConnectSphere! " ~ event_url %}
                             <a href="https://www.facebook.com/sharer/sharer.php?u={{ event_url|url_encode }}" target="_blank" rel="noopener noreferrer" title="Share on Facebook" class="facebook-share"><i class="fab fa-facebook-square"></i></a>
                             <a href="https://api.whatsapp.com/send?text={{ share_text|url_encode }}" target="_blank" rel="noopener noreferrer" title="Share on WhatsApp" class="whatsapp-share"><i class="fab fa-whatsapp-square"></i></a>
                             <a href="#" class="copy-link" data-link="{{ event_url }}" title="Copy Link"><i class="fas fa-copy"></i></a>
                         </div>
                         <button type="button" class="btn btn-modal-close close-modal-btn">Close</button>
                    </div>
                    <div class="copy-link-feedback">Link Copied!</div>
                </div>
            </div>
        {% endfor %}
    {% else %}
         <div class="col-12">
            <div class="no-events-message">
               No events match your current filter. <a href="{{ path('app_events') }}">Clear filters?</a> or <a href="{{ path('app_event_add_page') }}" class="{% if app.request.attributes.get('_route') != 'app_event_add_page' %}open-add-event-trigger{% endif %}">Create a new event?</a>
            </div>
        </div>
    {% endif %}
</div>

</div>
<!-- Footer from home page -->
<footer class="site-footer">
    <div class="footer-content container">
        <div class="footer-column">
            <h4>ConnectSphere</h4>
            <p>The ultimate platform for planning, promoting, and attending successful events. Join our community!</p>
        </div>
        <div class="footer-column">
            <h4>Quick Links</h4>
            <ul>
                <li><a href="{{ path('app_home') }}">Home</a></li>
                <li><a href="{{ path('app_events') }}">Events</a></li>
                <li><a href="#">About Us</a></li>
                <li><a href="#">Blog</a></li>
                <li><a href="#">Contact</a></li>
                <li><a href="#">Terms of Service</a></li>
            </ul>
        </div>
        <div class="footer-column footer-contact">
            <h4>Contact Us</h4>
            <p><i class="fas fa-phone"></i><a href="tel:+21692160411">+216 92 160 411</a></p>
            <p><i class="fas fa-envelope"></i><a href="mailto:ConnecSphere@gmail.com">ConnecSphere@gmail.com</a></p>
        </div>
        <div class="footer-column">
            <h4>Follow Us</h4>
            <div class="footer-social-icons">
                <a href="#" aria-label="Facebook"><i class="fab fa-facebook-square"></i></a>
                <a href="#" aria-label="Instagram"><i class="fab fa-instagram-square"></i></a>
                <a href="#" aria-label="LinkedIn"><i class="fab fa-linkedin"></i></a>
                <a href="#" aria-label="Twitter"><i class="fab fa-twitter-square"></i></a>
            </div>
        </div>
    </div>
    <div class="footer-bottom">© {{ "now"|date("Y") }} ConnectSphere. All rights reserved.</div>
</footer>
{% endblock %}
{% block javascripts %}
<script>
document.addEventListener('DOMContentLoaded', function() {
console.log("JS Events List: Initializing modal listeners.");
// Modal handling
        const viewDetailButtons = document.querySelectorAll('.view-details-btn');
        viewDetailButtons.forEach(button => {
            button.addEventListener('click', function() {
                const targetModalId = this.getAttribute('data-modal-target');
                if (targetModalId) {
                    const targetModal = document.querySelector(targetModalId);
                    if (targetModal) targetModal.classList.add('active');
                }
            });
        });

        const closeDetailButtons = document.querySelectorAll('.event-modal-overlay .close-modal-btn, .event-modal-overlay .event-modal-close-x');
        closeDetailButtons.forEach(button => {
            button.addEventListener('click', function() {
                this.closest('.event-modal-overlay')?.classList.remove('active');
            });
        });

        const detailModalOverlays = document.querySelectorAll('.event-modal-overlay');
        detailModalOverlays.forEach(overlay => {
            overlay.addEventListener('click', function(event) {
                if (event.target === overlay) {
                    overlay.classList.remove('active');
                }
            });
        });

        // Link copying
        document.querySelectorAll('.copy-link').forEach(button => {
             button.addEventListener('click', function(event) {
                 event.preventDefault();
                 const linkToCopy = this.getAttribute('data-link');
                 const feedbackElement = this.closest('.event-modal-content')?.querySelector('.copy-link-feedback');

                 if (linkToCopy && navigator.clipboard) {
                     navigator.clipboard.writeText(linkToCopy).then(() => {
                         console.log('Link copied:', linkToCopy);
                         if(feedbackElement) {
                             feedbackElement.style.display = 'block';
                             setTimeout(() => { feedbackElement.style.display = 'none'; }, 1500);
                         }
                     }).catch(err => {
                         console.error('Failed to copy link: ', err);
                         showCopyFallback(linkToCopy, feedbackElement);
                     });
                 } else if (linkToCopy) {
                      showCopyFallback(linkToCopy, feedbackElement);
                 }
             });
        });

        function showCopyFallback(textToCopy, feedbackElement) {
            const textArea = document.createElement("textarea");
            textArea.value = textToCopy;
            textArea.style.position = "fixed"; textArea.style.left = "-9999px";
            document.body.appendChild(textArea);
            textArea.focus(); textArea.select();
            try {
                const successful = document.execCommand('copy');
                if (successful) {
                    console.log('Fallback copy successful');
                    if(feedbackElement) {
                         feedbackElement.style.display = 'block';
                         setTimeout(() => { feedbackElement.style.display = 'none'; }, 1500);
                     }
                } else {
                    console.error('Fallback copy command failed');
                    alert('Could not copy link. Please copy it manually.');
                }
            } catch (err) {
                console.error('Fallback copy exception:', err);
                alert('Could not copy link. Please copy it manually.');
            }
            document.body.removeChild(textArea);
        }

        // Flash messages
        const flashMessages = document.querySelectorAll('#flash-message-container .alert');
         flashMessages.forEach(function(flashMessage) {
             setTimeout(function() {
                 if (typeof bootstrap !== 'undefined' && bootstrap.Alert && bootstrap.Alert.getInstance(flashMessage)) {
                     bootstrap.Alert.getInstance(flashMessage).close();
                 } else {
                      flashMessage.style.transition = 'opacity 0.5s ease-out'; flashMessage.style.opacity = '0';
                      setTimeout(() => flashMessage.remove(), 500);
                 }
             }, 7000);
         });

        console.log("JS Events List: All listeners initialized.");
    });
</script>
{% endblock %}
{# --- End of File --- #}
</file>

<file path="templates/explore/explore.html.twig">
{% extends 'base.html.twig' %}

{% block title %}Hello ExploreController!{% endblock %}

{% block body %}
<style>
    .example-wrapper { margin: 1em auto; max-width: 800px; width: 95%; font: 18px/1.5 sans-serif; }
    .example-wrapper code { background: #F5F5F5; padding: 2px 6px; }
</style>

<div class="example-wrapper">
    <h1>Hello {{ controller_name }}! ✅</h1>

    This friendly message is coming from:
    <ul>
        <li>Your controller at <code><a href="{{ 'C:/Users/user/PiSymfony/src/Controller/ExploreController.php'|file_link(0) }}">src/Controller/ExploreController.php</a></code></li>
        <li>Your template at <code><a href="{{ 'C:/Users/user/PiSymfony/templates/explore/index.html.twig'|file_link(0) }}">templates/explore/index.html.twig</a></code></li>
    </ul>
</div>
{% endblock %}
</file>

<file path="templates/group/group.html.twig">
{% extends 'base.html.twig' %}

{% block title %}Hello GroupController!{% endblock %}

{% block body %}
<style>
    .example-wrapper { margin: 1em auto; max-width: 800px; width: 95%; font: 18px/1.5 sans-serif; }
    .example-wrapper code { background: #F5F5F5; padding: 2px 6px; }
</style>

<div class="example-wrapper">
    <h1>Hello {{ controller_name }}! ✅</h1>

    This friendly message is coming from:
    <ul>
        <li>Your controller at <code><a href="{{ 'C:/Users/user/PiSymfony/src/Controller/GroupController.php'|file_link(0) }}">src/Controller/GroupController.php</a></code></li>
        <li>Your template at <code><a href="{{ 'C:/Users/user/PiSymfony/templates/group/index.html.twig'|file_link(0) }}">templates/group/index.html.twig</a></code></li>
    </ul>
</div>
{% endblock %}
</file>

<file path="templates/profile/profile.html.twig">
{% extends 'base.html.twig' %}

{% block title %}Hello ProfileController!{% endblock %}

{% block body %}
<style>
    .example-wrapper { margin: 1em auto; max-width: 800px; width: 95%; font: 18px/1.5 sans-serif; }
    .example-wrapper code { background: #F5F5F5; padding: 2px 6px; }
</style>

<div class="example-wrapper">
    <h1>Hello {{ controller_name }}! ✅</h1>

    This friendly message is coming from:
    <ul>
        <li>Your controller at <code><a href="{{ 'C:/Users/user/PiSymfony/src/Controller/ProfileController.php'|file_link(0) }}">src/Controller/ProfileController.php</a></code></li>
        <li>Your template at <code><a href="{{ 'C:/Users/user/PiSymfony/templates/profile/index.html.twig'|file_link(0) }}">templates/profile/index.html.twig</a></code></li>
    </ul>
</div>
{% endblock %}
</file>

<file path="templates/social/social.html.twig">
{% extends 'base.html.twig' %}

{% block title %}Hello SocialController!{% endblock %}

{% block body %}
<style>
    .example-wrapper { margin: 1em auto; max-width: 800px; width: 95%; font: 18px/1.5 sans-serif; }
    .example-wrapper code { background: #F5F5F5; padding: 2px 6px; }
</style>

<div class="example-wrapper">
    <h1>Hello {{ controller_name }}! ✅</h1>

    This friendly message is coming from:
    <ul>
        <li>Your controller at <code><a href="{{ 'C:/Users/user/PiSymfony/src/Controller/SocialController.php'|file_link(0) }}">src/Controller/SocialController.php</a></code></li>
        <li>Your template at <code><a href="{{ 'C:/Users/user/PiSymfony/templates/social/index.html.twig'|file_link(0) }}">templates/social/index.html.twig</a></code></li>
    </ul>
</div>
{% endblock %}
</file>

<file path="tests/bootstrap.php">
<?php

use Symfony\Component\Dotenv\Dotenv;

require dirname(__DIR__).'/vendor/autoload.php';

if (method_exists(Dotenv::class, 'bootEnv')) {
    (new Dotenv())->bootEnv(dirname(__DIR__).'/.env');
}
</file>

<file path="tests/controller/CreateJobControllerTest.php">
<?php
// // tests/Controller/CreateJobControllerTest.php
// namespace App\Tests\Controller;

// use App\Entity\Jobs;
// use Doctrine\ORM\Tools\SchemaTool;
// use Symfony\Bundle\FrameworkBundle\Test\WebTestCase;

// class CreateJobControllerTest extends WebTestCase
// {
//     public function testCreateJobFormSubmission(): void
//     {
//         // 1) Create client (boots kernel once)
//         $client = static::createClient();

//         // 2) Recreate schema on the in-memory DB
//         $em = $client->getContainer()->get('doctrine')->getManager();
//         $metadata = $em->getMetadataFactory()->getAllMetadata();
//         if (!empty($metadata)) {
//             $schemaTool = new SchemaTool($em);
//             // drop & recreate (optional drop for truly clean slate)
//             $schemaTool->dropDatabase(); 
//             $schemaTool->createSchema($metadata);
//         }

//         // 3) Request the form page
//         $crawler = $client->request('GET', '/create/job');
//         $this->assertResponseIsSuccessful();

//         // 4) Fill and submit
//         $form = $crawler->selectButton('Submit')->form([
//             'create_job_form[jobTitle]'            => 'Backend Developer',
//             'create_job_form[eventTitle]'          => 'Tech Conference 2025',
//             'create_job_form[jobLocation]'         => 'Tunis, TN',
//             'create_job_form[employmentType]'      => 'Full-time',
//             'create_job_form[applicationDeadLine]' => '2025-06-30',
//             'create_job_form[minSalary]'           => '1000',
//             'create_job_form[maxSalary]'           => '2000',
//             'create_job_form[currency]'            => 'TND',
//             'create_job_form[jobDescreption]'      => 'Develop and maintain APIs.',
//             'create_job_form[recruiterName]'       => 'Acme HR',
//             'create_job_form[recruiterEmail]'      => 'hr@acme.com',
//         ]);
//         $client->submit($form);

//         // 5) Assert redirect
//         $this->assertResponseRedirects('/create/job');

//         // 6) Follow and check form exists again
//         $client->followRedirect();
//         $this->assertSelectorExists('form');

//         // 7) Verify persistence
//         $jobs = $em->getRepository(Jobs::class)
//                    ->findBy(['jobTitle' => 'Backend Developer']);
//         $this->assertCount(1, $jobs);
//     }
// }

// tests/Controller/CreateJobControllerTest.php
namespace App\Tests\Controller;

use App\Entity\Jobs;
use Doctrine\ORM\Tools\SchemaTool;
use Symfony\Bundle\FrameworkBundle\Test\WebTestCase;

class CreateJobControllerTest extends WebTestCase
{
    /**
     * This test should succeed: it creates a job and asserts it was persisted.
     */
    public function testCreateJobFormSubmissionSuccess(): void
    {
        $client = static::createClient();

        // Recreate schema on the in-memory DB
        $em = $client->getContainer()->get('doctrine')->getManager();
        $metadata = $em->getMetadataFactory()->getAllMetadata();
        if (!empty($metadata)) {
            $schemaTool = new SchemaTool($em);
            $schemaTool->dropDatabase();
            $schemaTool->createSchema($metadata);
        }

        // Request the form page
        $crawler = $client->request('GET', '/create/job');
        $this->assertResponseIsSuccessful();

        // Fill and submit the form
        $form = $crawler->selectButton('Submit')->form([
            'create_job_form[jobTitle]'            => 'Backend Developer',
            'create_job_form[eventTitle]'          => 'Tech Conference 2025',
            'create_job_form[jobLocation]'         => 'Tunis, TN',
            'create_job_form[employmentType]'      => 'Full-time',
            'create_job_form[applicationDeadLine]' => '2025-06-30',
            'create_job_form[minSalary]'           => '1000',
            'create_job_form[maxSalary]'           => '2000',
            'create_job_form[currency]'            => 'TND',
            'create_job_form[jobDescreption]'      => 'Develop and maintain APIs.',
            'create_job_form[recruiterName]'       => 'Acme HR',
            'create_job_form[recruiterEmail]'      => 'hr@acme.com',
        ]);
        $client->submit($form);

        // Assert redirect
        $this->assertResponseRedirects('/create/job');
        $client->followRedirect();
        $this->assertSelectorExists('form');

        // Verify persistence
        $jobs = $em->getRepository(Jobs::class)
                   ->findBy(['jobTitle' => 'Backend Developer']);
        $this->assertCount(1, $jobs, 'Expected exactly 1 job with title "Backend Developer"');
    }

    /**
     * This test is intentionally set to fail: it asserts zero jobs persisted.
     */
    public function testCreateJobFormSubmissionFailure(): void
    {
        $client = static::createClient();

        // Recreate schema
        $em = $client->getContainer()->get('doctrine')->getManager();
        $metadata = $em->getMetadataFactory()->getAllMetadata();
        if (!empty($metadata)) {
            $schemaTool = new SchemaTool($em);
            $schemaTool->dropDatabase();
            $schemaTool->createSchema($metadata);
        }

        // Request and submit the same form
        $crawler = $client->request('GET', '/create/job');
        $form = $crawler->selectButton('Submit')->form([
            'create_job_form[jobTitle]'            => 'QA Engineer',
            'create_job_form[eventTitle]'          => 'Testing Summit',
            'create_job_form[jobLocation]'         => 'Remote',
            'create_job_form[employmentType]'      => 'Contract',
            'create_job_form[applicationDeadLine]' => '2025-07-15',
            'create_job_form[minSalary]'           => '1500',
            'create_job_form[maxSalary]'           => '2500',
            'create_job_form[currency]'            => 'USD',
            'create_job_form[jobDescreption]'      => 'Write test plans.',
            'create_job_form[recruiterName]'       => 'QA Corp',
            'create_job_form[recruiterEmail]'      => 'qa@corp.com',
        ]);
        $client->submit($form);

        // Follow redirect
        $client->followRedirect();

        // Intentionally assert zero jobs to cause a failure
        $jobs = $em->getRepository(Jobs::class)
                   ->findBy(['jobTitle' => 'QA Engineer']);
        $this->assertCount(0, $jobs, 'This assertion is expected to fail because one job should exist.');
    }
}
</file>

<file path="tests/Functional/RegistrationControllerTest.php">
<?php
// tests/Functional/RegistrationControllerTest.php
namespace App\Tests\Functional;

use App\Entity\Users;
use Doctrine\ORM\EntityManagerInterface;
use Doctrine\ORM\Tools\SchemaTool;
use PhpCsFixer\Fixer\NamespaceNotation\CleanNamespaceFixer;
use Symfony\Bundle\FrameworkBundle\Test\WebTestCase;

class RegistrationControllerTest extends WebTestCase
{
    private $client;
    private EntityManagerInterface $em;

    protected function setUp(): void
    {
        self::ensureKernelShutdown();
        $this->client = static::createClient();

        // Récupère l'EntityManager en mode test
        $this->em = $this->client->getContainer()
                                 ->get(EntityManagerInterface::class);

        // Reconstruit le schéma à blanc dans la DB en mémoire
        $metadata = $this->em->getMetadataFactory()->getAllMetadata();
        if (!empty($metadata)) {
            $tool = new SchemaTool($this->em);
            $tool->dropSchema($metadata);
            $tool->createSchema($metadata);
        }
    }

    public function testDisplayRegistrationForm(): void
    {
        $crawler = $this->client->request('GET', '/register');

        $this->assertResponseIsSuccessful();
        $this->assertCount(1, $crawler->filter('form'));
        $this->assertCount(1, $crawler->filter('input[name="registration_form[username]"]'));
        $this->assertCount(1, $crawler->filter('input[name="registration_form[email]"]'));
        $this->assertCount(1, $crawler->filter('input[name="registration_form[age]"]'));
        $this->assertCount(1, $crawler->filter('select[name="registration_form[gender]"]'));
        $this->assertCount(1, $crawler->filter('input[name="registration_form[plainPassword]"]'));
        $this->assertCount(1, $crawler->filter('input[name="registration_form[agreeTerms]"]'));
    }

    public function testSubmitRegistrationSuccess(): void
    {
        $crawler = $this->client->request('GET', '/register');

        // Remplit et soumet le formulaire
        $form = $crawler->filter('form')->form([
            'registration_form[username]'      => 'meyssem',
            'registration_form[email]'         => 'meyssem@example.com',
            'registration_form[age]'           => 25,
            'registration_form[gender]'        => 'male',
            'registration_form[plainPassword]' => 'password123',
            'registration_form[agreeTerms]'    => 1,
        ]);
        $this->client->submit($form);

        // Doit rediriger vers /login
        $this->assertResponseRedirects('/login');

        // Suit la redirection et vérifie le message de succès
        $crawler = $this->client->followRedirect();
        $this->assertStringContainsString('Registration successful', $this->client->getResponse()->getContent());

        // Vérifie la création en base
        $user = $this->em->getRepository(Users::class)
                        ->findOneBy(['email' => 'meyssem@example.com']);
        $this->assertNotNull($user, 'L’utilisateur doit exister en base');
        $this->assertSame('meyssem', $user->getUsername());
    }

    public function testSubmitRegistrationFailure(): void
    {
        $crawler = $this->client->request('GET', '/register');

        // Remplit le formulaire avec des données invalides
        $form = $crawler->filter('form')->form([
            'registration_form[username]'      => '',
            'registration_form[email]'         => 'not-an-email',
            'registration_form[age]'           => 16,
            'registration_form[plainPassword]' => '123',
            // omit gender and agreeTerms to simulate missing choice
        ]);
        $this->client->submit($form);

        // On reste sur /register
        $this->assertResponseStatusCodeSame(200);

        // Vérifie la présence des messages d'erreur dans le contenu
        $content = $this->client->getResponse()->getContent();
        $this->assertStringContainsString('Please enter a username', $content);
        $this->assertStringContainsString('You must be at least 18 years old', $content);
    }
}
</file>

<file path=".env.test">
# define your env variables for the test env here
KERNEL_CLASS='App\Kernel'
APP_SECRET='$ecretf0rt3st'
SYMFONY_DEPRECATIONS_HELPER=999999
PANTHER_APP_ENV=panther
PANTHER_ERROR_SCREENSHOT_DIR=./var/error-screenshots
DATABASE_URL="sqlite:///%kernel.project_dir%/var/data_test.db"
</file>

<file path="config/packages/security.yaml">
security:
    # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords
    password_hashers:
        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'
    # https://symfony.com/doc/current/security.html#loading-the-user-the-user-provider
    providers:
      app_user_provider:
            entity:
                class: App\Entity\Users
                property: email  # or username, depending on your login field
    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        main:
            lazy: true
           
            logout:
                path: app_logout
                target: app_login
       

            # activate different ways to authenticate
            # https://symfony.com/doc/current/security.html#the-firewall

            # https://symfony.com/doc/current/security/impersonating_user.html
            # switch_user: true

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
        # - { path: ^/admin, roles: ROLE_ADMIN }
        # - { path: ^/profile, roles: ROLE_USER }
         #- { path: ^/create/job, roles: PUBLIC_ACCESS }

when@test:
    security:
        password_hashers:
            # By default, password hashers are resource intensive and take time. This is
            # important to generate secure password hashes. In tests however, secure hashes
            # are not important, waste resources and increase test times. The following
            # reduces the work factor to the lowest possible values.
            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
                algorithm: auto
                App\Entity\Users: 'auto'  # Specific hasher for your User entity
                cost: 4 # Lowest possible value for bcrypt
                time_cost: 3 # Lowest possible value for argon
                memory_cost: 10 # Lowest possible value for argon
</file>

<file path="config/services.yaml">
# # This file is the entry point to configure your own services.
# # Files in the packages/ subdirectory configure your dependencies.

# # Put parameters here that don't need to change on each machine where the app is deployed
# # https://symfony.com/doc/current/best_practices.html#use-parameters-for-application-configuration
# parameters:
# cv_upload_dir: '%kernel.project_dir%/public/uploads/cvs'
# services:
#     # default configuration for services in *this* file
#     _defaults:
#         autowire: true      # Automatically injects dependencies in your services.
#         autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.

#     # makes classes in src/ available to be used as services
#     # this creates a service per class whose id is the fully-qualified class name
#     App\:
#         resource: '../src/'
#         exclude:
#             - '../src/DependencyInjection/'
#             - '../src/Entity/'
#             - '../src/Kernel.php'

#     # add more service definitions when explicit configuration is needed
#     # please note that last definitions always *replace* previous ones
# config/services.yaml
parameters:
    cv_upload_dir: '%kernel.project_dir%/public/uploads/cvs'

services:
    _defaults:
        autowire: true
        autoconfigure: true
        bind:
            string $ollamaApiUrl: '%env(OLLAMA_API_URL)%'
    App\:
        resource: '../src/'
        exclude:
            - '../src/DependencyInjection/'
            - '../src/Entity/'
            - '../src/Kernel.php'
</file>

<file path="phpunit.xml.dist">
<?xml version="1.0" encoding="UTF-8"?>

<!-- https://phpunit.readthedocs.io/en/latest/configuration.html -->
<phpunit xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:noNamespaceSchemaLocation="vendor/phpunit/phpunit/phpunit.xsd"
         backupGlobals="false"
         colors="true"
         bootstrap="tests/bootstrap.php"
         convertDeprecationsToExceptions="false"
>
    <php>
        <ini name="display_errors" value="1" />
        <ini name="error_reporting" value="-1" />
        <server name="APP_ENV" value="test" force="true" />
        <server name="SHELL_VERBOSITY" value="-1" />
        <server name="SYMFONY_PHPUNIT_REMOVE" value="" />
        <server name="SYMFONY_PHPUNIT_VERSION" value="9.5" />
        <env name="APP_ENV" value="test"/>
        <env name="DATABASE_URL" value="sqlite:///%kernel.project_dir%/var/data_test.db"/>
        <env name="DATABASE_URL" value="sqlite:///%kernel.project_dir%/var/test.db"/>
    </php>

    <testsuites>
        <testsuite name="Project Test Suite">
            <directory>tests</directory>
        </testsuite>
    </testsuites>

    <coverage processUncoveredFiles="true">
        <include>
            <directory suffix=".php">src</directory>
        </include>
    </coverage>

    <listeners>
        <listener class="Symfony\Bridge\PhpUnit\SymfonyTestsListener" />
    </listeners>

    <extensions>
    </extensions>
</phpunit>
</file>

<file path="public/css/root.css">
:root {
  --primary-bg: #F8F9FA;
  --secondary-bg: #FFFFFF;
  --accent: #FF6B6B;
  --text-primary: #212529;
  --text-muted: #6C757D;
  --font-family: 'Inter', sans-serif;
}

body {
  font-family: var(--font-family);
  margin: 0;
  padding: 0;
  box-sizing: border-box;
  background-color: var(--primary-bg);
}

.header {
  background-color: var(--secondary-bg);
  box-shadow: 0 2px 4px rgba(0,0,0,0.05);
  padding: 1rem 2rem;
}

.navbar {
  display: flex;
  justify-content: space-between;
  align-items: center;
}

.logo-img {
  height: 50px;
}

.search-location {
  display: flex;
  align-items: center;
  gap: 1rem;
}

.search-container {
  position: relative;
  width: 300px;
}

.search-input {
  width: 100%;
  padding: 0.75rem 1rem;
  padding-right: 3rem;
  border: 1px solid #dee2e6;
  border-radius: 50px;
}

.search-btn {
  position: absolute;
  top: 50%;
  right: 1rem;
  transform: translateY(-50%);
  background: none;
  border: none;
  color: var(--text-muted);
}

.location-selector {
  display: flex;
  align-items: center;
  gap: 0.5rem;
  font-size: 0.9rem;
  color: var(--text-muted);
}

.nav-links {
  display: flex;
  align-items: center;
  gap: 1rem;
}

.signup-btn {
  background-color: var(--accent);
  color: white;
  padding: 0.5rem 1rem;
  border-radius: 20px;
}

.hero {
  position: relative;
  overflow: hidden;
}

.carousel img {
  width: 100%;
  height: 450px;
  object-fit: cover;
  border-radius: 10px;
}

.carousel-content {
  position: absolute;
  top: 30%;
  left: 10%;
  transform: translateY(-30%);
  color: #000;
  text-align: left;
}

.banner-label {
  background-color: #C6F500;
  color: #000;
  display: inline-block;
  font-weight: bold;
  padding: 0.2rem 0.5rem;
  margin-bottom: 1rem;
}

.banner-title {
  font-size: 2.5rem;
  font-weight: 900;
  margin: 0;
}

.cta-btn {
  margin-top: 1.5rem;
  display: inline-block;
  background: #fff;
  padding: 0.75rem 1.5rem;
  border-radius: 30px;
  font-weight: 600;
  color: #000;
  text-decoration: none;
  box-shadow: 0 2px 8px rgba(0,0,0,0.2);
}

.carousel-controls {
  position: absolute;
  top: 50%;
  width: 100%;
  padding: 0 2rem;
  display: flex;
  justify-content: space-between;
  transform: translateY(-50%);
}

.prev-slide, .next-slide {
  background: #fff;
  border: none;
  border-radius: 50%;
  width: 40px;
  height: 40px;
  font-size: 1.2rem;
  color: #333;
  box-shadow: 0 2px 6px rgba(0,0,0,0.2);
}
.carousel-controls {
  position: absolute;
  top: 50%;
  width: 100%;
  display: flex;
  justify-content: space-between;
  transform: translateY(-50%);
  padding: 0 20px;
  box-sizing: border-box;
  z-index: 10; /* 🔥 SUPER IMPORTANT */
}

.carousel-controls button {
  background: rgba(0, 0, 0, 0.5);
  border: none;
  color: white;
  font-size: 2rem;
  cursor: pointer;
  padding: 10px;
  border-radius: 50%;
  transition: background 0.3s;
}

.carousel-controls button:hover {
  background: rgba(0, 0, 0, 0.7);
}


.categories {
  padding: 2rem 0;
  background-color: var(--secondary-bg);
}

.category-grid {
  display: flex;
  flex-wrap: wrap;
  justify-content: center;
  gap: 2rem;
}

.category-item {
  display: flex;
  flex-direction: column;
  align-items: center;
  font-size: 0.9rem;
  color: var(--text-primary);
}

.icon-circle {
  width: 60px;
  height: 60px;
  border: 1px solid #ddd;
  border-radius: 50%;
  display: flex;
  align-items: center;
  justify-content: center;
  margin-bottom: 0.5rem;
  color: var(--text-muted);
  font-size: 1.5rem;
}

.events {
  padding: 4rem;
}

.section-title {
  margin-bottom: 1.5rem;
  font-size: 1.5rem;
}

.event-list {
  display: grid;
  grid-template-columns: repeat(5, 1fr); /* 5 columns */
  gap: 20px;
  padding: 20px 0;
}

.event-card {
  background-color: #fff;
  border-radius: 10px;
  overflow: hidden;
  box-shadow: 0 2px 8px rgba(0,0,0,0.1);
  transition: transform 0.3s;
}

.event-card img {
  width: 100%;
  height: auto;
  display: block;
}

.event-card:hover {
  transform: translateY(-5px);
}
 

.event-card img {
  width: 100%;
  height: 160px;
  object-fit: cover;
}

.event-details {
  padding: 1rem;
}

.event-details h3 {
  font-size: 1.1rem;
  margin: 0 0 0.5rem;
}

.event-details p {
  font-size: 0.9rem;
  color: var(--text-muted);
  margin: 0 0 0.5rem;
}

.event-price {
  font-weight: bold;
  color: var(--accent);
}
.interests-section {
  background-color: #f8f6fc;
  padding: 3rem 1.5rem;
  border-top: 1px solid #e0e0e0;
  border-bottom: 1px solid #e0e0e0;
  margin-top: 3rem;
}

.interests-container {
  padding: 3rem 1.5rem;
  max-width: 1100px;
  margin: 0 auto;
  text-align: center;
}

.interests-header h2 {
  font-size: 1.8rem;
  font-weight: 700;
  color: #1c0f41;
}

.interests-header p {
  color: #555;
  font-size: 1rem;
  margin-top: 0.5rem;
  margin-bottom: 2rem;
}

.interests-list {
  display: flex;
  flex-wrap: wrap;
  justify-content: center;
  gap: 0.75rem;
}

.interest-tag {
  background-color: white;
  color: #1c0f41;
  border: 1px solid #dedde0;
  padding: 0.6rem 1.2rem;
  border-radius: 25px;
  font-size: 0.95rem;
  cursor: pointer;
  transition: all 0.3s ease;
}

.interest-tag:hover {
  background-color: #e9e6f2;
}

.interest-tag.selected {
  background-color: #3e30c2;
  color: white;
  border-color: #3e30c2;
}

.view-all {
  display: inline-block;
  margin-top: 2rem;
  color: #3e30c2;
  font-weight: 500;
  text-decoration: none;
  font-size: 0.95rem;
}

.view-all:hover {
  text-decoration: underline;
}

.sponsors {
  padding: 60px 20px;
  background-color: #f9f9f9;
  text-align: center;
}

.sponsors .section-title {
  font-size: 2rem;
  margin-bottom: 40px;
  color: #333;
}

.sponsor-logos {
  display: flex;
  justify-content: center;
  align-items: center;
  flex-wrap: wrap;
  gap: 40px;
}

.sponsor-logos img {
  height: 60px;
  object-fit: contain;
  transition: transform 0.3s ease;
}

.sponsor-logos img:hover {
  transform: scale(1.05);
}



.footer {
  background-color: #1c1c1e;
  color: #fff;
  padding: 60px 20px 20px;
  font-family: 'Segoe UI', sans-serif;
}

.footer-container {
  display: flex;
  flex-wrap: wrap;
  justify-content: space-between;
  gap: 40px;
  max-width: 1200px;
  margin: auto;
}

.footer-section h4 {
  font-size: 1.2rem;
  margin-bottom: 15px;
  color: #fff;
}

.footer-section ul {
  list-style: none;
  padding: 0;
}

.footer-section ul li {
  margin-bottom: 10px;
}

.footer-section ul li a {
  color: #ccc;
  text-decoration: none;
  transition: color 0.3s;
}

.footer-section ul li a:hover {
  color: #fff;
}

.social-icons a {
  color: #ccc;
  margin-right: 15px;
  font-size: 1.2rem;
  transition: color 0.3s;
}

.social-icons a:hover {
  color: #fff;
}

.footer-bottom {
  text-align: center;
  border-top: 1px solid #333;
  padding-top: 20px;
  margin-top: 40px;
  font-size: 0.9rem;
  color: #aaa;
}


@media (max-width: 768px) {
  .search-location {
    flex-direction: column;
  }
  .nav-links {
    display: none;
  }
}
.carousel {
  position: relative;
  overflow: hidden;
  width: 100%;
  height: 50vh; /* Or any height you want */
}

.slide {
  position: absolute;
  width: 100%;
  height: 100%;
  opacity: 0;
  transition: opacity 1s ease-in-out;
}

.slide img {
  width: 100%;
  height: 100%;
  object-fit: cover;
}

.slide.active {
  opacity: 1;
  z-index: 1;
}
</file>

<file path="src/Controller/auth/AuthController.php">
<?php

namespace App\Controller\auth;

use Symfony\Bundle\FrameworkBundle\Controller\AbstractController;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\Routing\Annotation\Route;
use Symfony\Component\HttpFoundation\Request;
use Doctrine\ORM\EntityManagerInterface;
use App\Form\RegistrationFormType;
use App\Entity\Users;
use Symfony\Component\HttpFoundation\Session\SessionInterface;

class AuthController extends AbstractController
{
    #[Route('/login', name: 'app_login', methods: ['GET', 'POST'])]
    public function login(Request $request, SessionInterface $session, EntityManagerInterface $entityManager): Response
    {
        // If user is already logged in
        if ($session->get('user')) {
          //  return $this->redirectToRoute('app_login');
        }
    
        $error = null;
        $lastEmail = $request->request->get('email', '');
    
        if ($request->isMethod('POST')) {
            $email = $request->request->get('email');
            $password = $request->request->get('password');
    
            $user = $entityManager->getRepository(Users::class)->findOneBy(['email' => $email]);
    
            if (!$user || $user->getPassword() !== $password) {
                $error = 'Invalid credentials';
            } else {
                $session->set('user', $user);
                return $this->redirectToRoute('app_home');
            }
        }
    
        return $this->render('auth/login.html.twig', [
            'error' => $error,
            'last_username' => $lastEmail
        ]);
    }

    #[Route('/logout', name: 'app_logout')]
    public function logout(SessionInterface $session): Response
    {
        $session->remove('user');
        return $this->redirectToRoute('app_login');
    }

    #[Route('/register', name: 'app_register')]
    public function register(Request $request, EntityManagerInterface $entityManager): Response
    {
        $user = new Users();
        $form = $this->createForm(RegistrationFormType::class, $user);
        $form->handleRequest($request);

        if ($form->isSubmitted()) {
            if ($form->isValid()) {
                // Set basic user data
                $user->setCreatedAt(date('Y-m-d H:i:s'));
                $user->setPoints(0);
                $user->setArgent(0);
                
                // Store plain password (not recommended for production)
                $plainPassword = $form->get('plainPassword')->getData();
                $user->setPassword($plainPassword);

                // Save the user
                $entityManager->persist($user);
                $entityManager->flush();
                
                $this->addFlash('success', 'Registration successful! You can now log in.');
                return $this->redirectToRoute('app_login');
            } else {
                // Collect all form errors
                $errors = [];
                foreach ($form->getErrors(true) as $error) {
                    $errors[] = $error->getMessage();
                }
                $this->addFlash('error', implode('<br>', $errors));
            }
        }

        return $this->render('auth/register.html.twig', [
            'registrationForm' => $form->createView(),
        ]);
    }
}
</file>

<file path="src/Controller/jobapplications/JobApplicationsController.php">
<?php
// src/Controller/jobapplications/JobApplicationsController.php

namespace App\Controller\jobapplications;

use App\Repository\ApplicationsRepository;
use Doctrine\ORM\EntityManagerInterface;
use Symfony\Bundle\FrameworkBundle\Controller\AbstractController;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\Routing\Annotation\Route;

class JobApplicationsController extends AbstractController
{
    #[Route('/job/applications', name: 'app_job_applications')]
    public function index(ApplicationsRepository $applicationsRepository): Response
    {
        $applications = $applicationsRepository->findAllApplications();

        return $this->render('jobapplications/jobapplications.html.twig', [
            'applications' => $applications,
        ]);
    }
}
</file>

<file path="src/Controller/jobfeed/JobFeedController.php">
<?php
// // src/Controller/jobfeed/JobFeedController.php
// namespace App\Controller\jobfeed;
// use App\Entity\Users;
// use App\Repository\ApplicationsRepository;
// use App\Repository\JobsRepository;
// use Doctrine\ORM\EntityManagerInterface;
// use Symfony\Bundle\FrameworkBundle\Controller\AbstractController;
// use Symfony\Component\HttpFoundation\Response;
// use Symfony\Component\Routing\Annotation\Route;
// use Sensio\Bundle\FrameworkExtraBundle\Configuration\IsGranted;

// class JobFeedController extends AbstractController
// {
//     #[Route('/job/feed/{id}' name: 'job_feed')]
    
//     public function apply(
//         int $id,
//         JobsRepository $jobsRepo,
//         ApplicationsRepository $applicationsRepo,
//         EntityManagerInterface $em
//     ): Response {
//         // 1️⃣ Fetch the Job or 404
//         $job = $jobsRepo->find($id);
//         if (!$job) {
//             throw $this->createNotFoundException('Job not found.');
//         }

//         // 2️⃣ Narrow getUser() to your Users entity
//         /** @var Users|null $user */
//         $user = $this->getUser();
//         if (!$user instanceof Users) {
//             // Either not logged in (shouldn't happen because of ROLE_USER)
//             // or your User class isn't App\Entity\Users
//             throw $this->createAccessDeniedException('You must be a valid user to apply.');
//         }

//         try {
//             // 3️⃣ Build the new Application (business logic lives in the repo)
//             $application = $applicationsRepo->createParticipation($user, $job);

//             // 4️⃣ Now persist & flush in the controller
//             $em->persist($application);
//             $em->flush();

//             $this->addFlash('success', 'Your application has been submitted!');
//         } catch (\LogicException $e) {
//             $this->addFlash('warning', $e->getMessage());
//         }

//         // 5️⃣ Redirect back to the feed
//         return $this->redirectToRoute('app_job_feed');
//     }
// } 
namespace App\Controller\jobfeed;
use App\Entity\Users;
use App\Repository\JobsRepository;
use App\Repository\ApplicationsRepository;
use Doctrine\ORM\EntityManagerInterface;
use Symfony\Bundle\FrameworkBundle\Controller\AbstractController;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\Routing\Annotation\Route;
use App\Form\ApplicationFormType;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpFoundation\Session\SessionInterface;

class JobFeedController extends AbstractController
{
    #[Route('/job/feed', name: 'app_job_feed')]
public function index(SessionInterface $session, JobsRepository $jobsRepository): Response
{
    $currentUser = $session->get('user');

    $jobs = $jobsRepository->findAllExceptUser($currentUser);

    return $this->render('jobfeed/jobfeed.html.twig', [
        'jobs'=> $jobs,
    ]);
}

    




    #[Route('/job/feed/apply/{id}', name: 'job_apply',
        methods: ['POST']     // ← only allow POSTs
    )]
    public function apply(
        int $id,
        Request $request,
        JobsRepository $jobsRepo,
        ApplicationsRepository $applicationsRepo,
        EntityManagerInterface $em
    ): Response {
        // 1️⃣ Fetch the Job or 404
        $job = $jobsRepo->find($id);
        if (!$job) {
            throw $this->createNotFoundException('Job not found.');
        }

        // 2️⃣ Pull in form data
        $coverLetter = $request->request->get('coverLetter', '');
        /** @var UploadedFile|null $cvFile */
        $cvFile      = $request->files->get('cv');

        // 3️⃣ Validate CV upload
        if (
            !$cvFile 
            || $cvFile->getClientMimeType() !== 'application/pdf' 
            || $cvFile->getSize() > 5 * 1024 * 1024
        ) {
            $this->addFlash('warning', 'Please upload a valid PDF CV under 5 MB.');
            return $this->redirectToRoute('app_job_feed');
        }

        // 4️⃣ Move the file into your uploads folder
        $uploadsDir = $this->getParameter('cv_upload_dir');
        $newName    = uniqid('cv_') . '.pdf';
        try {
            $cvFile->move($uploadsDir, $newName);
        } catch (\Exception $e) {
            $this->addFlash('warning', 'Could not save your CV. Please try again.');
            return $this->redirectToRoute('app_job_feed');
        }

        // 5️⃣ Create & persist the Application
        $user = $this->getUser();
        try {
            $application = $applicationsRepo->createApplication($user, $job);
            // if your Application entity has setters for coverLetter & cvFilename:
            $application->setCoverLetter($coverLetter);
            $application->setResumePath($newName);

            $em->persist($application);
            $em->flush();

            $this->addFlash('success', 'Your application has been submitted!');
        } catch (\LogicException $e) {
            $this->addFlash('warning', $e->getMessage());
        }

        // 6️⃣ Back to the feed
        return $this->redirectToRoute('app_job_feed');
    }
    }
</file>

<file path="src/Controller/organizer/OrganizerController.php">
<?php

namespace App\Controller\organizer;

use App\Entity\Users;
use App\Repository\JobsRepository;
use App\Repository\EventsRepository;
use App\Repository\UsersRepository;
use Symfony\Bundle\FrameworkBundle\Controller\AbstractController;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\Routing\Annotation\Route;
use Symfony\Component\HttpFoundation\Session\SessionInterface;

class OrganizerController extends AbstractController
{
    public function __construct(
        private JobsRepository $jobsRepository,
        private EventsRepository $eventsRepository,
        private UsersRepository $usersRepository
    ) {}

    #[Route('/organizer', name: 'app_organizer')]
    public function index(SessionInterface $session): Response
    {
        $user = $session->get('user');
    
        if (!$user) {
            throw $this->createNotFoundException('User not found in session');
        }
    
        return $this->render('organizer/organizer.html.twig', [
            'jobs' => $this->jobsRepository->findByUser($user),
            'events' => $this->eventsRepository->findByOrganizer($user),
            'user' => $user
        ]);
    }
}
</file>

<file path="src/Entity/Applications.php">
<?php

namespace App\Entity;

use App\Repository\ApplicationsRepository;
use Doctrine\ORM\Mapping as ORM;

#[ORM\Entity(repositoryClass: ApplicationsRepository::class)]
class Applications
{
    #[ORM\Id]
    #[ORM\GeneratedValue]
    #[ORM\Column]
    private ?int $id = null;

    #[ORM\ManyToOne]
    #[ORM\JoinColumn(nullable: true)]
    private ?Users $user_id = null;

   

    #[ORM\ManyToOne]
    #[ORM\JoinColumn(nullable: true)]
    private ?Jobs $job_id = null;

    #[ORM\Column(length: 255)]
    private ?string $status = null;

    #[ORM\Column(length: 255, nullable: true)]
    private ?string $appliedAt = null;

    #[ORM\Column(nullable: true)]
    private ?int $rewarded = null;

    #[ORM\Column(length: 255)]
    private ?string $cover_letter = null;

    #[ORM\Column(length: 255)]
    private ?string $resume_path = null;

    #[ORM\Column(nullable: true)]
    private ?int $coverRating = null;

    public function getId(): ?int
    {
        return $this->id;
    }

    public function getUserId(): ?Users
    {
        return $this->user_id;
    }

    public function setUserId(?Users $user_id): static
    {
        $this->user_id = $user_id;

        return $this;
    }

    

    public function getJobId(): ?Jobs
    {
        return $this->job_id;
    }

    public function setJobId(?Jobs $job_id): static
    {
        $this->job_id = $job_id;

        return $this;
    }

    public function getStatus(): ?string
    {
        return $this->status;
    }

    public function setStatus(string $status): static
    {
        $this->status = $status;

        return $this;
    }

    public function getAppliedAt(): ?string
    {
        return $this->appliedAt;
    }

    public function setAppliedAt(?string $appliedAt): static
    {
        $this->appliedAt = $appliedAt;

        return $this;
    }

    public function getRewarded(): ?int
    {
        return $this->rewarded;
    }

    public function setRewarded(?int $rewarded): static
    {
        $this->rewarded = $rewarded;

        return $this;
    }

    public function getCoverLetter(): ?string
    {
        return $this->cover_letter;
    }

    public function setCoverLetter(string $cover_letter): static
    {
        $this->cover_letter = $cover_letter;

        return $this;
    }

    public function getResumePath(): ?string
    {
        return $this->resume_path;
    }

    public function setResumePath(string $resume_path): static
    {
        $this->resume_path = $resume_path;

        return $this;
    }

    public function getCoverRating(): ?int
    {
        return $this->coverRating;
    }

    public function setCoverRating(?int $coverRating): static
    {
        $this->coverRating = $coverRating;

        return $this;
    }
}
</file>

<file path="src/Entity/Jobs.php">
<?php

namespace App\Entity;

use App\Repository\JobsRepository;
use Doctrine\ORM\Mapping as ORM;

#[ORM\Entity(repositoryClass: JobsRepository::class)]
class Jobs
{
    #[ORM\Id]
    #[ORM\GeneratedValue]
    #[ORM\Column]
    private ?int $id = null;

    #[ORM\Column(length: 255)]
    private ?string $jobTitle = null;

    #[ORM\Column(length: 255, nullable: true)]
    private ?string $eventTitle = null;

    #[ORM\Column(length: 255)]
    private ?string $jobLocation = null;

    #[ORM\Column(length: 255)]
    private ?string $employmentType = null;

    #[ORM\Column(length: 255 , nullable: true)]
    private ?string $applicationDeadLine = null;

    #[ORM\Column]
    private ?int $minSalary = null;

    #[ORM\Column]
    private ?int $maxSalary = null;

    #[ORM\Column(length: 255)]
    private ?string $currency = null;

    #[ORM\Column(length: 255)]
    private ?string $jobDescreption = null;

    #[ORM\Column(length: 255)]
    private ?string $recruiterName = null;

    #[ORM\Column(length: 255)]
    private ?string $recruiterEmail = null;

    #[ORM\Column(length: 255, nullable: true)]
    private ?string $createdAt = null;
    
    #[ORM\ManyToOne(inversedBy: 'jobs')]
    #[ORM\JoinColumn(nullable: true)]
    private ?Users $userId = null;

   

    public function getId(): ?int
    {
        return $this->id;
    }

    public function getJobTitle(): ?string
    {
        return $this->jobTitle;
    }

    public function setJobTitle(string $jobTitle): static
    {
        $this->jobTitle = $jobTitle;

        return $this;
    }

    public function getEventTitle(): ?string
    {
        return $this->eventTitle;
    }

    public function setEventTitle(?string $eventTitle): static
    {
        $this->eventTitle = $eventTitle;

        return $this;
    }

    public function getJobLocation(): ?string
    {
        return $this->jobLocation;
    }

    public function setJobLocation(string $jobLocation): static
    {
        $this->jobLocation = $jobLocation;

        return $this;
    }

    public function getEmploymentType(): ?string
    {
        return $this->employmentType;
    }

    public function setEmploymentType(string $employmentType): static
    {
        $this->employmentType = $employmentType;

        return $this;
    }

    public function getApplicationDeadLine(): ?string
    {
        return $this->applicationDeadLine;
    }

    public function setApplicationDeadLine(string $applicationDeadLine): static
    {
        $this->applicationDeadLine = $applicationDeadLine;

        return $this;
    }

    public function getMinSalary(): ?int
    {
        return $this->minSalary;
    }

    public function setMinSalary(int $minSalary): static
    {
        $this->minSalary = $minSalary;

        return $this;
    }

    public function getMaxSalary(): ?int
    {
        return $this->maxSalary;
    }

    public function setMaxSalary(int $maxSalary): static
    {
        $this->maxSalary = $maxSalary;

        return $this;
    }

    public function getCurrency(): ?string
    {
        return $this->currency;
    }

    public function setCurrency(string $currency): static
    {
        $this->currency = $currency;

        return $this;
    }

    public function getJobDescreption(): ?string
    {
        return $this->jobDescreption;
    }

    public function setJobDescreption(string $jobDescreption): static
    {
        $this->jobDescreption = $jobDescreption;

        return $this;
    }

    public function getRecruiterName(): ?string
    {
        return $this->recruiterName;
    }

    public function setRecruiterName(string $recruiterName): static
    {
        $this->recruiterName = $recruiterName;

        return $this;
    }

    public function getRecruiterEmail(): ?string
    {
        return $this->recruiterEmail;
    }

    public function setRecruiterEmail(string $recruiterEmail): static
    {
        $this->recruiterEmail = $recruiterEmail;

        return $this;
    }

    public function getCreatedAt(): ?string
    {
        return $this->createdAt;
    }

    public function setCreatedAt(?string $createdAt): static
    {
        $this->createdAt = $createdAt;

        return $this;
    }

  

    public function getUserId(): ?Users
    {
        return $this->userId;
    }

    public function setUserId(?Users $userId): static
    {
        $this->userId = $userId;

        return $this;
    }

   
}
</file>

<file path="src/Entity/Users.php">
<?php

namespace App\Entity;

use App\Repository\UsersRepository;
use Doctrine\Common\Collections\ArrayCollection;
use Doctrine\Common\Collections\Collection;
use Doctrine\DBAL\Types\Types;
use Doctrine\ORM\Mapping as ORM;

#[ORM\Entity(repositoryClass: UsersRepository::class)]
class Users
{
    #[ORM\Id]
    #[ORM\GeneratedValue]
    #[ORM\Column]
    private ?int $id = null;

    #[ORM\Column(length: 255)]
    private ?string $username = null;

    #[ORM\Column(length: 255)]
    private ?string $password = null;

    #[ORM\Column(length: 255)]
    private ?string $email = null;

    #[ORM\Column(length: 255 , nullable: true)]
    private ?string $createdAt = null;

    #[ORM\Column(length: 255, nullable: true)]
    private ?string $updatedAt = null;

    #[ORM\Column(nullable: true)]
    private ?int $points = null;

    #[ORM\Column]
    private ?int $age = null;

    #[ORM\Column(length: 255)]
    private ?string $gender = null;

    #[ORM\Column(type: Types::DECIMAL, precision: 10, scale: 2, nullable: true)]
    private ?string $argent = null;

    #[ORM\OneToMany(targetEntity: Conversion::class, mappedBy: 'userId')]
    private Collection $conversions;

    #[ORM\OneToMany(targetEntity: Events::class, mappedBy: 'organizerId')]
    private Collection $events;

    #[ORM\OneToMany(targetEntity: Jobs::class, mappedBy: 'userId', orphanRemoval: true)]
    private Collection $jobs;

    public function __construct()
    {
        $this->conversions = new ArrayCollection();
        $this->events = new ArrayCollection();
        $this->jobs = new ArrayCollection();
    }

    

   

    public function getId(): ?int
    {
        return $this->id;
    }

    public function getUsername(): ?string
    {
        return $this->username;
    }

    public function setUsername(string $username): static
    {
        $this->username = $username;

        return $this;
    }

    public function getPassword(): ?string
    {
        return $this->password;
    }

    public function setPassword(string $password): static
    {
        $this->password = $password;

        return $this;
    }

    public function getEmail(): ?string
    {
        return $this->email;
    }

    public function setEmail(string $email): static
    {
        $this->email = $email;

        return $this;
    }

    public function getCreatedAt(): ?string
    {
        return $this->createdAt;
    }

    public function setCreatedAt(string $createdAt): static
    {
        $this->createdAt = $createdAt;

        return $this;
    }

    public function getUpdatedAt(): ?string
    {
        return $this->updatedAt;
    }

    public function setUpdatedAt(?string $updatedAt): static
    {
        $this->updatedAt = $updatedAt;

        return $this;
    }

    public function getPoints(): ?int
    {
        return $this->points;
    }

    public function setPoints(?int $points): static
    {
        $this->points = $points;

        return $this;
    }

    public function getAge(): ?int
    {
        return $this->age;
    }

    public function setAge(int $age): static
    {
        $this->age = $age;

        return $this;
    }

    public function getGender(): ?string
    {
        return $this->gender;
    }

    public function setGender(string $gender): static
    {
        $this->gender = $gender;

        return $this;
    }

    public function getArgent(): ?int
    {
        return $this->argent;
    }

    public function setArgent(?int $argent): static
    {
        $this->argent = $argent;

        return $this;
    }

    /**
     * @return Collection<int, Conversion>
     */
    public function getConversions(): Collection
    {
        return $this->conversions;
    }

    public function addConversion(Conversion $conversion): static
    {
        if (!$this->conversions->contains($conversion)) {
            $this->conversions->add($conversion);
            $conversion->setUserId($this);
        }

        return $this;
    }

    public function removeConversion(Conversion $conversion): static
    {
        if ($this->conversions->removeElement($conversion)) {
            // set the owning side to null (unless already changed)
            if ($conversion->getUserId() === $this) {
                $conversion->setUserId(null);
            }
        }

        return $this;
    }

    /**
     * @return Collection<int, Events>
     */
    public function getEvents(): Collection
    {
        return $this->events;
    }

    public function addEvent(Events $event): static
    {
        if (!$this->events->contains($event)) {
            $this->events->add($event);
            $event->setOrganizerId($this);
        }

        return $this;
    }

    public function removeEvent(Events $event): static
    {
        if ($this->events->removeElement($event)) {
            // set the owning side to null (unless already changed)
            if ($event->getOrganizerId() === $this) {
                $event->setOrganizerId(null);
            }
        }

        return $this;
    }

    /**
     * @return Collection<int, Jobs>
     */
    public function getJobs(): Collection
    {
        return $this->jobs;
    }

    public function addJob(Jobs $job): static
    {
        if (!$this->jobs->contains($job)) {
            $this->jobs->add($job);
            $job->setUserId($this);
        }

        return $this;
    }

    public function removeJob(Jobs $job): static
    {
        if ($this->jobs->removeElement($job)) {
            // set the owning side to null (unless already changed)
            if ($job->getUserId() === $this) {
                $job->setUserId(null);
            }
        }

        return $this;
    }

    

   

}
</file>

<file path="src/Form/CreateJobFormType.php">
<?php

namespace App\Form;

use App\Entity\Jobs;
use Symfony\Component\Form\AbstractType;
use Symfony\Component\Form\FormBuilderInterface;
use Symfony\Component\OptionsResolver\OptionsResolver;

class CreateJobFormType extends AbstractType
{
    public function buildForm(FormBuilderInterface $builder, array $options): void
    {
        $builder
            ->add('jobTitle')
            ->add('eventTitle')
            ->add('jobLocation')
            ->add('employmentType')
            ->add('applicationDeadLine')
            ->add('minSalary')
            ->add('maxSalary')
            ->add('currency')
            ->add('jobDescreption')
            ->add('recruiterName')
            ->add('recruiterEmail')
            
            
        ;
    }

    public function configureOptions(OptionsResolver $resolver): void
    {
        $resolver->setDefaults([
            'data_class' => Jobs::class,
        ]);
    }
}
</file>

<file path="src/Repository/ApplicationsRepository.php">
<?php
// src/Repository/ApplicationsRepository.php
namespace App\Repository;

use App\Entity\Applications;
use App\Entity\Jobs;
use App\Entity\Users;
use Doctrine\Bundle\DoctrineBundle\Repository\ServiceEntityRepository;
use Doctrine\Persistence\ManagerRegistry;

class ApplicationsRepository extends ServiceEntityRepository
{
    public function __construct(ManagerRegistry $registry)
    {
        parent::__construct($registry, Applications::class);
    }

    /**
     * Build a new Applications entity (without persisting).
     *
     * @throws \LogicException if the user has already applied to this job
     */
    public function createApplication(?Users $user, Jobs $job): Applications
    {
        // 1. Prevent duplicates
        $existing = $this->createQueryBuilder('a')
            ->andWhere('a.userId = :user')
            ->andWhere('a.jobId  = :job')
            ->setParameters(new \Doctrine\Common\Collections\ArrayCollection(['user' => $user, 'job' => $job]))
            ->getQuery()
            ->getOneOrNullResult();

        if ($existing) {
            throw new \LogicException('You have already applied to this job.');
        }

        // 2. Build new Applications
        $application = new Applications();
        $application->setUserId($user);
        $application->setJobId($job);          
        $application->setStatus('pending');
        $application->setAppliedAt((new \DateTimeImmutable())->format('Y-m-d H:i:s'));

        return $application;
    }



public function findAllApplications(): array
{
    return $this->createQueryBuilder('a')
        ->leftJoin('a.user_id', 'u')
        ->leftJoin('a.job_id', 'j')
        ->addSelect('u', 'j')
        ->orderBy('a.appliedAt', 'DESC')
        ->getQuery()
        ->getResult();
}

}
</file>

<file path="src/Repository/EventsRepository.php">
<?php

namespace App\Repository;

use App\Entity\Events;
use Doctrine\Bundle\DoctrineBundle\Repository\ServiceEntityRepository;
use Doctrine\Persistence\ManagerRegistry;

class EventsRepository extends ServiceEntityRepository
{
    public function __construct(ManagerRegistry $registry)
    {
        parent::__construct($registry, Events::class);
    }

    public function findByOrganizer($organizer): array
    {
        return $this->createQueryBuilder('e')
            ->andWhere('e.organizerId = :organizer')
            ->setParameter('organizer', $organizer)
            ->orderBy('e.startTime', 'ASC')
            ->getQuery()
            ->getResult();
    }

    public function findByNameDescriptionCategory(?string $searchTerm, ?int $categoryId, ?int $excludeOrganizerId = null): array
    {
        $queryBuilder = $this->createQueryBuilder('e')
            ->leftJoin('e.categoryId', 'c')
            ->addSelect('c');

        // Exclude events by organizer if specified
        if ($excludeOrganizerId !== null) {
            $queryBuilder
                ->andWhere('e.organizerId != :excludeOrgId')
                ->setParameter('excludeOrgId', $excludeOrganizerId);
        }

        // Category filter
        if ($categoryId !== null && $categoryId > 0) {
            $queryBuilder
                ->andWhere('e.categoryId = :catId')
                ->setParameter('catId', $categoryId);
        }

        // Search term filter
        $cleanSearchTerm = $searchTerm !== null ? trim($searchTerm) : null;
        if (!empty($cleanSearchTerm)) {
            $queryBuilder
                ->andWhere('LOWER(e.name) LIKE LOWER(:term) OR LOWER(e.description) LIKE LOWER(:term)')
                ->setParameter('term', '%' . $cleanSearchTerm . '%');
        }

        // Ordering
        $queryBuilder->orderBy('e.startTime', 'ASC')
                     ->addOrderBy('e.name', 'ASC');

        return $queryBuilder->getQuery()->getResult();
    }
}
</file>

<file path="src/Repository/JobsRepository.php">
<?php

namespace App\Repository;

use App\Entity\Jobs;
use Doctrine\Bundle\DoctrineBundle\Repository\ServiceEntityRepository;
use Doctrine\Persistence\ManagerRegistry;
use App\Entity\Users;

/**
 * @extends ServiceEntityRepository<Jobs>
 */
class JobsRepository extends ServiceEntityRepository
{
    public function __construct(ManagerRegistry $registry)
    {
        parent::__construct($registry, Jobs::class);
    }

    /**
 * @return Jobs[] Returns all jobs sorted alphabetically by title
 */
public function findAllSortedByTitle(): array
{
    return $this->createQueryBuilder('j')
        ->orderBy('j.jobTitle', 'ASC')
        ->getQuery()
        ->getResult();
}
public function findAllExceptUser($user): array
{
    return $this->createQueryBuilder('j')
        ->where('j.userId != :user')  // use 'userId' here
        ->setParameter('user', $user)
        ->orderBy('j.jobTitle', 'ASC')
        ->getQuery()
        ->getResult();
}

    /**
     * @return Jobs[] //Returns all jobs with optional sorting
     */
    public function findAllWithSorting(string $sortField = 'jobTitle', string $sortDirection = 'ASC'): array
    {
        return $this->createQueryBuilder('j')
            ->orderBy('j.'.$sortField, $sortDirection)
            ->getQuery()
            ->getResult();
    } 

    public function findByUser(Users $user): array
{
    return $this->createQueryBuilder('j')
        ->andWhere('j.userId = :user')
        ->setParameter('user', $user)
        ->orderBy('j.jobTitle', 'ASC')
        ->getQuery()
        ->getResult();
}

}

// In JobsRepository.php

// // Find jobs by event
// public function findByEvent(Events $event): array
// {
//     return $this->createQueryBuilder('j')
//         ->andWhere('j.eventId = :event')
//         ->setParameter('event', $event)
//         ->orderBy('j.jobTitle', 'ASC')
//         ->getQuery()
//         ->getResult();
// }

// // Find jobs with salary range
// public function findBySalaryRange(int $min, int $max): array
// {
//     return $this->createQueryBuilder('j')
//         ->andWhere('j.minSalary >= :min')
//         ->andWhere('j.maxSalary <= :max')
//         ->setParameter('min', $min)
//         ->setParameter('max', $max)
//         ->orderBy('j.jobTitle', 'ASC')
//         ->getQuery()
//         ->getResult();
// }

// // Search jobs by title or description
// public function searchJobs(string $query): array
// {
//     return $this->createQueryBuilder('j')
//         ->andWhere('j.jobTitle LIKE :query OR j.jobDescreption LIKE :query')
//         ->setParameter('query', '%'.$query.'%')
//         ->orderBy('j.jobTitle', 'ASC')
//         ->getQuery()
//         ->getResult();
// }
//}

// src/Repository/JobsRepository.php
// namespace App\Repository;

// use App\Entity\Jobs;
// use Doctrine\Bundle\DoctrineBundle\Repository\ServiceEntityRepository;
// use Doctrine\Persistence\ManagerRegistry;
// use Psr\Log\LoggerInterface;

// class JobsRepository extends ServiceEntityRepository
// {
//     private $logger;

//     public function __construct(ManagerRegistry $registry, LoggerInterface $logger)
//     {
//         parent::__construct($registry, Jobs::class);
//         $this->logger = $logger;
//     }

//     public function findAllSortedByTitle(): array
//     {
//         $query = $this->createQueryBuilder('j')
//             ->orderBy('j.jobTitle', 'ASC')
//             ->getQuery();

//         // Log the generated SQL
//         $this->logger->debug('Jobs Query: '.$query->getSQL());

//         return $query->getResult();
//     }
</file>

<file path="symfony.lock">
{
    "doctrine/annotations": {
        "version": "2.0",
        "recipe": {
            "repo": "github.com/symfony/recipes",
            "branch": "main",
            "version": "1.10",
            "ref": "64d8583af5ea57b7afa4aba4b159907f3a148b05"
        }
    },
    "doctrine/doctrine-bundle": {
        "version": "2.13",
        "recipe": {
            "repo": "github.com/symfony/recipes",
            "branch": "main",
            "version": "2.4",
            "ref": "91690c0a440faba1a3676256bcca2b4aa9f55b72"
        },
        "files": [
            "./config/packages/doctrine.yaml",
            "./src/Entity/.gitignore",
            "./src/Repository/.gitignore"
        ]
    },
    "doctrine/doctrine-migrations-bundle": {
        "version": "3.4",
        "recipe": {
            "repo": "github.com/symfony/recipes",
            "branch": "main",
            "version": "3.1",
            "ref": "1d01ec03c6ecbd67c3375c5478c9a423ae5d6a33"
        },
        "files": [
            "./config/packages/doctrine_migrations.yaml",
            "./migrations/.gitignore"
        ]
    },
    "phpunit/phpunit": {
        "version": "9.6",
        "recipe": {
            "repo": "github.com/symfony/recipes",
            "branch": "main",
            "version": "9.6",
            "ref": "6a9341aa97d441627f8bd424ae85dc04c944f8b4"
        },
        "files": [
            "./.env.test",
            "./phpunit.xml.dist",
            "./tests/bootstrap.php"
        ]
    },
    "symfony/console": {
        "version": "6.1",
        "recipe": {
            "repo": "github.com/symfony/recipes",
            "branch": "main",
            "version": "5.3",
            "ref": "1781ff40d8a17d87cf53f8d4cf0c8346ed2bb461"
        },
        "files": [
            "./bin/console"
        ]
    },
    "symfony/debug-bundle": {
        "version": "6.1",
        "recipe": {
            "repo": "github.com/symfony/recipes",
            "branch": "main",
            "version": "5.3",
            "ref": "5aa8aa48234c8eb6dbdd7b3cd5d791485d2cec4b"
        },
        "files": [
            "./config/packages/debug.yaml"
        ]
    },
    "symfony/flex": {
        "version": "2.5",
        "recipe": {
            "repo": "github.com/symfony/recipes",
            "branch": "main",
            "version": "2.4",
            "ref": "52e9754527a15e2b79d9a610f98185a1fe46622a"
        },
        "files": [
            "./.env",
            "./.env.dev"
        ]
    },
    "symfony/framework-bundle": {
        "version": "6.1",
        "recipe": {
            "repo": "github.com/symfony/recipes",
            "branch": "main",
            "version": "5.4",
            "ref": "3cd216a4d007b78d8554d44a5b1c0a446dab24fb"
        },
        "files": [
            "./config/packages/cache.yaml",
            "./config/packages/framework.yaml",
            "./config/preload.php",
            "./config/routes/framework.yaml",
            "./config/services.yaml",
            "./public/index.php",
            "./src/Controller/.gitignore",
            "./src/Kernel.php"
        ]
    },
    "symfony/mailer": {
        "version": "6.1",
        "recipe": {
            "repo": "github.com/symfony/recipes",
            "branch": "main",
            "version": "4.3",
            "ref": "09051cfde49476e3c12cd3a0e44289ace1c75a4f"
        },
        "files": [
            "./config/packages/mailer.yaml"
        ]
    },
    "symfony/maker-bundle": {
        "version": "1.50",
        "recipe": {
            "repo": "github.com/symfony/recipes",
            "branch": "main",
            "version": "1.0",
            "ref": "fadbfe33303a76e25cb63401050439aa9b1a9c7f"
        }
    },
    "symfony/messenger": {
        "version": "6.1",
        "recipe": {
            "repo": "github.com/symfony/recipes",
            "branch": "main",
            "version": "6.0",
            "ref": "ba1ac4e919baba5644d31b57a3284d6ba12d52ee"
        },
        "files": [
            "./config/packages/messenger.yaml"
        ]
    },
    "symfony/monolog-bundle": {
        "version": "3.10",
        "recipe": {
            "repo": "github.com/symfony/recipes",
            "branch": "main",
            "version": "3.7",
            "ref": "aff23899c4440dd995907613c1dd709b6f59503f"
        },
        "files": [
            "./config/packages/monolog.yaml"
        ]
    },
    "symfony/notifier": {
        "version": "6.1",
        "recipe": {
            "repo": "github.com/symfony/recipes",
            "branch": "main",
            "version": "5.0",
            "ref": "178877daf79d2dbd62129dd03612cb1a2cb407cc"
        },
        "files": [
            "./config/packages/notifier.yaml"
        ]
    },
    "symfony/phpunit-bridge": {
        "version": "7.2",
        "recipe": {
            "repo": "github.com/symfony/recipes",
            "branch": "main",
            "version": "6.3",
            "ref": "a411a0480041243d97382cac7984f7dce7813c08"
        },
        "files": [
            "./.env.test",
            "./bin/phpunit",
            "./phpunit.xml.dist",
            "./tests/bootstrap.php"
        ]
    },
    "symfony/routing": {
        "version": "6.1",
        "recipe": {
            "repo": "github.com/symfony/recipes",
            "branch": "main",
            "version": "6.1",
            "ref": "a44010c0d06989bd4f154aa07d2542d47caf5b83"
        },
        "files": [
            "./config/packages/routing.yaml",
            "./config/routes.yaml"
        ]
    },
    "symfony/security-bundle": {
        "version": "6.1",
        "recipe": {
            "repo": "github.com/symfony/recipes",
            "branch": "main",
            "version": "6.0",
            "ref": "8a5b112826f7d3d5b07027f93786ae11a1c7de48"
        },
        "files": [
            "./config/packages/security.yaml"
        ]
    },
    "symfony/translation": {
        "version": "6.1",
        "recipe": {
            "repo": "github.com/symfony/recipes",
            "branch": "main",
            "version": "5.3",
            "ref": "e28e27f53663cc34f0be2837aba18e3a1bef8e7b"
        },
        "files": [
            "./config/packages/translation.yaml",
            "./translations/.gitignore"
        ]
    },
    "symfony/twig-bundle": {
        "version": "6.1",
        "recipe": {
            "repo": "github.com/symfony/recipes",
            "branch": "main",
            "version": "5.4",
            "ref": "bb2178c57eee79e6be0b297aa96fc0c0def81387"
        },
        "files": [
            "./config/packages/twig.yaml",
            "./templates/base.html.twig"
        ]
    },
    "symfony/validator": {
        "version": "6.1",
        "recipe": {
            "repo": "github.com/symfony/recipes",
            "branch": "main",
            "version": "5.3",
            "ref": "c32cfd98f714894c4f128bb99aa2530c1227603c"
        },
        "files": [
            "./config/packages/validator.yaml"
        ]
    },
    "symfony/web-profiler-bundle": {
        "version": "6.1",
        "recipe": {
            "repo": "github.com/symfony/recipes",
            "branch": "main",
            "version": "6.1",
            "ref": "8b51135b84f4266e3b4c8a6dc23c9d1e32e543b7"
        },
        "files": [
            "./config/packages/web_profiler.yaml",
            "./config/routes/web_profiler.yaml"
        ]
    },
    "twig/extra-bundle": {
        "version": "v3.8.0"
    }
}
</file>

<file path="templates/base.html.twig">
{# templates/base.html.twig #}
{% block stylesheets %}
    <!-- Google Fonts & Font Awesome -->
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.0/css/all.min.css" rel="stylesheet">

    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
    <link rel="stylesheet" href="{{ asset('css/root.css') }}">
{% endblock %}

{% block body %}
<header class="header">
    <nav class="navbar">
        <div class="logo">
            <img src="{{ asset('images/logo1.PNG') }}" alt="Connect Sphere" class="logo-img">
        </div>
        <div class="search-location">
            <div class="search-container">
                <input type="text" placeholder="Search events" class="search-input">
                <button class="search-btn"><i class="fas fa-search"></i></button>
            </div>
            <div class="location-selector">
                <i class="fas fa-map-marker-alt"></i>
                <span>Tunis</span>
            </div>
        </div>
        <div class="nav-links">
            <a href="#" class="nav-link">Contact Sales</a>
            <a href="#" class="nav-link">Create Events</a>
            <a href="#" class="nav-link">Help Center</a>
            <a href="#" class="nav-link">Find my tickets</a>
            <a href="{{ path('app_login') }}" class="nav-link">Login</a>
            <a href="{{ path('app_register') }}" class="nav-link">Register</a>
        </div>
    </nav>
</header>

<main>
    {# HERO SECTION #}
    <section class="hero">
    <div class="carousel">
        <div class="slide active">
            <img src="{{ asset('images/banner4.png') }}" alt="Event 1">
            <div class="carousel-content">
                <div class="banner-label">GET INTO IT</div>
                <h1 class="banner-title">READY. <br> SET. FEST.</h1>
                <a href="#" class="cta-btn">Find A World Of Festivals</a>
            </div>
        </div>
        <div class="slide">
            <img src="{{ asset('images/banner5.png') }}" alt="Event 2">
            <div class="carousel-content">
                <div class="banner-label">GET INTO IT</div>
                <h1 class="banner-title">READY. <br> SET. FEST.</h1>
                <a href="#" class="cta-btn">Find A World Of Festivals</a>
            </div>
        </div>
        <div class="slide">
            <img src="{{ asset('images/banner3.png') }}" alt="Event 3">
            <div class="carousel-content">
                <div class="banner-label">GET INTO IT</div>
                <h1 class="banner-title">READY. <br> SET. FEST.</h1>
                <a href="#" class="cta-btn">Find A World Of Festivals</a>
            </div>
        </div>
        <div class="slide">
            <img src="{{ asset('images/banner6.png') }}" alt="Event 2">
            <div class="carousel-content">
                <div class="banner-label">GET INTO IT</div>
                <h1 class="banner-title">READY. <br> SET. FEST.</h1>
                <a href="#" class="cta-btn">Find A World Of Festivals</a>
            </div>
        </div>
    </div>

    <div class="carousel-controls">
        <button class="prev-slide"><i class="fas fa-chevron-left"></i></button>
        <button class="next-slide"><i class="fas fa-chevron-right"></i></button>
    </div>
</section>



    {# CATEGORY ICONS #}
    <section class="categories">
        {# <h3>hhhhhh</h3> #}
        <div class="category-grid">
            {% set categories = [
                {'icon': 'microphone', 'name': 'Music'},
                {'icon': 'globe', 'name': 'Nightlife'},
                {'icon': 'theater-masks', 'name': 'Performing & Visual Arts'},
                {'icon': 'calendar-days', 'name': 'Holidays'},
                {'icon': 'heart', 'name': 'Dating'},
                {'icon': 'gamepad', 'name': 'Hobbies'},
                {'icon': 'briefcase', 'name': 'Business'},
                {'icon': 'utensils', 'name': 'Food & Drink'}
            ] %}
            {% for category in categories %}
                <div class="category-item">
                    <div class="icon-circle">
                        <i class="fas fa-{{ category.icon }}"></i>
                    </div>
                    <span>{{ category.name }}</span>
                </div>
            {% endfor %}
        </div>
    </section>

    {# EVENT LISTINGS #}
   
<section class="events">
    <h2 class="section-title">Events in Tunis</h2>
    <div class="event-list">
        <div class="event-card">
            <img src="{{ asset('images/banner2.png') }}" alt="Event 1">
            <div class="event-details">
                <h3>Finding Your Inner Joy MasterClass</h3>
                <p>Fri, May 16 • 2:30 AM GMT+2</p>
                <span class="event-price">Free</span>
            </div>
        </div>

        <div class="event-card">
            <img src="{{ asset('images/banner1.png') }}" alt="Event 2">
            <div class="event-details">
                <h3>Music Beats Festival</h3>
                <p>Sat, May 17 • 6:00 PM GMT+2</p>
                <span class="event-price">$20</span>
            </div>
        </div>

        <div class="event-card">
            <img src="{{ asset('images/banner3.png') }}" alt="Event 3">
            <div class="event-details">
                <h3>Startup Innovation Conference</h3>
                <p>Sun, May 18 • 10:00 AM GMT+2</p>
                <span class="event-price">Free</span>
            </div>
        </div>

        <div class="event-card">
            <img src="{{ asset('images/banner1.png') }}" alt="Event 4">
            <div class="event-details">
                <h3>Art & Culture Exhibition</h3>
                <p>Mon, May 19 • 3:00 PM GMT+2</p>
                <span class="event-price">$15</span>
            </div>
        </div>

        <div class="event-card">
            <img src="{{ asset('images/banner2.png') }}" alt="Event 5">
            <div class="event-details">
                <h3>Food Truck Fiesta</h3>
                <p>Tue, May 20 • 12:00 PM GMT+2</p>
                <span class="event-price">Free</span>
            </div>
        </div>

        <div class="event-card">
            <img src="{{ asset('images/banner3.png') }}" alt="Event 6">
            <div class="event-details">
                <h3>Outdoor Cinema Night</h3>
                <p>Wed, May 21 • 8:00 PM GMT+2</p>
                <span class="event-price">$10</span>
            </div>
        </div>

        <div class="event-card">
            <img src="{{ asset('images/banner1.png') }}" alt="Event 7">
            <div class="event-details">
                <h3>Photography Workshop</h3>
                <p>Thu, May 22 • 1:00 PM GMT+2</p>
                <span class="event-price">Free</span>
            </div>
        </div>

        <div class="event-card">
            <img src="{{ asset('images/banner2.png') }}" alt="Event 8">
            <div class="event-details">
                <h3>DJ Party Night</h3>
                <p>Fri, May 23 • 11:00 PM GMT+2</p>
                <span class="event-price">$25</span>
            </div>
        </div>

        <div class="event-card">
            <img src="{{ asset('images/banner3.png') }}" alt="Event 9">
            <div class="event-details">
                <h3>Wellness & Mindfulness Retreat</h3>
                <p>Sat, May 24 • 9:00 AM GMT+2</p>
                <span class="event-price">$30</span>
            </div>
        </div>

        <div class="event-card">
            <img src="{{ asset('images/banner1.png') }}" alt="Event 10">
            <div class="event-details">
                <h3>Local Artists Market</h3>
                <p>Sun, May 25 • 10:00 AM GMT+2</p>
                <span class="event-price">Free</span>
            </div>
        </div>
    </div>
</section>

</section>
<section class="interests-section">
    <div class="interests-container">
        <div class="interests-header">
            <h2>Let's make it personal</h2>
            <p>Select your interests to get event suggestions based on what you love</p>
        </div>
        <div class="interests-list">
            {% set interests = [
                'Comedy', 'Food', 'Education', 'Pop', 'Design', 'R&B', 'Hip Hop / Rap',
                'Film', 'Personal health', 'Blues & Jazz', 'Travel', 'Rock', 'Yoga',
                'Country', 'Startups & Small Business', 'Classical', 'Mental health',
                'TV', 'Alternative', 'Musical'
            ] %}
            {% for interest in interests %}
               <button class="interest-tag">{{ interest }}</button>
            {% endfor %}
        </div>
        <a href="#" class="view-all">View all interests</a>
    </div>
</section>
<section class="sponsors">
    <div class="container">
        <h2 class="section-title">Our Sponsors</h2>
        <div class="sponsor-logos">
            <img src="{{ asset('images/sponsor1.png') }}" alt="Sponsor 1">
            <img src="{{ asset('images/sponsor2.png') }}" alt="Sponsor 2">
            <img src="{{ asset('images/sponsor3.png') }}" alt="Sponsor 3">
            <img src="{{ asset('images/sponsor4.png') }}" alt="Sponsor 4">
            <img src="{{ asset('images/sponsor5.png') }}" alt="Sponsor 5">
        </div>
    </div>
</section>


</main>

<footer class="footer">
    <div class="footer-container">
        <div class="footer-section">
            <h4>About</h4>
            <ul>
                <li><a href="#">Our Story</a></li>
                <li><a href="#">Careers</a></li>
                <li><a href="#">Press & Media</a></li>
            </ul>
        </div>
        <div class="footer-section">
            <h4>Support</h4>
            <ul>
                <li><a href="#">Help Center</a></li>
                <li><a href="#">Contact Us</a></li>
                <li><a href="#">Accessibility</a></li>
            </ul>
        </div>
        <div class="footer-section">
            <h4>Explore</h4>
            <ul>
                <li><a href="#">Festivals</a></li>
                <li><a href="#">Workshops</a></li>
                <li><a href="#">Concerts</a></li>
            </ul>
        </div>
        <div class="footer-section social">
            <h4>Follow Us</h4>
            <div class="social-icons">
                <a href="#"><i class="fab fa-facebook-f"></i></a>
                <a href="#"><i class="fab fa-twitter"></i></a>
                <a href="#"><i class="fab fa-instagram"></i></a>
            </div>
        </div>
    </div>
    <div class="footer-bottom">
        <p>&copy; 2025 FestiHub. All rights reserved.</p>
    </div>
</footer>

{% endblock %}
{% block javascript %}
<script>
document.addEventListener('DOMContentLoaded', function () {
    const slides = document.querySelectorAll('.slide');
    const nextBtn = document.querySelector('.next-slide');
    const prevBtn = document.querySelector('.prev-slide');
    let currentSlide = 0;
    let slideInterval = setInterval(nextSlide, 4000); // Auto-slide every 4 seconds

    function showSlide(index) {
        slides.forEach((slide, i) => {
            slide.classList.toggle('active', i === index);
        });
    }

    function nextSlide() {
        currentSlide = (currentSlide + 1) % slides.length;
        showSlide(currentSlide);
    }

    function prevSlide() {
        currentSlide = (currentSlide - 1 + slides.length) % slides.length;
        showSlide(currentSlide);
    }

    nextBtn.addEventListener('click', () => {
        nextSlide();
        resetInterval();
    });

    prevBtn.addEventListener('click', () => {
        prevSlide();
        resetInterval();
    });

    function resetInterval() {
        clearInterval(slideInterval);
        slideInterval = setInterval(nextSlide, 4000);
    }
});


// Add event listeners to interest tags
document.addEventListener('DOMContentLoaded', () => {
        const tags = document.querySelectorAll('.interest-tag');

        tags.forEach(tag => {
            tag.addEventListener('click', () => {
                tag.classList.toggle('selected');
            });
        });
    });
</script>

{% endblock %}
</file>

<file path="templates/create_job/createjob.html.twig">
{# templates/job/create.html.twig #}
{% extends 'base.html.twig' %}

{% block title %}Create a Job{% endblock %}

{% block stylesheets %}
    {{ parent() }}
    <link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <style>
        :root {
            --primary-bg: #1e1c27;
            --secondary-bg: #2a3654;
            --accent: #d54d67;
            --accent-light: #e87187;
            --text-white: #ffffff;
            --text-light: #f0f4f8;
            --text-muted: #b8c2cc;
            --border-color: #3d5472;
            --focus-glow: rgba(213, 77, 103, 0.3);
            --card-bg: rgba(30, 28, 39, 0.6);
            --heading-font: 'Inter', sans-serif;
            --body-font: 'Inter', sans-serif;
            --success: #4ade80;
        }

        body {
            background: linear-gradient(135deg, var(--primary-bg) 0%, #2a2438 100%);
            min-height: 100vh;
            color: var(--text-light);
            font-family: var(--body-font);
            line-height: 1.6;
        }

        .create-job-wrapper {
            max-width: 900px;
            margin: 3rem auto;
            padding: 3rem;
            background: var(--secondary-bg);
            border-radius: 20px;
            box-shadow: 0 20px 40px rgba(0, 0, 0, 0.3);
            backdrop-filter: blur(8px);
            border: 1px solid rgba(255, 255, 255, 0.05);
            position: relative;
            overflow: hidden;
        }

        .create-job-wrapper::before {
            content: '';
            position: absolute;
            top: -50%;
            right: -50%;
            width: 200%;
            height: 200%;
            background: radial-gradient(circle, rgba(213,77,103,0.1) 0%, rgba(30,28,39,0) 70%);
            z-index: -1;
        }

        .form-header {
            text-align: center;
            margin-bottom: 3rem;
            position: relative;
        }

        .form-icon {
            color: var(--accent);
            margin-bottom: 1.5rem;
            font-size: 2.5rem;
        }

        h1 {
            font-family: var(--heading-font);
            font-size: 2.5rem;
            font-weight: 700;
            margin-bottom: 0.75rem;
            background: linear-gradient(to right, var(--text-light), var(--text-muted));
            -webkit-background-clip: text;
            background-clip: text;
            color: transparent;
            letter-spacing: -0.5px;
        }

        .form-subtitle {
            color: var(--text-muted);
            font-size: 1.1rem;
            font-weight: 300;
            max-width: 600px;
            margin: 0 auto;
            line-height: 1.7;
        }

        .form-grid {
            display: grid;
            grid-template-columns: repeat(2, 1fr);
            gap: 2rem;
            margin-bottom: 3rem;
        }

        .form-card {
            background: var(--card-bg);
            border: 1px solid var(--border-color);
            border-radius: 12px;
            padding: 1.5rem;
            transition: all 0.4s cubic-bezier(0.175, 0.885, 0.32, 1.1);
            position: relative;
            overflow: hidden;
        }

        .form-card:hover {
            border-color: var(--accent);
            transform: translateY(-3px);
            box-shadow: 0 10px 20px rgba(0, 0, 0, 0.2);
        }

        .form-card::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            width: 4px;
            height: 100%;
            background: var(--accent);
            transform: scaleY(0);
            transform-origin: bottom;
            transition: transform 0.4s ease;
        }

        .form-card:hover::before {
            transform: scaleY(1);
        }

        .form-card.tall {
            grid-column: 1 / -1;
            min-height: 180px;
        }

        .form-group {
            margin-bottom: 1.75rem;
            position: relative;
        }

        .form-group:last-child {
            margin-bottom: 0;
        }

        label {
            display: flex;
            align-items: center;
            gap: 0.5rem;
            font-size: 0.95rem;
            font-weight: 500;
            margin-bottom: 0.75rem;
            color: var(--text-muted);
        }

        label i {
            font-size: 0.9rem;
            color: var(--accent);
        }

        input, textarea, select {
            width: 100%;
            padding: 1rem 1.25rem;
            background: rgba(10, 12, 20, 0.4);
            border: 1px solid var(--border-color);
            border-radius: 8px;
            color: var(--text-white);
            font-family: var(--body-font);
            font-size: 1rem;
            transition: all 0.3s ease;
        }

        input::placeholder {
            color: rgba(255, 255, 255, 0.3);
        }

        input:focus, textarea:focus, select:focus {
            outline: none;
            border-color: var(--accent);
            box-shadow: 0 0 0 4px var(--focus-glow);
        }

        textarea {
            min-height: 120px;
            resize: vertical;
        }

        .salary-range {
            display: flex;
            gap: 1.5rem;
            grid-column: 1 / -1;
        }

        .salary-range .form-group {
            flex: 1;
        }

        .submit-btn {
            display: inline-flex;
            align-items: center;
            justify-content: center;
            gap: 1rem;
            padding: 1.25rem 2.5rem;
            background: linear-gradient(135deg, var(--accent) 0%, var(--accent-light) 100%);
            color: white;
            border: none;
            border-radius: 10px;
            font-weight: 600;
            font-size: 1.1rem;
            cursor: pointer;
            transition: all 0.3s ease;
            box-shadow: 0 4px 15px rgba(213, 77, 103, 0.4);
            position: relative;
            overflow: hidden;
        }

        .submit-btn::before {
            content: '';
            position: absolute;
            top: 0;
            left: -100%;
            width: 100%;
            height: 100%;
            background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.2), transparent);
            transition: 0.5s;
        }

        .submit-btn:hover {
            transform: translateY(-3px);
            box-shadow: 0 8px 25px rgba(213, 77, 103, 0.6);
        }

        .submit-btn:hover::before {
            left: 100%;
        }

        .btn-icon {
            transition: transform 0.3s ease;
        }

        .submit-btn:hover .btn-icon {
            transform: translateX(5px);
        }

        .form-actions {
            display: flex;
            justify-content: center;
            margin-top: 1rem;
        }

        /* Form field icons */
        .input-icon {
            position: absolute;
            right: 1.25rem;
            top: 70%;
            transform: translateY(-50%);
            color: var(--text-muted);
            font-size: 1rem;
        }

        /* Responsive adjustments */
        @media (max-width: 992px) {
            .create-job-wrapper {
                padding: 2.5rem;
                margin: 2rem;
            }
        }

        @media (max-width: 768px) {
            .form-grid {
                grid-template-columns: 1fr;
                gap: 1.5rem;
            }
            
            h1 {
                font-size: 2rem;
            }
            
            .form-subtitle {
                font-size: 1rem;
            }
        }

        @media (max-width: 576px) {
            .create-job-wrapper {
                padding: 1.75rem;
                margin: 1.5rem;
                border-radius: 16px;
            }
            
            .salary-range {
                flex-direction: column;
                gap: 1.5rem;
            }
            
            .submit-btn {
                width: 100%;
                padding: 1.15rem;
            }
            
            h1 {
                font-size: 1.75rem;
            }
        }

        /* Animation */
        @keyframes fadeIn {
            from { opacity: 0; transform: translateY(20px); }
            to { opacity: 1; transform: translateY(0); }
        }

        .form-card {
            animation: fadeIn 0.6s ease forwards;
            opacity: 0;
        }

        .form-card:nth-child(1) { animation-delay: 0.1s; }
        .form-card:nth-child(2) { animation-delay: 0.2s; }
        .form-card:nth-child(3) { animation-delay: 0.3s; }
        .form-card:nth-child(4) { animation-delay: 0.4s; }
        .form-card:nth-child(5) { animation-delay: 0.5s; }
        .form-card:nth-child(6) { animation-delay: 0.6s; }
        .form-card:nth-child(7) { animation-delay: 0.7s; }
        .form-card:nth-child(8) { animation-delay: 0.8s; }
        .form-card:nth-child(9) { animation-delay: 0.9s; }
    </style>
{% endblock %}

{% block body %}
<div class="create-job-wrapper">
    <div class="form-header">
        <div class="form-icon">
            <i class="fas fa-briefcase"></i>
        </div>
        <h1>Create New Opportunity</h1>
        <p class="form-subtitle">Fill in the details to post your job listing and find the perfect candidate</p>
    </div>
    
    {{ form_start(form) }}
        <div class="form-grid">
            <div class="form-card">
                <div class="form-group">
                    <label for="{{ form.jobTitle.vars.id }}">
                        <i class="fas fa-heading"></i> Job Title
                    </label>
                    {{ form_widget(form.jobTitle) }}
                    <i class="fas fa-pen input-icon"></i>
                </div>
            </div>

            <div class="form-card">
                <div class="form-group">
                    <label for="{{ form.eventTitle.vars.id }}">
                        <i class="fas fa-calendar-alt"></i> Event Title
                    </label>
                    {{ form_widget(form.eventTitle) }}
                    <i class="fas fa-tag input-icon"></i>
                </div>
            </div>

            <div class="form-card">
                <div class="form-group">
                    <label for="{{ form.jobLocation.vars.id }}">
                        <i class="fas fa-map-marker-alt"></i> Job Location
                    </label>
                    {{ form_widget(form.jobLocation) }}
                    <i class="fas fa-location-dot input-icon"></i>
                </div>
            </div>

            <div class="form-card">
                <div class="form-group">
                    <label for="{{ form.employmentType.vars.id }}">
                        <i class="fas fa-user-tie"></i> Employment Type
                    </label>
                    {{ form_widget(form.employmentType) }}
                    <i class="fas fa-briefcase input-icon"></i>
                </div>
            </div>

            <div class="form-card">
                <div class="form-group">
                    <label for="{{ form.applicationDeadLine.vars.id }}">
                        <i class="fas fa-clock"></i> Application Deadline
                    </label>
                    {{ form_widget(form.applicationDeadLine) }}
                    <i class="fas fa-calendar-day input-icon"></i>
                </div>
            </div>

            <div class="salary-range form-card">
                <div class="form-group">
                    <label for="{{ form.minSalary.vars.id }}">
                        <i class="fas fa-money-bill-wave"></i> Minimum Salary
                    </label>
                    {{ form_widget(form.minSalary) }}
                    <i class="fas fa-coins input-icon"></i>
                </div>
                <div class="form-group">
                    <label for="{{ form.maxSalary.vars.id }}">
                        <i class="fas fa-money-bill-wave"></i> Maximum Salary
                    </label>
                    {{ form_widget(form.maxSalary) }}
                    <i class="fas fa-coins input-icon"></i>
                </div>
            </div>

            <div class="form-card">
                <div class="form-group">
                    <label for="{{ form.currency.vars.id }}">
                        <i class="fas fa-dollar-sign"></i> Currency
                    </label>
                    {{ form_widget(form.currency) }}
                    <i class="fas fa-wallet input-icon"></i>
                </div>
            </div>

            <div class="form-card tall">
                <div class="form-group">
                    <label for="{{ form.jobDescreption.vars.id }}">
                        <i class="fas fa-file-alt"></i> Job Description
                    </label>
                    {{ form_widget(form.jobDescreption) }}
                </div>
            </div>

            <div class="form-card">
                <div class="form-group">
                    <label for="{{ form.recruiterName.vars.id }}">
                        <i class="fas fa-user"></i> Recruiter Name
                    </label>
                    {{ form_widget(form.recruiterName) }}
                    <i class="fas fa-signature input-icon"></i>
                </div>
            </div>

            <div class="form-card">
                <div class="form-group">
                    <label for="{{ form.recruiterEmail.vars.id }}">
                        <i class="fas fa-envelope"></i> Recruiter Email
                    </label>
                    {{ form_widget(form.recruiterEmail) }}
                    <i class="fas fa-at input-icon"></i>
                </div>
            </div>
        </div>
        
        <div class="form-actions">
            <button type="submit" class="submit-btn">
                <span>Post Opportunity</span>
                <i class="fas fa-paper-plane btn-icon"></i>
            </button>
        </div>
    {{ form_end(form) }}
</div>
{% endblock %}
</file>

<file path="templates/jobapplications/jobapplications.html.twig">
{% extends 'base.html.twig' %}

{% block title %}Job Applications{% endblock %}

{% block stylesheets %}
    <link rel="stylesheet" href="{{ asset('css/organizer.css') }}">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
{% endblock %}

{% block body %}
<!-- Sidebar Toggle Button (Mobile) -->
<button class="sidebar-toggle" id="sidebarToggle">
    <i class="fas fa-bars"></i>
</button>

<div class="app-container">
    <!-- Sidebar -->
    <aside class="sidebar" id="sidebar">
        <div class="sidebar-header">
            <a href="{{ path('app-root') }}" class="sidebar-logo">
                <i class="fas fa-briefcase"></i>
                <span>Maysem</span>
            </a>
        </div>
        <ul class="sidebar-nav">
            <li>
                <a href="{{ path('app-root') }}" class="{{ app.request.get('_route') == '/root' ? 'active' : '' }}">
                    <i class="fas fa-home"></i>
                    <span>Home</span>
                </a>
            </li>
            <li>
                <a href="{{ path('app_organizer') }}" class="{{ app.request.get('_route') == '/organizer' ? 'active' : '' }}">
                    <i class="fas fa-tachometer-alt"></i>
                    <span>Dashboard</span>
                </a>
            </li>
            <li>
                <a href="{{ path('app_create_job') }}" class="{{ app.request.get('_route') == '/create/job' ? 'active' : '' }}">
                    <i class="fas fa-plus-circle"></i>
                    <span>Create Job</span>
                </a>
            </li>
            <li>
                <a href="{{ path('app_job_feed') }}" class="{{ app.request.get('_route') == '/job/feed' ? 'active' : '' }}">
                    <i class="fas fa-list-alt"></i>
                    <span>Job Feed</span>
                </a>
            </li>
            <li>
                <a href="{{ path('app_job_applications') }}" class="active">
                    <i class="fas fa-file-alt"></i>
                    <span>Applications</span>
                </a>
            </li>
        </ul>
        <div class="sidebar-footer">
            &copy; {{ "now"|date("Y") }} Maysem Platform
        </div>
    </aside>

    <!-- Main Content -->
    <main class="main-content">
        <div class="dashboard-container">
            <h1>Job Applications</h1>

            {% if applications|length > 0 %}
                <div class="table-container">
                    <table class="data-table">
                        <thead>
                            <tr>
                                <th>Applicant</th>
                                <th>Job Title</th>
                                <th>Status</th>
                                <th>Applied At</th>
                                <th>Cover Letter</th>
                                <th>Resume</th>
                                <th>Rating</th>
                            </tr>
                        </thead>
                        <tbody>
                            {% for app in applications %}
                            <tr>
                                <td>{{ app.userId.username }}</td>
                                <td>{{ app.jobId.jobTitle }}</td>
                                <td>{{ app.status }}</td>
                                <td>{{ app.appliedAt }}</td>
                                <td>{{ app.coverLetter }}</td>
                                <td><a href="{{ asset('uploads/resumes/' ~ app.resumePath) }}" target="_blank">View Resume</a></td>
                                <td>{{ app.coverRating ?? 'N/A' }}</td>
                            </tr>
                            {% endfor %}
                        </tbody>
                    </table>
                </div>
            {% else %}
                <div class="no-data">No applications found.</div>
            {% endif %}
        </div>
    </main>
</div>

{% block javascripts %}
<script>
    document.addEventListener('DOMContentLoaded', function() {
        const sidebarToggle = document.getElementById('sidebarToggle');
        const sidebar = document.getElementById('sidebar');

        sidebarToggle.addEventListener('click', function() {
            sidebar.classList.toggle('active');
        });
    });
</script>
{% endblock %}
{% endblock %}
</file>

<file path="templates/jobfeed/jobfeed.html.twig">
{# templates/job_feed.html.twig #}

{% block title %}All Job Opportunities{% endblock %}

{% block stylesheets %}
  <link rel="stylesheet" href="{{ asset('css/job_feed.css') }}">
{% endblock %}

{% block body %}
  {% set current_route = app.request.get('_route') %}

  <div class="app-container">

    <aside class="sidebar">
      <div class="sidebar-header">
        <a href="{{ path('app-root') }}" class="sidebar-logo">
          <i class="fa-briefcase"></i>
          <span>Maysem</span>
        </a>
      </div>
      <ul class="sidebar-nav">
        <li><a href="{{ path('app-root') }}"
               class="sidebar-link {{ current_route == 'app-root' ? 'active' : '' }}">Home</a></li>
        <li><a href="{{ path('app_organizer') }}"
               class="sidebar-link {{ current_route == 'app_organizer' ? 'active' : '' }}">Dashboard</a></li>
        <li><a href="{{ path('app_create_job') }}"
               class="sidebar-link {{ current_route == 'app_create_job' ? 'active' : '' }}">Create Job</a></li>
        <li><a href="{{ path('app_job_feed') }}"
               class="sidebar-link {{ current_route == 'app_job_feed' ? 'active' : '' }}">Job Feed</a></li>
      </ul>
      <div class="sidebar-footer">
        &copy; {{ "now"|date("Y") }} Maysem Platform
      </div>
    </aside>

    <main class="main-content">
      <h1 class="page-title">All Available Jobs</h1>
      <div class="jobs-list">
        {% if jobs|length > 0 %}
          {% for job in jobs %}
            <div class="job-card">
              <h2 class="job-title">{{ job.jobTitle }}</h2>
              <div class="job-subtitle">
                <i class="fa fa-file-text-o"></i> {{ job.category ?? 'symfony is the best' }}
              </div>
              
              <div class="job-card-body">
                <div class="job-left-column">
                  <h3 class="section-title">Job Details</h3>
                  
                  <div class="job-detail-item">
                    <div class="job-detail-icon">
                      <i class="fa fa-map-marker"></i>
                    </div>
                    <div class="job-detail-label">Location:</div>
                    <div class="job-detail-value">{{ job.jobLocation }}</div>
                  </div>
                  
                  <div class="job-detail-item">
                    <div class="job-detail-icon">
                      <i class="fa fa-clock-o"></i>
                    </div>
                    <div class="job-detail-label">Type:</div>
                    <div class="job-detail-value">{{ job.employmentType }}</div>
                  </div>
                  
                  <div class="job-detail-item">
                    <div class="job-detail-icon">
                      <i class="fa fa-user"></i>
                    </div>
                    <div class="job-detail-label">Recruiter:</div>
                    <div class="job-detail-value">{{ job.recruiterName }}</div>
                  </div>
                  
                  <div class="job-detail-item">
                    <div class="job-detail-icon">
                      <i class="fa fa-envelope"></i>
                    </div>
                    <div class="job-detail-label">Contact:</div>
                    <div class="job-detail-value">{{ job.recruiterEmail }}</div>
                  </div>
                  
                  <div class="job-description">
                    <h3 class="job-description-title">Description</h3>
                    <div class="job-description-text">{{ job.description ?? 'this is the first job in symfony' }}</div>
                  </div>
                </div>
                
                <div class="job-right-column">
                  <h3 class="section-title">Key Information</h3>
                  
                  <div class="key-info">
                    {% if job.applicationDeadLine %}
                      <div class="deadline-info">
                        <div class="deadline-icon">
                          <i class="fa fa-exclamation-circle"></i>
                        </div>
                        <div class="deadline-details">
                          <div class="deadline-label">Deadline:</div>
                          <div class="deadline-value">{{ job.applicationDeadLine|date('m/d/Y') }}</div>
                        </div>
                      </div>
                    {% endif %}
                    
                    <button class="apply-button" onclick="openModal({{ job.id }})">Apply Now</button>
                    <button class="share-button">
                      <i class="fa fa-share-alt"></i> Share Job
                    </button>
                  </div>
                </div>
              </div>
            </div>
          {% endfor %}
        {% else %}
          <div class="no-jobs">No Jobs Available</div>
        {% endif %}
      </div>
    </main>
  </div>

  {# Modal #}
  <div class="modal" id="applicationModal">
    <div class="modal-dialog">
      <div class="modal-content">
        <header class="modal-header">
          <h2>Apply for Position</h2>
          <button class="close-button" onclick="closeModal()">×</button>
        </header>
        <form id="applicationForm" method="POST" enctype="multipart/form-data">
          <div class="modal-body">
            <label for="cvUpload">Upload CV (PDF, max 5MB)</label>
            <input type="file" id="cvUpload" name="cv" accept=".pdf" required>
            <label for="coverLetter">Cover Letter</label>
            <textarea id="coverLetter" name="coverLetter" rows="4"></textarea>
          </div>
          <footer class="modal-footer">
            <button type="button" class="btn btn-secondary" onclick="closeModal()">Cancel</button>
            <button type="submit" class="btn btn-primary">Submit Application</button>
          </footer>
        </form>
      </div>
    </div>
  </div>
{% endblock %}



{% block javascripts %}
  <script>
    function openModal(jobId) {
      document.getElementById('applicationForm').action =
        "{{ path('job_apply', {'id':'JOB_ID'}) }}".replace('JOB_ID', jobId);
      document.getElementById('applicationModal').classList.add('active');
    }
    function closeModal() {
      document.getElementById('applicationModal').classList.remove('active');
    }
  </script>
{% endblock %}
</file>

<file path="templates/organizer/organizer.html.twig">
{% block title %}Dashboard{% endblock %}

{% block stylesheets %}
   
    <link rel="stylesheet" href="{{ asset('css/organizer.css') }}">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
{% endblock %}

{% block body %}
<!-- Sidebar Toggle Button (Mobile) -->
<button class="sidebar-toggle" id="sidebarToggle">
    <i class="fas fa-bars"></i>
</button>

<div class="app-container">
    <!-- Sidebar -->
    <aside class="sidebar" id="sidebar">
        <div class="sidebar-header">
            <a href="{{ path('app-root') }}" class="sidebar-logo">
                <i class="fas fa-briefcase"></i>
                <span>Maysem</span>
            </a>
        </div>
        <ul class="sidebar-nav">
            <li>
                <a href="{{ path('app-root') }}" class="{{ app.request.get('_route') == '/root' ? 'active' : '' }}">
                    <i class="fas fa-home"></i>
                    <span>Home</span>
                </a>
            </li>
            <li>
                <a href="{{ path('app_organizer') }}" class="{{ app.request.get('_route') == '/organizer' ? 'active' : '' }}">
                    <i class="fas fa-tachometer-alt"></i>
                    <span>Dashboard</span>
                </a>
            </li>
            <li>
                <a href="{{ path('app_create_job') }}" class="{{ app.request.get('_route') == '/create/job' ? 'active' : '' }}">
                    <i class="fas fa-plus-circle"></i>
                    <span>Create Job</span>
                </a>
            </li>
            <li>
                <a href="{{ path('app_job_feed') }}" class="{{ app.request.get('_route') == '/job/feed' ? 'active' : '' }}">
                    <i class="fas fa-list-alt"></i>
                    <span>Job Feed</span>
                </a>
            </li>
            {# <li>
                <a href="{{ path('app_event_new') }}" class="{{ app.request.get('_route') == 'app_event_new' ? 'active' : '' }}">
                    <i class="fas fa-calendar-plus"></i>
                    <span>Create Event</span>
                </a>
            </li> #}
        </ul>
        <div class="sidebar-footer">
            &copy; {{ "now"|date("Y") }} Connect Sphere
        </div>
    </aside>

    <!-- Main Content -->
    <main class="main-content">
        <div class="dashboard-container">
            <h1>Dashboard - {{ user.username }}</h1>

            <div class="section-header">Job Postings</div>
            {% if jobs|length > 0 %}
                <div class="table-container">
                    <table class="data-table">
                        <thead>
                            <tr>
                                <th>Title</th>
                                <th>Location</th>
                                <th>Type</th>
                                <th>Salary Range</th>
                                <th>Deadline</th>
                            </tr>
                        </thead>
                        <tbody>
                            {% for job in jobs %}
                            <tr>
                                <td>{{ job.jobTitle }}</td>
                                <td>{{ job.jobLocation }}</td>
                                <td>{{ job.employmentType }}</td>
                                <td>{{ job.currency }} {{ job.minSalary|number_format }} - {{ job.currency }} {{ job.maxSalary|number_format }}</td>
                                <td>{{ job.applicationDeadLine|date('Y-m-d') }}</td>
                            </tr>
                            {% endfor %}
                        </tbody>
                    </table>
                </div>
            {% else %}
                <div class="no-data">No job postings found</div>
            {% endif %}

            <div class="section-header">Events</div>
            {% if events|length > 0 %}
                <div class="table-container">
                    <table class="data-table">
                        <thead>
                            <tr>
                                <th>Event Name</th>
                                <th>Location</th>
                                <th>Start Time</th>
                                <th>End Time</th>
                                <th>Points</th>
                            </tr>
                        </thead>
                        <tbody>
                            {% for event in events %}
                            <tr>
                                <td>{{ event.name }}</td>
                                <td>{{ event.location }}</td>
                                <td>{{ event.startTime|date('Y-m-d H:i') }}</td>
                                <td>{{ event.endTime|date('Y-m-d H:i') }}</td>
                                <td>{{ event.points }}</td>
                            </tr>
                            {% endfor %}
                        </tbody>
                    </table>
                </div>
            {% else %}
                <div class="no-data">No events found</div>
            {% endif %}
        </div>
    </main>
</div>

{% block javascripts %}
   
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            const sidebarToggle = document.getElementById('sidebarToggle');
            const sidebar = document.getElementById('sidebar');
            const mainContent = document.querySelector('.main-content');
            
            sidebarToggle.addEventListener('click', function() {
                sidebar.classList.toggle('active');
            });
        });
    </script>
{% endblock %}
{% endblock %}
</file>

</files>
